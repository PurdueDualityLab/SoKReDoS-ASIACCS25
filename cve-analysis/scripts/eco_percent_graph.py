import json
import sys
import os
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from collections import defaultdict
import re
import pandas as pd

CheckpointAndExit = False
LoadFromCheckpoint = False

v = os.getenv("TAKE_CHECKPOINT")
if v is not None and v == "1":
    CheckpointAndExit = True

CheckpointFile = "my_checkpoint.pkl"
v = os.getenv("LOAD_CHECKPOINT")
if v is not None and v == "1":
    LoadFromCheckpoint = True

# Define ecosystems with multiple keywords (case-insensitive)
ecosystems = {
    'JS': ['npm', 'node.js', 'nodejs', 'javascript', 'js'],
    'Py.': ['pypi', 'python', 'pip', 'django', 'flask'],
    'Java': ['maven', 'java', 'spring'],
    'Ruby': ['rubygems', 'ruby', 'rails', 'gems'],
    'PHP': ['packagist', 'composer', 'php', 'laravel'],
    'Rust': ['cargo', 'rust', 'crates.io', 'rust-lang'],
}

# Define CWE groups
cwe_groups = {
    'Bad Acc. Ctrl.': ['CWE-22', 'CWE-23', 'CWE-35', 'CWE-59', 'CWE-200', 'CWE-201', 'CWE-219', 'CWE-264', 
                              'CWE-275', 'CWE-276', 'CWE-284', 'CWE-285', 'CWE-352', 'CWE-359', 'CWE-377', 'CWE-402', 
                              'CWE-425', 'CWE-441', 'CWE-497', 'CWE-538', 'CWE-540', 'CWE-548', 'CWE-552', 'CWE-566', 
                              'CWE-601', 'CWE-639', 'CWE-651', 'CWE-668', 'CWE-706', 'CWE-862', 'CWE-863', 'CWE-913', 
                              'CWE-922', 'CWE-1275'],
    'Crypto Fail': ['CWE-261', 'CWE-296', 'CWE-310', 'CWE-319', 'CWE-321', 'CWE-322', 'CWE-323', 'CWE-324', 
                               'CWE-325', 'CWE-326', 'CWE-327', 'CWE-328', 'CWE-329', 'CWE-330', 'CWE-331', 'CWE-335', 
                               'CWE-336', 'CWE-337', 'CWE-338', 'CWE-340', 'CWE-347', 'CWE-523', 'CWE-720', 'CWE-757', 
                               'CWE-759', 'CWE-760', 'CWE-780', 'CWE-818', 'CWE-916'],
    'Injection': ['CWE-20', 'CWE-74', 'CWE-75', 'CWE-77', 'CWE-78', 'CWE-79', 'CWE-80', 'CWE-83', 'CWE-87',
                  'CWE-88', 'CWE-89', 'CWE-90', 'CWE-91', 'CWE-93', 'CWE-94', 'CWE-95', 'CWE-96', 'CWE-97', 
                  'CWE-98', 'CWE-99', 'CWE-100', 'CWE-113', 'CWE-116', 'CWE-138', 'CWE-184', 'CWE-470', 
                  'CWE-471', 'CWE-564', 'CWE-610', 'CWE-643', 'CWE-644', 'CWE-652', 'CWE-917'],
    'Insec. Design': ['CWE-73', 'CWE-183', 'CWE-209', 'CWE-213', 'CWE-235', 'CWE-256', 'CWE-257', 'CWE-266', 
                        'CWE-269', 'CWE-280', 'CWE-311', 'CWE-312', 'CWE-313', 'CWE-316', 'CWE-419', 'CWE-430', 
                        'CWE-434', 'CWE-444', 'CWE-451', 'CWE-472', 'CWE-501', 'CWE-522', 'CWE-525', 'CWE-539', 
                        'CWE-579', 'CWE-598', 'CWE-602', 'CWE-642', 'CWE-646', 'CWE-650', 'CWE-653', 'CWE-656', 
                        'CWE-657', 'CWE-799', 'CWE-807', 'CWE-840', 'CWE-841', 'CWE-927', 'CWE-1021', 'CWE-1173'],
    'Sec. Misconfig': ['CWE-2', 'CWE-11', 'CWE-13', 'CWE-15', 'CWE-16', 'CWE-260', 'CWE-315', 'CWE-520', 'CWE-526', 
                                   'CWE-537', 'CWE-541', 'CWE-547', 'CWE-611', 'CWE-614', 'CWE-756', 'CWE-776', 'CWE-942', 
                                   'CWE-1004', 'CWE-1032', 'CWE-1174'],
    'Vuln/Old Comps.': ['CWE-937', 'CWE-1035', 'CWE-1104'],
    'ID/Auth Fail': ['CWE-255', 'CWE-259', 'CWE-287', 'CWE-288', 'CWE-290', 'CWE-294', 'CWE-295', 'CWE-297', 
                                                   'CWE-300', 'CWE-302', 'CWE-304', 'CWE-306', 'CWE-307', 'CWE-346', 'CWE-384', 'CWE-521', 
                                                   'CWE-613', 'CWE-620', 'CWE-640', 'CWE-798', 'CWE-940', 'CWE-1216'],
    'SW/Data Integ. Fail': ['CWE-345', 'CWE-353', 'CWE-426', 'CWE-494', 'CWE-502', 'CWE-565', 'CWE-784', 'CWE-829', 
                                             'CWE-830', 'CWE-915'],
    'Log/Monitor Fail': ['CWE-117', 'CWE-223', 'CWE-532', 'CWE-778'],
    'SSRF': ['CWE-918'],
    'ReDoS': ['CWE-1333']
}

# Create a group for other CWEs
other_cwe_group = 'Other'

# Combine all CWEs from groups into a single set
all_cwes = set()
for cwes in cwe_groups.values():
    all_cwes.update(cwes)

# Function to classify CWE into groups
def classify_cwe(cwe):
    for group, cwes in cwe_groups.items():
        if cwe in cwes:
            return group
    return other_cwe_group

# Function to load JSON data
def load_json(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data

# Function to check if any keyword is in the text (case-insensitive)
def contains_keyword(text, keywords):
    regex_pattern = r'\b(?:' + '|'.join(re.escape(word) for word in keywords) + r')\b'
    return bool(re.search(regex_pattern, text, flags=re.IGNORECASE))

if LoadFromCheckpoint:
    df = pd.read_pickle(CheckpointFile)
else:
    # Directory where the unzipped NVD JSON files are stored
    data_dir = '../data/nvd/'

    # Initialize a dictionary to store CWE counts for each ecosystem
    ecosystem_cwe_counts = {ecosystem: defaultdict(int) for ecosystem in ecosystems}
    cve_counts = defaultdict(int)

    # Process data for each year from 2014 to 2023
    years = range(2014, 2023 + 1)
    for year in years:
        file_path = os.path.join(data_dir, f'nvdcve-1.1-{year}.json')
        data = load_json(file_path)
        for item in data['CVE_Items']:
            description = item['cve']['description']['description_data'][0]['value']
            urls = [ref['url'] for ref in item['cve']['references']['reference_data']]
            
            # Get the CWE ID if available
            cwe_id = 'Unknown'
            if item['cve']['problemtype']['problemtype_data']:
                if item['cve']['problemtype']['problemtype_data'][0]['description']:
                    cwe_id = item['cve']['problemtype']['problemtype_data'][0]['description'][0]['value']
            
            # Discard if CWE ID is 'NVD-CWE-Other' or 'NVD-CWE-noinfo'
            if cwe_id in ['NVD-CWE-Other', 'NVD-CWE-noinfo']:
                continue
            
            group = classify_cwe(cwe_id)
            
            matched = False
            for ecosystem, keywords in ecosystems.items():
                if contains_keyword(description, keywords) or any(contains_keyword(url, keywords) for url in urls):
                    ecosystem_cwe_counts[ecosystem][group] += 1
                    cve_counts[ecosystem] += 1
                    matched = True
                    break  # Stop checking after the first match to avoid multiple counts

    # Prepare data for plotting
    ecosystem_labels = list(ecosystems.keys())
    group_labels = list(cwe_groups.keys()) + [other_cwe_group]

    # Create a DataFrame for easier plotting
    data = {ecosystem: [ecosystem_cwe_counts[ecosystem].get(group, 0) for group in group_labels] for ecosystem in ecosystem_labels}
    df = pd.DataFrame(data, index=group_labels)

    if CheckpointAndExit:
        df.to_pickle(CheckpointFile)
        print("Checkpoint saved to " + CheckpointFile + " -- Exiting")
        sys.exit(0)



# Calculate the percentage distribution of CWE groups within each ecosystem
df_percentage = df.div(df.sum(axis=0), axis=1) * 100



# Drop "other"
df_percentage = df_percentage.drop('Other')

custom_palette = ["#9c92a6", "#615071", "#103354", "#195186", "#2066a8", "#8ec1da", "#cde1ec", "#ededed", "#f6d6c2", "#d47264", "#8b2023"]

# Plotting the results
fig, ax = plt.subplots(figsize=(12, 8))
df_percentage.transpose().plot(kind='bar', stacked=True, ax=ax, color=custom_palette)

text_size = 36

plt.ylabel('Percentage of CVEs', fontsize = text_size)
# plt.title('Percentage Distribution of CWE Groups by Ecosystem (2014-2023)')

# make x axis labels horizontal
plt.xticks(rotation=0, fontsize=text_size)

# make y axis go to 90
plt.yticks(range(0, 101, 25), fontsize=text_size)

handles, labels = ax.get_legend_handles_labels()
handles = handles[::-1]
labels = labels[::-1]

labels = ['ReDoS (1.2%)', 
          'SSRF (0.8%)', 
          'Log/Monitor Fail (0.4%)', 
          'SW/Data Integ. Fail (3.7%)',
          'ID/Auth Fail (3.5%)', 
          'Vuln/Old Comps. (0.0%)', 
          'Sec. Misconfig (1.0%)', 
          'Insec. Design (4.4%)', 
          'Injection (36.1%)', 
          'Crypto Fail (2.1%)', 
          'Bad Acc. Ctrl. (18.0%)']

# Create a legend with custom colors
legend = ax.legend(handles, labels, title='CWE Type (Avg.)', title_fontsize=text_size - 4, fontsize=text_size - 4, loc='upper left', bbox_to_anchor=(1, 1))
legend.get_frame().set_facecolor('white')
legend.get_frame().set_alpha(1)  # Set alpha to 1 to make it non-transparent

column_sums = {
    'JS': 0,
    'Py.': 0,
    'Java': 0,
    'Ruby': 0,
    'PHP': 0,
    'Rust': 0
}

# sum up each column in the dataframe
for column in df_percentage:
    column_sums[column] = df_percentage[column].sum()

# Annotating the bars with the heights
ax.text(0, column_sums['JS'] + 0.5, 'N=6127', ha='center', va='bottom', fontsize = text_size - 6)
ax.text(1, column_sums['Py.'] + 0.5, 'N=1039', ha='center', va='bottom' , fontsize = text_size - 6)
ax.text(2, column_sums['Java'] + 0.5, 'N=2920', ha='center', va='bottom', fontsize = text_size - 6)
ax.text(3, column_sums['Ruby'] + 0.5, 'N=369', ha='center', va='bottom', fontsize = text_size - 6)
ax.text(4, column_sums['PHP'] + 0.5, 'N=14888', ha='center', va='bottom', fontsize = text_size - 6)
ax.text(5, column_sums['Rust'] + 0.5, 'N=438', ha='center', va='bottom', fontsize = text_size - 6)

plt.tight_layout()
plt.show()