import json
import os
import matplotlib.pyplot as plt
from collections import defaultdict
import re

# Define ecosystems with multiple keywords (case-insensitive)
ecosystems = {
    'npm (JS)': ['npm', 'node.js', 'nodejs', 'javascript', 'js'],
    'PyPI (Py.)': ['pypi', 'python', 'pip', 'django', 'flask', 'anaconda'],
    'Maven (Java)': ['maven', 'java', 'spring'],
    'Gems (Ruby)': ['rubygems', 'ruby', 'rails', 'gems'],
    'Pkgist (PHP)': ['packagist', 'composer', 'php', 'laravel'],
    'Cargo (Rust)': ['cargo', 'rust', 'crates.io', 'rust-lang'],
}

# Function to load JSON data
def load_json(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
    return data

# Function to check if any keyword is in the text (case-insensitive)
def contains_keyword(text, keywords):
    regex_pattern = r'\b(?:' + '|'.join(re.escape(word) for word in keywords) + r')\b'
    return bool(re.search(regex_pattern, text, flags=re.IGNORECASE))

# Directory where the unzipped NVD JSON files are stored
data_dir = 'data/nvd/'

# Initialize a dictionary to store CVE counts for each ecosystem
cve_counts = defaultdict(int)

# Initialize a dictionary to store CVE IDs for each ecosystem
cve_ids = {ecosystem: [] for ecosystem in ecosystems}

# Process data for each year from 2014 to 2023
years = range(2014, 2023 + 1)
for year in years:
    file_path = os.path.join(data_dir, f'nvdcve-1.1-{year}.json')
    data = load_json(file_path)
    for item in data['CVE_Items']:
        description = item['cve']['description']['description_data'][0]['value']
        urls = [ref['url'] for ref in item['cve']['references']['reference_data']]
        matched = False
        for ecosystem, keywords in ecosystems.items():
            if contains_keyword(description, keywords) or any(contains_keyword(url, keywords) for url in urls):
                cve_counts[ecosystem] += 1
                cve_ids[ecosystem].append(item['cve']['CVE_data_meta']['ID'])
                matched = True
                break  # Stop checking after the first match to avoid multiple counts

# Plotting the results
plt.figure(figsize=(8, 6))

# define text size
plt.rcParams.update({'font.size': 32})


# define order of ecosystems
labels = [
    'npm (JS)',
    'PyPI (Py.)',
    'Maven (Java)',
    'Gems (Ruby)',
    'Pkgist (PHP)',
    'Cargo (Rust)'
]

bars = plt.bar(labels, [cve_counts[ecosystem] for ecosystem in labels], color='#2066a8')

# plt.xlabel('Ecosystem')
plt.ylabel('Number of CVEs')
# plt.title('Number of CVEs by Ecosystem (2014-2023)')
plt.xticks(rotation=45)
plt.yticks(range(0, 17000, 2000))

# Annotating the bars with the CVE counts
for i, bar in enumerate(bars):
    yval = bar.get_height()
    # center string on the bar based on string length
    text = f"N = {int(yval)}"
    plt.text(i - len(str(text)) * 0.05, yval, text, va='bottom')

plt.tight_layout()
plt.show()