import requests
import time


KEYS_1 = ['regex', 'regular+expression', 'regexp', 'regular+expression+denial+of+service']
KEYS_2 = ['algorithm', 'backtrace', 'uncontrolled', 'repetition', 'dos', 'algorithmic complexity', 'denial of service', 'infinite loop', 'infinite']


# Function to make an API call for a given repository   
def call_api(repo, eco, token):

    issues = []
    api_url = f"https://api.github.com/search/issues?q=repo:{repo}+{'+OR+'.join(KEYS_1)}"
    headers = {'Authorization': f'token {token}'} if token else {}
    repo_checked = 0
    repo_failed = 0
    repo_hit = 0
    issue_hits = 0

    # Make the API call
    response = requests.get(api_url, headers=headers)

    # Round 1
    if response.status_code == 200:
        try:
            data = response.json()
            if 'items' in data:
                issues = data['items']
            else:
                print(f"No items found in the response for {repo}")
        except ValueError:
            print(f"Error parsing JSON response for {repo}: {response.text}")
            repo_failed = 1
    elif response.status_code == 403:
        print(f"Rate limited for {repo}. Retrying...")
        time.sleep(10)
        repo_hit, issue_hits, repo_checked, repo_failed = call_api(repo, eco, token)
        issues = []
    else:
        print(f"Failed to fetch issues for {repo}: {response.status_code}")
        repo_failed = 1

    # Round 2
    if issues:
        repo_checked = 1
        for issue in issues:
            title = issue.get('title','').lower()
            # prevent errors if body is null
            if issue.get('body') is None:
                body = ''
            else:
                body = issue.get('body','').lower()
            found = any(keyword in title or keyword in body for keyword in KEYS_2)
            if found:
                repo_hit = 1
                issue_hits += 1
                print(f"Match found for {repo}: {issue['html_url']}")
                
                with open(f'{eco}_op_results.csv', 'a') as file:
                    state = ''
                    if issue["state"] == "open":
                        state = 'open'
                    elif "pull_request" in issue:
                        if issue["pull_request"]["merged_at"] != 'null' and issue["pull_request"]["merged_at"] is not None:
                            state = 'fixed'
                        else:
                            state = 'no-fix'
                    else:
                        state = 'no-fix'
                    file.write(f"{repo},{issue['user']['login']},{issue['html_url']},{issue['created_at']},{issue['closed_at']},{state},\n")
    else:
        repo_checked = 1
        pass

    return repo_hit, issue_hits, repo_checked, repo_failed


def main():
        
    # defining the ecosystems
    ecosystems = ['npm', 'pypi', 'rubygems', 'maven', 'packagist', 'cargo']
    repos_checked = {'npm': 0,'pypi': 0,'rubygems': 0,'maven': 0,'packagist': 0,'cargo': 0}
    repos_failed = {'npm': 0,'pypi': 0,'rubygems': 0,'maven': 0,'packagist': 0,'cargo': 0}
    total_issue_hits = {'npm': 0,'pypi': 0,'rubygems': 0,'maven': 0,'packagist': 0,'cargo': 0}
    repos_hit = {'npm': 0,'pypi': 0,'rubygems': 0,'maven': 0,'packagist': 0,'cargo': 0}

    for eco in ecosystems:
        print(f"\nReading repositories for {eco}...\n")

        # reading the repositories from the file
        repositories = []
        with open(f'{eco}_op_filtered.txt', 'r') as file:
            for line in file.readlines():
                repo = line.strip()
                repo = repo.replace('https://github.com/', '')
                repo = repo.replace('\n', '')
                repositories.append(repo)

        # repositories = repositories[repositories.index('fake-repo/real-repo')+1:]

        # Split the repositories into chunks of 5000
        repositories = [repositories[i:i + 5000] for i in range(0, len(repositories), 5000)]
        
        # for each repository, search for issues with the keywords
        for i, repos in enumerate(repositories):
            token = GITHUB_TOKENS[i % len(GITHUB_TOKENS)]
            for repo in repos:
                print(f"Checking {repo}.")
                repo_hit, issue_hits, checked, failed = call_api(repo, eco, token)
                repos_hit[eco] += repo_hit
                total_issue_hits[eco] += issue_hits
                repos_checked[eco] += checked
                repos_failed[eco] += failed
                time.sleep(1.5)

    # Logging information
    with open('logging.csv', 'a') as file:
        file.write(f"ecosystem,repos_checked,repos_failed,repos_hit,total_issue_hits\n")
        for eco in ecosystems:
            file.write(f"{eco},{repos_checked[eco]},{repos_failed[eco]},{repos_hit[eco]},{total_issue_hits[eco]}\n")

if __name__ == "__main__":
    main()
