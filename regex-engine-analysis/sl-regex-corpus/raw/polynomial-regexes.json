[
  {
    "regex": "(\\d+)\\-(\\d+)\\/(\\d+)\\:(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\\\[0-9]{3})+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\00",
        "pump": [
          "\\"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[url=.*\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l[",
        "pump": [
          "[url="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "client host.*blocked",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "client host"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ">\\s+(.*)\\s\\w",
    "inputs": [
      {
        "prefix": [
          ">\t"
        ],
        "suffix": ">",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a>\t"
        ],
        "suffix": ">\taa\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[&?]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "&a",
        "pump": [
          "&"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(.*)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\u03BC)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "㯌a",
        "pump": [
          "㯌"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+):\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<.*?>$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " +and | or +",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " or",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t\\r\\n\\/]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\Q$start\\E\\s*(.*?)\\s*\\Q$stop\\E",
    "inputs": [
      {
        "prefix": [
          "$start\t",
          "a"
        ],
        "suffix": "$s",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a$start\t",
          "a"
        ],
        "suffix": "ar",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "background:(.+?)[; \"]{1,1}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "background:a"
        ]
      },
      {
        "prefix": [
          "background:a"
        ],
        "suffix": "un",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\((.+?)\\) is managing this device",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "his",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w+)\\s*=\\s*['\"]?([^'\"]+)['\"]?\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta\t=\t",
          "a"
        ],
        "suffix": "\ta\"$",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "w=\u0000\u0000"
        ],
        "suffix": "'\u0000",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}{*a",
        "pump": [
          "{*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[\\[[!gbiuso]*;[^;]*;[^\\]]*\\]?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ";;]a[[",
        "pump": [
          "[[;;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^_.*?_(.*)",
    "inputs": [
      {
        "prefix": [
          "_a"
        ],
        "suffix": "a",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Za-zÀ-ÖØ-öø-ÿ]\\S*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\-?\\d+\\.?\\d*),(\\-?\\d+\\.?\\d*)$",
    "inputs": [
      {
        "prefix": [
          "-0",
          "0,-0"
        ],
        "suffix": "-0..",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<p>by (.*?)<br",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "b",
        "pump": [
          "<p>by "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*-([0-9a-f]{1,8})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "SVt_(\\w+),?\\s+/\\*\\s+(\\d+)\\s+\\*/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "*",
        "pump": [
          "SVt_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^( *)([^\\n]+)\\n",
    "inputs": [
      {
        "prefix": [
          " "
        ],
        "suffix": " a\n\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([ 0-9a-zA-Z.:;()_#&,]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(?:\\.(\\d)(?:\\.\\d+)?)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[,\\. ]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "create(.*)db/migrate/\\d+_test_abc_args\\.rb",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "arg",
        "pump": [
          "create"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\%([^\\s]+)\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "%a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*,\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w-]+)(?:\\s+(.+))?",
    "inputs": [
      {
        "prefix": [
          "a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#<Thread:(\\S+) run",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h #\t#<Thread:",
        "pump": [
          "#<Thread:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Cannot perform.*replica.*",
    "inputs": [
      {
        "prefix": [
          "Cannot performa"
        ],
        "suffix": "a",
        "pump": [
          "replica"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+-gradient)\\(([^\\)]*)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a)$a-gradie",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\/\\*.*?\\*\\/)|(\\/\\/[^\\n]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/a\n/",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "( |\\().*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w\\d]+\\.[a-zA-Z]{2,}$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+[.,]?\\d*)(\\+(\\d+[.,]?\\d*)){1}i",
    "inputs": [
      {
        "prefix": [
          "0",
          "0+0"
        ],
        "suffix": "0,++",
        "pump": [
          "0",
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0",
          "0+0"
        ],
        "suffix": "0,0",
        "pump": [
          "0",
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^A-Z0-9:]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "length.js v.* ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "hj le",
        "pump": [
          "lengthajs v"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\".+?\")",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zA-Z\\-]*width: *([0-9]+)px",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "idth",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s+)?(\\*+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(\\w+)\\s*=\\s*\"?([^\"]*)",
    "inputs": [
      {
        "prefix": [
          "\ta\t=\t"
        ],
        "suffix": "a\"",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\ta\t=\t"
        ],
        "suffix": "\ta\"a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<title[^>]*>(.*?)<\\/title>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "it><",
        "pump": [
          "<title"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+trying to set field missing which is not declared in the model.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ecl",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Can't.*'zzz'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "z",
        "pump": [
          "Can't"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(?:\\s+\\n+)",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "\t",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "function.(.+).php",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c",
        "pump": [
          "functionaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " - (.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " - a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https?://www.cnews.fr/[^ ]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " fr",
        "pump": [
          "https://wwwacnewsafr/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *([0-9]+) *- *([0-9]+) *",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "AppleWebKit.+ (NX)/(\\d+)\\.(\\d+)\\.(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "AppleWebKita"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "applying.*?jquery.*?script",
    "inputs": [
      {
        "prefix": [
          "applyinga"
        ],
        "suffix": "i",
        "pump": [
          "jquery"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ps",
        "pump": [
          "applying",
          "jquery"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\\hackscore\\s*{[^}]*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*[^@\\s]+@[^@\\s]+\\.[^@\\s]+\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta@a"
        ],
        "suffix": "\t@",
        "pump": [
          ".a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(unreachable)\\s+([0-9a-fA-F\\.:/]+)\\s+dev\\s+([a-z0-9\\.]+)\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "unreachable\ta\tdev\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "List.*.of_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "isof",
        "pump": [
          "List"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\s*)<\\?php",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t<?",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@(.*)([{(])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(a",
        "pump": [
          "@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*=(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*e?\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "ee",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(\\/?)i(\\s[^>]*)?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i</><i",
        "pump": [
          "</i\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+|\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div class=\"yt-alert-message\"[^>]*>([^<]+)</div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a</><div class=\"yt-alert-mess",
        "pump": [
          "<div class=\"yt-alert-message\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+\\/$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-z0-9]+([a-z])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aa",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "conflict.*chwhat.*chwhat2",
    "inputs": [
      {
        "prefix": [
          "conflicta"
        ],
        "suffix": "at2c",
        "pump": [
          "chwhat"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "at2ch",
        "pump": [
          "conflict",
          "chwhat"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\s*\\d+\\)\\s)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/+?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(backports\\/.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "backports/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "backports/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[if\\s*([^\\]]*)\\]>\\s*(?:<!)?$",
    "inputs": [
      {
        "prefix": [
          "[if\t"
        ],
        "suffix": "i]\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<(\\S+)>;rel=\"(\\S+)\"$",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": ";>",
        "pump": [
          ">;rel=\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9_\\.\\-\\/\\']+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+\\d+\\s+\\d+\\s+(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\ta\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^image::?(.*?)\\[(.*?)\\]$",
    "inputs": [
      {
        "prefix": [
          "image::a"
        ],
        "suffix": "im",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\\\l\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t\\l\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+) ([kKmMgG][bB])/s wr",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(\\/?)([^ >]*)(\\s+(.*))?>",
    "inputs": [
      {
        "prefix": [
          "</a",
          "\t"
        ],
        "suffix": "</",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\t"
        ],
        "suffix": "< ",
        "pump": [
          "<a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@returns.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@returns"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([-+]?[\\d]*\\.?[\\d]+([eE][-+]?[\\d]+)?)\\s?([k|m|g|t]?b)?",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w]+)\\.graph\\ .*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<S>[Ll]eis<\\/S> <T>[Aa]n<\\/T> <E[^>]*>(?:<N[^>]*pl=\"n\" gnt=\"[nd]\"[^>]*>(?:g[Cc]|b[Pp]|m[Bb]|n[Gg]|bh[fF])[^<]+<\\/N>)<\\/E>)",
    "inputs": [
      {
        "prefix": [
          "<S>Leis</S> <T>an</T> <Ea><Na"
        ],
        "suffix": "<S>nG",
        "pump": [
          "pl=\"n\" gnt=\"d\""
        ]
      },
      {
        "prefix": [
          "a<S>Leis</S> <T>an</T> <Ea><Na"
        ],
        "suffix": "m",
        "pump": [
          "pl=\"n\" gnt=\"d\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Name.*string",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "Name"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*? \\(.*?\\) ([\\d.]+).*?",
    "inputs": [
      {
        "prefix": [
          "a",
          "a) ."
        ],
        "suffix": "a",
        "pump": [
          " (",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a) ."
        ],
        "suffix": "a",
        "pump": [
          "a",
          " (",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(#.*)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^go[0-9a-z.]+\\.[0-9a-z.-]+\\.(tar\\.gz|pkg|msi|zip)$",
    "inputs": [
      {
        "prefix": [
          "goa"
        ],
        "suffix": ".t0",
        "pump": [
          ".a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\{to:(.+)}(.+)$",
    "inputs": [
      {
        "prefix": [
          "{to:a"
        ],
        "suffix": "a",
        "pump": [
          "}a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "desc\\[\\\"english\\\"\\]\\s*\\=\\s*string\\s*\\(\\s*\\\"\\s*([^\\)]*)\\\"\\s*\\)\\s*\\;",
    "inputs": [
      {
        "prefix": [
          "desc[\"english\"]\t=\tstring\t(\t\"\t"
        ],
        "suffix": "ing",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "adesc[\"english\"]\t=\tstring\t(\t\"\t"
        ],
        "suffix": "\"",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "raphael.*\\.js",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "raphael"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/.*?\\@",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a@/",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:~.*|escape\\s+.*)u",
    "inputs": [
      {
        "prefix": [
          "escape\t"
        ],
        "suffix": "esc",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aescape\t"
        ],
        "suffix": "e~",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/jcr_root/(libs|apps)/.+/conf.*/[^/]+",
    "inputs": [
      {
        "prefix": [
          "/jcr_root/libs/a"
        ],
        "suffix": "pp/",
        "pump": [
          "/conf"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "pp/",
        "pump": [
          "/jcr_root/apps/a",
          "/conf"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(session|cookie).*(invalid|expired)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "exp",
        "pump": [
          "session"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?(diff --git a)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f ",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-+]?[0-9]+(\\.[0-9]*)?|[0-9]*\\.[0-9]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0+",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w]*\\.\\(\\*([\\w]+)\\)\\.([\\w]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*@param\\s*\\{(.*)}\\s*\\[?(\\w*)]?\\s*(.*)?$",
    "inputs": [
      {
        "prefix": [
          "\t@param\t{a}\t",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t@param\t{a}\t",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "CMSSW_5_.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "CMSSW_5_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+test",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "es$a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+):(.+)\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":",
        "pump": [
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-r .*/lib/guard/rspec_formatter.rb -f Guard::RSpecFormatter",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-f ",
        "pump": [
          "-r "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ARRAY\\s*\\[\\s*(.*\\S)?\\s*\\]",
    "inputs": [
      {
        "prefix": [
          "ARRAY\t[\t"
        ],
        "suffix": "ARR",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aARRAY\t[\t"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Failed to convert from type .*] (.*)$",
    "inputs": [
      {
        "prefix": [
          "Failed to convert from type a"
        ],
        "suffix": "a",
        "pump": [
          "] "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(([^:]+):)?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\.(tgz|tar[\\._-]gz|tar\\.Z|zip)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.\\/(.*)\\.svg",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "./"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w\\.-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Class:(.*)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "Class:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[,\\!]* [^,]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a,",
        "pump": [
          "!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/(.*)/(.*)/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/",
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(jmp|call)\\s+([^:]+)\\s*:\\s*([^:]+)",
    "inputs": [
      {
        "prefix": [
          "\tjmp\t",
          "a",
          "\t:\t"
        ],
        "suffix": "c:",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "var inherits = function[\\s\\S]+?};",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n",
        "pump": [
          "var inherits = functiona"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*#\\s*(.+:.+)",
    "inputs": [
      {
        "prefix": [
          "\t#\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ":a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t#\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a",
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^the attribute '(.*)' of '(.*)' is '(.*)'$",
    "inputs": [
      {
        "prefix": [
          "the attribute 'a",
          "a"
        ],
        "suffix": " att",
        "pump": [
          "' of '",
          "' is '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\s{1}\\(([a-zA-Z]{2})\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aa",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "foo;.*a:1}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "of",
        "pump": [
          "foo;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)([a-z]{2}|%)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\\s+Initial Root Token:\\\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "\\sInitial Root Token:\\s"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a\\sInitial Root Token:\\s"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "hello.*world",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "hello"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^aeiouy]*[aeiouy]+[^aeiouy](\\w*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?",
    "inputs": [
      {
        "prefix": [
          "a://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?:\\s.*\\s(0x[^ ]*|\\w+)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "0 \t:",
        "pump": [
          ":\t",
          "\t0x"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "x \t",
        "pump": [
          "a",
          ":\t",
          "\t0x"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "site\\.q_(\\d+)\\s*=\\s*([^\\s;]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0;",
        "pump": [
          "site.q_0=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)-(\\w+-\\w+-\\d|us-standard)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-0-u",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\s,()\\[\\]]+)(\\(\\d+(-\\d+)*\\))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-(",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(.+)\\s+\\-+([iehos]+\\-+)?\\>\\s*(.*\\S+)\\s*\\n",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a",
          "\t-e->\t",
          "a"
        ],
        "suffix": "-ea\t",
        "pump": [
          "a",
          "\t",
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t",
          "a",
          "\t-e->\t",
          "a"
        ],
        "suffix": "-e-",
        "pump": [
          "\t",
          "a",
          "\t",
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "background-image:url(.*)\\;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ur",
        "pump": [
          "background-image:url"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+(.+):(\\d+)",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "\t:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div class=\"Star (.*?)\"></div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "S",
        "pump": [
          "<div class=\"Star "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<li>(.+?)<\\/li>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "la",
        "pump": [
          "<li>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^HTTP-(.+?): (.+)",
    "inputs": [
      {
        "prefix": [
          "HTTP-a"
        ],
        "suffix": "a",
        "pump": [
          ": a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(..)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\(Default\\)\\s+(REG_SZ)\\s+([^\\s].*)\\s*",
    "inputs": [
      {
        "prefix": [
          "\t(Default)\tREG_SZ\taa"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t(Default)\tREG_SZ\taa"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "starting container process caused \\\\\"exec: .*: executable file not found in \\$PATH",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \\\"",
        "pump": [
          "starting container process caused \\\"exec: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\};.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "};"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'Date'.*date_view.*\\nblah",
    "inputs": [
      {
        "prefix": [
          "'Date'a"
        ],
        "suffix": "Date",
        "pump": [
          "date_view"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "Ddat",
        "pump": [
          "'Date'",
          "date_view"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\}\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "iphone.*(7|8|9)_[0-9]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0aiph",
        "pump": [
          "iphone"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*using\\s+(namespace\\s+)?([^;]+)",
    "inputs": [
      {
        "prefix": [
          "\tusing\tnamespace\t"
        ],
        "suffix": ";",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\tusing\tnamespace\t"
        ],
        "suffix": "p;usin",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^A-Za-z]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([\\$\\@\\%\\*])([\\w:]+)(.*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t$a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<input.*?type=\"hidden\".*?\\>",
    "inputs": [
      {
        "prefix": [
          "<inputa"
        ],
        "suffix": "yp",
        "pump": [
          "type=\"hidden\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "iat<",
        "pump": [
          "<input",
          "type=\"hidden\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)\\W+(asc|desc|ascending|descending)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ascen",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+ kap. +[^\\d]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p0 ",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)\\s+([\\w]+)\\s+([0-9]+)\\s+([0-9]+):([0-9]+):([0-9]+)\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "0\ta\t0\t0:0:0\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0\ta\t0\t0:0:0\t"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<style.*?<\\/style>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y<sty",
        "pump": [
          "<style"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<meta.*?charset=\"?([a-z\\-0-9]*)\"?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "har\"chars",
        "pump": [
          "<meta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " class=\"\\s?(.*?)\\s?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l ",
        "pump": [
          " class=\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^/]*/)?([^/]*)\\.(sock|spec|json)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ck.jso",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<head[^\\>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h<",
        "pump": [
          "<head"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I update the document '(.*)' with the hash named '(.*)'$",
    "inputs": [
      {
        "prefix": [
          "I update the document 'a"
        ],
        "suffix": " nam",
        "pump": [
          "' with the hash named '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*?(\\$\\w+).*?$",
    "inputs": [
      {
        "prefix": [
          "a$a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "mmi-notification-title-with-sim.*sim-number.*1",
    "inputs": [
      {
        "prefix": [
          "mmi-notification-title-with-sima"
        ],
        "suffix": "m-",
        "pump": [
          "sim-number"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "tle",
        "pump": [
          "mmi-notification-title-with-sim",
          "sim-number"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " DEFAULT '(.*?)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "EF",
        "pump": [
          " DEFAULT '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*<!--bodybegin-->(.*)<!--bodyend-->.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<!--bodybegin-->",
          "<!--bodyend-->"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "<!--bodybegin-->",
          "<!--bodyend-->"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^( *)[\\S].*",
    "inputs": [
      {
        "prefix": [
          " "
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "PE ENC failed: Response from https:.+ was not a hash! NilClass",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " Ni",
        "pump": [
          "PE ENC failed: Response from https:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Za-z0-9\\.-_:]+) \\| (success|FAILED) \\| rc=(\\d+).*?\\n\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "a | success | rc=0",
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\n",
          "a"
        ]
      },
      {
        "prefix": [
          ".A"
        ],
        "suffix": "",
        "pump": [
          ":A"
        ]
      },
      {
        "prefix": [
          "a",
          "a | success | rc=0",
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          "\n",
          "a"
        ]
      },
      {
        "prefix": [
          ".:"
        ],
        "suffix": "",
        "pump": [
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "id=([^\\&]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "id&id",
        "pump": [
          "id=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " \\!ruby\\/(object|struct):SM::(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ca\t !ruby/object:SM::",
        "pump": [
          " !ruby/struct:SM::a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "type=hidden.*name=(.*?)\\s*value=\"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "type=hiddena",
          "a"
        ],
        "suffix": "=",
        "pump": [
          "name=",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*): No match",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^the smelly file \"(.+)\" in the directory \"(.+)\"$",
    "inputs": [
      {
        "prefix": [
          "the smelly file \"a"
        ],
        "suffix": "tory ",
        "pump": [
          "\" in the directory \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--help.*Show help.*\\[boolean]",
    "inputs": [
      {
        "prefix": [
          "--helpa"
        ],
        "suffix": " aS",
        "pump": [
          "Show help"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " h",
        "pump": [
          "--help",
          "Show help"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "set[A-Z].*:$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "et",
        "pump": [
          "setA"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\{\\s*\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}\t{",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "sizes=(\"(?:[^\"]+)\"|'(?:[^']+)'|(?:[^ >]+))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "= 'as\"asiz",
        "pump": [
          "sizes=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\-0-9]+)[\\s]*([a-z]*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a-\t$",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*/gen_[^/]*\\.py$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "en",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^name (\\S+) (\\S+)",
    "inputs": [
      {
        "prefix": [
          "name a"
        ],
        "suffix": "\t",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n.infoblock\\n(.+\\n).infoblock",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nia\n",
        "pump": [
          "\nainfoblock\na"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+,",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\\\\"\\$]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "vd([a-z]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d$v",
        "pump": [
          "vda"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\t*@",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "\n@\n",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\.([a-z0-9]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "wet paint.*\\(file: aFile, line: 5\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e,we",
        "pump": [
          "wet paint"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\#!.*perl",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ep",
        "pump": [
          "#!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "MEDLINE=(.+?);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "IM",
        "pump": [
          "MEDLINE=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%\\((\\S+)\\)s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(",
        "pump": [
          "%(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*\\s.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t\\r\\n\\f]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<3\\>([^\\n]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "><3\n<3",
        "pump": [
          "<3>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I have the server address (.+) and the query port (.+)$",
    "inputs": [
      {
        "prefix": [
          "I have the server address a"
        ],
        "suffix": "a",
        "pump": [
          " and the query port a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "!banner (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "!banner "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{([\\w\\\\]+)\\:([^\\:\\}]+)(?:\\:([^\\}]+))?\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}a{",
        "pump": [
          "{a:a:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ACCOUNT_EMAIL='(.*)'\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "EMAIa",
        "pump": [
          "ACCOUNT_EMAIL='"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^#\\s?[#*=-]{4,}.*?[#*=-]{4,}$",
    "inputs": [
      {
        "prefix": [
          "#\t####",
          "a"
        ],
        "suffix": "*a#",
        "pump": [
          "a",
          "####"
        ]
      },
      {
        "prefix": [
          "#\t#",
          "a"
        ],
        "suffix": "#\t",
        "pump": [
          "a",
          "#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<svg [^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<",
        "pump": [
          "<svg "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9a-zA-Z\\-\\.\\$\\/\\+% ]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/(.*?)/(objects/info/http-alternates)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aa",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "background: url\\('(.*)'\\).*;",
    "inputs": [
      {
        "prefix": [
          "background: url('a"
        ],
        "suffix": "ou",
        "pump": [
          "')"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "r",
        "pump": [
          "background: url('",
          "')"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{([^/]+?)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}a",
        "pump": [
          "{a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "pants\\(['\"]([^)]+)['\"]\\)(#.*)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "pants(\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^DECLARE_PEM_rw_cb\\s*\\(\\s*(\\w*)\\s*,",
    "inputs": [
      {
        "prefix": [
          "DECLARE_PEM_rw_cb\t(\t"
        ],
        "suffix": "M",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "src (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "src a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^client (\\d+):\\s*\\W*Virtual Raw MIDI (\\d+)-(\\d+)",
    "inputs": [
      {
        "prefix": [
          "client 0:\t"
        ],
        "suffix": "0:",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[_|\\s]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\r\\n]+(\\r|\\n)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\n\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ": \".*\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a",
        "pump": [
          ": \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@@PLUGINFILE@@(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@@PLUGINFILE@@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*\\)).*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ")"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w)(\\w*)(\\W*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*int_(.*).py$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tpa",
        "pump": [
          "int_"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "t",
        "pump": [
          "a",
          "int_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(?:>\\s*)?(.*)$",
    "inputs": [
      {
        "prefix": [
          ">\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\.zip$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ipa",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Default Library Path[^:]*:\\s*(\\S*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ib\tDefault L",
        "pump": [
          "Default Library Path"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d*)\\.commandLog$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "dLo",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "rotate\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "or",
        "pump": [
          "rotate("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<dd>.*?)<dt>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "dt",
        "pump": [
          "<dd>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<script[\\s\\S]*?>[\\s\\S]*?<\\/script>",
    "inputs": [
      {
        "prefix": [
          "<scripta"
        ],
        "suffix": "sc",
        "pump": [
          ">"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "t</scr",
        "pump": [
          "<script",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "rgb\\(50\\.19.*?%,0\\.0%,100.0%\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0r",
        "pump": [
          "rgb(50.19"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<Location_X>(.*)<\\/Location_X>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ca",
        "pump": [
          "<Location_X>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+([\\w.-]+)\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\e\\[\\d+m(.*)\\e\\[0m",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\u001b[",
        "pump": [
          "\u001b[0m"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^_]+)_([^_]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a__",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([+-]?\\d+)\\/(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0/+",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+) sites out of (\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\d+)\\s+(.*)[\\r\\n]+$",
    "inputs": [
      {
        "prefix": [
          "0\t",
          "a"
        ],
        "suffix": "0",
        "pump": [
          "a",
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><S>[Tt]r\\x{ed}<\\/S> (?:<P[^>]*>[^<]+<\\/P>)<\\/E> (?:<[DS][^>]*>[Aa]<\\/[DS]>) (?:<N[^>]*pl=\"n\" gnt=\"n\"[^>]*>[^<]+<\\/N>))",
    "inputs": [
      {
        "prefix": [
          "<Ea><S>Trí</S> <Pa>a</P></E> <Da>a</D> <Na"
        ],
        "suffix": "=\"",
        "pump": [
          "pl=\"n\" gnt=\"n\""
        ]
      },
      {
        "prefix": [
          "a",
          "a><S>Trí</S> <Pa>a</P></E> <Da>a</D> <Na"
        ],
        "suffix": "a<a<pl=\"",
        "pump": [
          "<E",
          "pl=\"n\" gnt=\"n\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<img.*src\\=(\\'|\")(.*?)(\\'|\").*?\\>",
    "inputs": [
      {
        "prefix": [
          "<imga",
          "a"
        ],
        "suffix": "i",
        "pump": [
          "src=\"",
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "i",
        "pump": [
          "<img",
          "src=\"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Failed to create.*Explanation",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "Failed to create"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Read ([\\.\\d]+)(\\w+)\\s+Written\\s+([\\.\\d]+)(\\w+).*\\s+transferred\\s+([\\.\\d]+)(\\w+)\\s+\\(([\\.\\d]+)(\\w+)",
    "inputs": [
      {
        "prefix": [
          "Read .a\tWritten\t.a",
          "a"
        ],
        "suffix": "(",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(https?:\\/\\/\\S+)(.*)",
    "inputs": [
      {
        "prefix": [
          "https://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "https://a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[INFO][^\\w]+([\\w.\\-]+):([\\w.\\-]+):jar:([\\w.\\-]+):([\\w.\\-]+)",
    "inputs": [
      {
        "prefix": [
          "[INFO]$"
        ],
        "suffix": "ar:",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a[INFO]$"
        ],
        "suffix": "$[I:a:j",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*@codestart\\s*([\\w-]*)\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "\t@codestart\t",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "url\\(\\s*('.+?'|\".+?\"|[^)]+)\\s*\\)",
    "inputs": [
      {
        "prefix": [
          "url(\t",
          "a"
        ],
        "suffix": "u",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "aurl(\t",
          "a"
        ],
        "suffix": "l(",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[?&]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "&a",
        "pump": [
          "&"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[([a-zA-Z]+)\\]: # \\(([^)]{0,})\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[a]: # (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\n]+?)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "create\\s+table\\s+`?(\\w+)`?\\s*\\((.*)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea\tcre",
        "pump": [
          "create\ttable\ta("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<\\!--\\s*build:(\\w+)\\s+([\\w\\$\\-\\./]*)\\s*-->(.*?)<\\!--\\s*endbuild\\s-->)",
    "inputs": [
      {
        "prefix": [
          "<!--\tbuild:a\t"
        ],
        "suffix": "uil",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a<!--\tbuild:a\t"
        ],
        "suffix": "endbuild",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div class=\"bluetitle\">You searched for (.*)</div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\"",
        "pump": [
          "<div class=\"bluetitle\">You searched for "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(\\((\\+|\\-)?(\\.?\\d+(\\.\\d+)?)\\))?..(\\d+)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": ".0.",
        "pump": [
          "aa0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": ".0a0",
        "pump": [
          "0",
          "aa0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "SeaMonkey[\\/ \\(]([^ ;\\)]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aMon SeaMonk",
        "pump": [
          "SeaMonkey a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "a statement with no error handler failed:.*near \\\"-\\\": syntax error",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er ",
        "pump": [
          "a statement with no error handler failed:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)(\\.c|\\.C)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(http\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tah\th",
        "pump": [
          "httpa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "lib\\/(.*)\\.rb",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ila",
        "pump": [
          "lib/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\@-_a-z0-9\\.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Buffer size .* exceeds threshold",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "size",
        "pump": [
          "Buffer size "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<script data-inline=\"yes-please\" src=\"([^\"]+)\".*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<script data-inline=\"yes-please\" src=\"a\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+?)\\[(.+?)\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "[",
        "pump": [
          "[a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "a",
          "[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^> ]+)::__set_state\\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^@require *([^;\\n]+);",
    "inputs": [
      {
        "prefix": [
          "@require "
        ],
        "suffix": "@;a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Multiple executables were found .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Multiple executables were found "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+\\%)\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t0\t0\t0\t0%\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)\\* (.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "* "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "org.acme.test.TestParticipant#P5678.*READ.*org.acme.test.TestAsset#A1234",
    "inputs": [
      {
        "prefix": [
          "orgaacmeatestaTestParticipant#P5678a"
        ],
        "suffix": "e",
        "pump": [
          "READ"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^L\\S+\\s+\\S\\s+([^#@]+).+$",
    "inputs": [
      {
        "prefix": [
          "La\ta\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Za-z0-9_\\.-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "   ([a-zA-Z0-9\\\\-]{36}) - ([^\\n]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \n   aaaaaaaaaaaaaaaaaaaaaa",
        "pump": [
          "   aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\+?\\d[\\d ]+\\d",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " 0+0",
        "pump": [
          "+0 "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Three (.*) mice ran (.*)",
    "inputs": [
      {
        "prefix": [
          "Three a"
        ],
        "suffix": "a",
        "pump": [
          " mice ran "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Three ",
          " mice ran "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "PERFORMER \"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "EPE",
        "pump": [
          "PERFORMER \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\]\\([^ )]*\\)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]a ",
        "pump": [
          "]("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]*\\{",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(password)=(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "password=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.* android (\\d+)\\.(\\d+).*$",
    "inputs": [
      {
        "prefix": [
          "a android 0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "kafka.*host",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aho",
        "pump": [
          "kafka"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z].*[A-Z])|([A-Z].*[a-z])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$+{[\\w\\.:-]+}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:_+|-+)([a-z]|[0-9])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[~!@\\$%\\^&\\*\\(\\)_\\+=,\\.\\/';:\"\\?><\\[\\]\\\\\\{\\}\\|`#]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+MODE\\:\\s+\\+[oi]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "E:",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)_prompt",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pt_p",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "data.*Buffer",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "uff",
        "pump": [
          "data"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Volume status for vid = (\\d+) named (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " v\tVolume status for ",
        "pump": [
          "Volume status for vid = 0 named a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+log-adjacency-changes(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*orders (.+) \\$(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "r",
        "pump": [
          "orders a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "d ",
        "pump": [
          "a",
          "orders a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "</?[a-zA-z]+[^>]*/?>?",
    "inputs": [
      {
        "prefix": [
          "</a"
        ],
        "suffix": "</>>",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "<AA"
        ],
        "suffix": ">\u0000",
        "pump": [
          "aA"
        ]
      },
      {
        "prefix": [
          "a</a"
        ],
        "suffix": "a</><",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "<Aa"
        ],
        "suffix": ">\u0000",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(\\((.*)\\)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")()",
        "pump": [
          "(("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "usage: sv .* command service",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eu",
        "pump": [
          "usage: sv "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\w+\\s*=\\s*%((\\w+).*)",
    "inputs": [
      {
        "prefix": [
          "a\t=\t%a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@member (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@member "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!--.*-->\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-<",
        "pump": [
          "<!--"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(iPad|iPhone|iPod).* os 9_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ni",
        "pump": [
          "iPod"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n\\n\\n+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\n",
        "pump": [
          "\n\n\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^0-9]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$\\[.*?\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]$",
        "pump": [
          "$["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*::)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "::"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\((.+)\\)(.*)$",
    "inputs": [
      {
        "prefix": [
          "(a"
        ],
        "suffix": "a",
        "pump": [
          ")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*) \\(([0-9]+)\\)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ") (",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "file format: (\\S*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e \tfile ",
        "pump": [
          "file format: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*against\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ai",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@([\\w]+)[ ]*=[ ]*(.*)",
    "inputs": [
      {
        "prefix": [
          "@a = "
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a@a = "
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w]+(?:\\'(?:d|ll|m|re|s|t|ve))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\+?\\d+)[wW]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "+0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([a-z0-9]+)(.*?)(\\/?)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\s*\\((.+)\\)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")\t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ")\t",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\d+)/0*(\\d+)/0*(\\d+)-0*(\\d+):0*(\\d+)",
    "inputs": [
      {
        "prefix": [
          "0/0",
          "0/0",
          "0-0",
          "0:0"
        ],
        "suffix": "01::",
        "pump": [
          "0",
          "0",
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "IFRAME_TRANSPORT_SIGNAL\\(([^,]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "AL,IFRAME_TRANSPORT_SIGNAL(",
        "pump": [
          "IFRAME_TRANSPORT_SIGNAL(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[w]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "w"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "== 0\\.2\\.0\\s+\\* Added test2-1 \\(.*?\\)\\n\\* Added test2 \\(.*?\\)\\n\\n==",
    "inputs": [
      {
        "prefix": [
          "== 0.2.0\t* Added test2-1 (a"
        ],
        "suffix": ".)\n* Added",
        "pump": [
          ")\n* Added test2 ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "I click \"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "I click \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "sample_jar.*\\.rb$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "sample_jar"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^;]*)[;]\\r?\\n?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+)=\"?(.+?)\"?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)\\s+:(\\S+):\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0..",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\${_param:(.*?)}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*([A-Za-z][A-Za-z0-9_]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[-.()]*\\+?[0-9\\-.()]+$",
    "inputs": [
      {
        "prefix": [
          "("
        ],
        "suffix": "(++",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\n.*return '(.*)'.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n",
          "return '",
          "'"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\n",
          "return '",
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^=]*?)=?([^=]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "==",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "D.+;\\d+;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "Da"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<svg[^>]*\\swidth=\")([\\d\\.]+)([a-z]*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s\twi",
        "pump": [
          "<svg"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Status: (\\d+) .*?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Status: 0 "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "options\\[(.*?)\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "options["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^#\\s+(?:[T]?BLAST[NPX])\\s*.+$",
    "inputs": [
      {
        "prefix": [
          "#\tTBLASTN\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "jar .*storm.*.jar",
    "inputs": [
      {
        "prefix": [
          "jar a"
        ],
        "suffix": "t",
        "pump": [
          "storm"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "tor",
        "pump": [
          "jar ",
          "storm"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "dl\\(.*\\);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "dl("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\]\\: (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "]: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\[\\%)!(.+?)(?:\\%\\])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[%!a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_+(\\w)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a_$",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<[A-DF-Z][^>]*>[Cc]homh<\\/[A-DF-Z]> <E[^>]*><A pl=\"n\" gnt=\"n\" h=\"y\">[^<]+<\\/A><\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n\"",
        "pump": [
          "<A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Name.+Album1b",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "um",
        "pump": [
          "Namea"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "c_int_without_limit.*:limit",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "hac_i",
        "pump": [
          "c_int_without_limit"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^?]*)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^enode://(.+)@.+$",
    "inputs": [
      {
        "prefix": [
          "enode://a"
        ],
        "suffix": "a",
        "pump": [
          "@a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*d\\d+\\[?i?\\]?(.+)",
    "inputs": [
      {
        "prefix": [
          "\td0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".* base=(0x\\w+) .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " base=0xa "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " base=0xa "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^scm:git:git@github.com:(.+?)/(.+?)\\.git(?:/.*?)?$",
    "inputs": [
      {
        "prefix": [
          "scm:git:git@githubacom:a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/a",
          ".git/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!--\\s*noptimize\\s*-->.*?<!--\\s*/\\s*noptimize\\s*-->",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t/n",
        "pump": [
          "<!--noptimize-->"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:@@)([^;]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a@;",
        "pump": [
          "@@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((\\\\/)?[^\\\\/]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__uri_for\\((.+?)\\)__}\n                     ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "__uri_for(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Argument 3.*bindActions.*falsy",
    "inputs": [
      {
        "prefix": [
          "Argument 3a"
        ],
        "suffix": " ",
        "pump": [
          "bindActions"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ent",
        "pump": [
          "Argument 3",
          "bindActions"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)anci$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*/imagesSet$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "imag",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *\\\\r\\\\n *",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\r",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*([=!><]+|\\(|\\)|\\sand\\s|\\sor\\s)\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(long|key)\\s*(\\S*)(\\s*short\\s*(\\S)|)(\\s*type\\s*(\\S+)|)",
    "inputs": [
      {
        "prefix": [
          "long\ta"
        ],
        "suffix": "t\t",
        "pump": [
          "shortatypea"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^UNCOMPRESSED PACKAGE SIZE:\\s+(.*) K$",
    "inputs": [
      {
        "prefix": [
          "UNCOMPRESSED PACKAGE SIZE:\t"
        ],
        "suffix": "C",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http://www.ifomis.org/bfo/.*/span#",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "http://wwwaifomisaorg/bfo/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<[^>]+?>|[^\\w -.,]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000a><>",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[/\\\\]([^\\\\/]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Downstream Bonded Channels(.+?)</table>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "abl",
        "pump": [
          "Downstream Bonded Channelsa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Server:\\s*(.*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "Server:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "aServer:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\s*as\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "\tas\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\tas\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "dictionary id:* ?([^;]+)",
    "inputs": [
      {
        "prefix": [
          "dictionary id:"
        ],
        "suffix": ";",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "adictionary id:"
        ],
        "suffix": "c;di",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "CP-COMPUTEENGINE-VMIMAGE-(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "CP-COMPUTEENGINE-VMIMAGE-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "define\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i)ad",
        "pump": [
          "define("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-z%]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_+([^_])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aa",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+\\((\\d+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(0$a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@throws\\s+([^\\s]+)(.*)",
    "inputs": [
      {
        "prefix": [
          "@throws\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a@throws\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "`[^`]*<br>[^`]*`",
    "inputs": [
      {
        "prefix": [
          "`a"
        ],
        "suffix": "``",
        "pump": [
          "<br>"
        ]
      },
      {
        "prefix": [
          "a`a"
        ],
        "suffix": "<br",
        "pump": [
          "<br>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "boundary=\"(.+?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y",
        "pump": [
          "boundary=\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "q\\w+?t",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "qa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"version\" *: *\".*\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er",
        "pump": [
          "\"version\":\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\-\\_]?)([0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[.#\\\\\\/&?]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#a",
        "pump": [
          "#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " (?:\\||>).*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " >"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s_\\-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\s*month",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.[hmc]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(include\\s+.*)",
    "inputs": [
      {
        "prefix": [
          "\tinclude\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([-]?\\d+\\.?\\d*)([K,M,G,T,P,E,Z,Y,k,m,u,n]?)[B]?$",
    "inputs": [
      {
        "prefix": [
          "-0"
        ],
        "suffix": "-0.BB",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_V.+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_Va"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(url|\\@import)\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mp",
        "pump": [
          "url("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Only in.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Only in"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w|-|')+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*.*?\\*\\/[ \\n]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\)]*)\\)\\s*;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*raise \\S+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "is\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-Password .*\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "as",
        "pump": [
          "-Password "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(weibo).*weibo__([\\d.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "weibo"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+, frozen.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ", frozena"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ", frozena"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\r\\n].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Group.*of radio",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "adGro",
        "pump": [
          "Group"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Last Updated On:\\s+(.*)\\n",
    "inputs": [
      {
        "prefix": [
          "Last Updated On:\t"
        ],
        "suffix": "st ",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aLast Updated On:\t"
        ],
        "suffix": "ed ",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?\\[([\\w-]+)([\\d.]+)?]:)(.*)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[a]:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*<(\\w+)[^>]*>",
    "inputs": [
      {
        "prefix": [
          "\t<a"
        ],
        "suffix": "\t>>",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><U>[Nn]\\x{ed}<\\/U> (?:<V[^>]*>[Tt]\\x{e1}(?:i[dm]|imid|thar)?<\\/V>)<\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "U",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z\\-]+)=\"([^\"]*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(\\[\\d+\\]).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[0]"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "[0]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<h2>Staffeln:(.*?)<h2>Feeds",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eda",
        "pump": [
          "<h2>Staffeln:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "try\\s?\\{(.*)\\}\\s?catch",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\tc",
        "pump": [
          "try\t{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "memcached\\s.*-l\\s0.0.0.0",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\tm",
        "pump": [
          "memcached\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^main::(.+)-(?:>|&gt;)([^\\(]+)(.*)",
    "inputs": [
      {
        "prefix": [
          "main::a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "->a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^./../(.+?)/(.+)",
    "inputs": [
      {
        "prefix": [
          "a/aa/a"
        ],
        "suffix": "a",
        "pump": [
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "anti:gagarin@=.*\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i:",
        "pump": [
          "anti:gagarin@="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)[- \\t]*month",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img.+src=\\\"(http.*)\\\"",
    "inputs": [
      {
        "prefix": [
          "<imga"
        ],
        "suffix": "=",
        "pump": [
          "src=\"http"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "m",
        "pump": [
          "<imga",
          "src=\"http"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[\\(\\)](.*?)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "("
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!-- START FOOTER.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<!-- START FOOTER"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*([A-Za-z]{3})\\s*(\\d{4})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "WARN.*No configuration file found",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "at",
        "pump": [
          "WARN"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([:,\\[])\\s*([^{}\\[\\]\"]+?)\\s*([,}\\]])",
    "inputs": [
      {
        "prefix": [
          ",\t",
          "a"
        ],
        "suffix": "[\t[",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a,\t",
          "a"
        ],
        "suffix": "a,],",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(\\{.*?[^\\\\]?\\})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}{",
        "pump": [
          "{"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "}{",
        "pump": [
          "a",
          "{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/Sandcastle_Begin\\s*([\\s\\S]*)\\/\\/Sandcastle_End",
    "inputs": [
      {
        "prefix": [
          "//Sandcastle_Begin\t"
        ],
        "suffix": "e_Be",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a//Sandcastle_Begin\t"
        ],
        "suffix": "E",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[CHAT=([0-9]{1,})\\](.*?)\\[\\/CHAT\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=0[",
        "pump": [
          "[CHAT=0]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(STYLE|STYLES)\\s+\\-\\-\\>\\s*\\n([\\s\\S]*)",
    "inputs": [
      {
        "prefix": [
          "STYLE\t-->\t"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I ask for a value that does not exist named \"(.+)\" that has a default lambda returning \"(.+)\"$",
    "inputs": [
      {
        "prefix": [
          "I ask for a value that does not exist named \"a"
        ],
        "suffix": "mbd",
        "pump": [
          "\" that has a default lambda returning \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Mask:\\s*([^\\s]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Mask:a\tMa",
        "pump": [
          "Mask:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/([^\\/]+?(\\.pl){0})(\\.pl)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p/",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "data:([^;]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "atd;d",
        "pump": [
          "data:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-z].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([_A-Za-z0-9\\.]?[A-Za-z0-9\\-_\\.]+(\\.[A-Za-z0-9\\-_]+)*)?$",
    "inputs": [
      {
        "prefix": [
          "aa"
        ],
        "suffix": "#",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "-\u0000--"
        ],
        "suffix": "\u0000",
        "pump": [
          "0--"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)(wistia.com|wistia.net|wi.st)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "in",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:Options:)(.*?)(?:Common Options)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "on",
        "pump": [
          "Options:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(?:el|la) (.+) \"(.+)\" ",
    "inputs": [
      {
        "prefix": [
          "el a"
        ],
        "suffix": "l",
        "pump": [
          " \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([a-z0-9]+)(.*?)(/?)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$(\\d+)(\\+)?(\\d+)?",
    "inputs": [
      {
        "prefix": [
          "$0"
        ],
        "suffix": "0++",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a$0"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\pL`]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/\\*.*\\*/|\\'(?:\\\\.|[^\\\\\\'])*\\'|\"(?:\\\\.|[^\\\\\"])*\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\a",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*page=(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_(%.*?%)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_%"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "href=\"(\\/store\\/music\\/collection\\/5:search_cluster:4.*?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "re",
        "pump": [
          "href=\"/store/music/collection/5:search_cluster:4"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "automatic analyze of table \"(.+?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "na",
        "pump": [
          "automatic analyze of table \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([\\s\\S]*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^exception occurred during bulk insert.*\\n  cause.*\\n Try.*",
    "inputs": [
      {
        "prefix": [
          "exception occurred during bulk inserta",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n  cause",
          "\n Try"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "wait.*itself",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "wait"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+\\d+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\d+(.+?)\\d+(.*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "0",
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a",
          "0",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "0",
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "0",
          "a",
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$self->{begintesthook}->.*",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "<DbName>(.*?)<\\/DbName>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a</DbN",
        "pump": [
          "<DbName>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<[^>\\s\\/]+\\s+mx-guid=\"[^\"]+\"\\s+([^>]+?)\\/?>",
    "inputs": [
      {
        "prefix": [
          "<a\tmx-guid=\"a\"\t"
        ],
        "suffix": "\t>a\"\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a\tmx-guid=\"a\"\t"
        ],
        "suffix": "-g",
        "pump": [
          "<a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*'([^']+)'\\s+(.*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t'a'\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "['\"](.+)['\"]\\s*:\\s*['\"](.+)['\"],?\\s*$",
    "inputs": [
      {
        "prefix": [
          "\"a"
        ],
        "suffix": "a",
        "pump": [
          "\":\"a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "\t:",
        "pump": [
          "\"a",
          "\":\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\(*(array)?\\(*(.+?)\\)*$",
    "inputs": [
      {
        "prefix": [
          "(",
          "(",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "(",
          "a",
          ")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^>]*-->)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ">",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?\\[[0-9].*?\\]\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0]",
        "pump": [
          "[0"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "0]",
        "pump": [
          "a",
          "[0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"([^\"]+)\"\\s*(.+)",
    "inputs": [
      {
        "prefix": [
          "\"a\"\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a\"a\"\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<[\\s\\S]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "pyconfig\\.[eginst]+\\(['\"][^)]+?['\"], ?(.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "pyconfig.e(\"a"
        ],
        "suffix": "i",
        "pump": [
          "\",a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ".",
        "pump": [
          "pyconfig.e(\"a",
          "\",a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<C\\s*NAME=\"(.*?)\"\\s*REF=\"(.*?)\"\\s*>",
    "inputs": [
      {
        "prefix": [
          "<C\tNAME=\"a"
        ],
        "suffix": "ME=",
        "pump": [
          "\"REF=\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "\tR\"",
        "pump": [
          "<CNAME=\"",
          "\"REF=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*)(.+)",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "at (.+) \\((.+)\\)",
    "inputs": [
      {
        "prefix": [
          "at a"
        ],
        "suffix": "a) a",
        "pump": [
          " (a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "at$ ",
        "pump": [
          "at a",
          " (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "S0T-(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "S0T-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NetSuite::Records::ItemGroup with OPTIONS=(.*) could not be found",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "IO",
        "pump": [
          "NetSuite::Records::ItemGroup with OPTIONS="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n+\\s+",
    "inputs": [
      {
        "prefix": [
          "\n"
        ],
        "suffix": "#",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\n"
        ],
        "suffix": "a",
        "pump": [
          "\n",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'query' => '(.+?)',",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "q",
        "pump": [
          "'query' => 'a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^=]+=[^ \\t]+)[ \\t]+(.*)$",
    "inputs": [
      {
        "prefix": [
          "a=a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\{.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(<br>)*\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "<br>>",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Paste from clipboard.*\\n3 \\* 3\\n=> 9",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "3\n",
        "pump": [
          "Paste from clipboard"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)<--\\s*regex\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\tr",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s{0,}dhx_vault_dis",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "va",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/containers/(.+)/archive",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h",
        "pump": [
          "/containers/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-z0-9\\+\\/=]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "cid.*?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "id",
        "pump": [
          "cid"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)stroke-width:\\s*([a-z0-9.]*|none)(.*)",
    "inputs": [
      {
        "prefix": [
          "astroke-width:\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "astroke-width:\ta"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "hotfix_[0-9]+.[0-9]+.[0-9]+",
    "inputs": [
      {
        "prefix": [
          "hotfix_0",
          "0"
        ],
        "suffix": "ix_0",
        "pump": [
          "a0",
          "a0"
        ]
      },
      {
        "prefix": [
          "ahotfix_0",
          "0"
        ],
        "suffix": "ix_00a",
        "pump": [
          "a0",
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *([\\-+]? *[0-9\\\\.]*(?:e-?[0-9]+)?[ \\*]+|-|)([A-Za-z0-9][A-Za-z0-9_\\-]+) +",
    "inputs": [
      {
        "prefix": [
          " ",
          " "
        ],
        "suffix": " +e-",
        "pump": [
          " ",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "protocolInfo=\\\"[^:]*:[^:]:([^:]*):.*\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\":\":protocolInf",
        "pump": [
          "protocolInfo=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((?:\\w|-)*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "name:\\\"AppSecret\\\",value:\\\"(.*)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ecr",
        "pump": [
          "name:\"AppSecret\",value:\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((?:\\d+\\.){3}\\d+)\\:\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\s*\\:\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@@ -(.*) \\+(.*) @@?(.*)",
    "inputs": [
      {
        "prefix": [
          "@@ -a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          " +",
          " @a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@@ -",
          " +",
          " @a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "line-height: (.+?);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ig",
        "pump": [
          "line-height: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "//\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a//\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "a statement with no error handler failed:.*near \\\"101\\\": syntax error",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "x",
        "pump": [
          "a statement with no error handler failed:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-- add_context_index_parameters (.+)\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ntex",
        "pump": [
          "-- add_context_index_parameters a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s\\n\\r]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\[([0-9]+)..([0-9]+)\\](.*)",
    "inputs": [
      {
        "prefix": [
          "a[0"
        ],
        "suffix": "a",
        "pump": [
          "aa0"
        ]
      },
      {
        "prefix": [
          "a",
          "a[0"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "aa0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!-- nocache_(.*) '(.*)' -->",
    "inputs": [
      {
        "prefix": [
          "<!-- nocache_a"
        ],
        "suffix": "<a",
        "pump": [
          " '"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "-",
        "pump": [
          "<!-- nocache_",
          " '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*)(/\\*)(.*)(\\*/)(\\s*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/\t*",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/?modules\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mo",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(.*\\.public).*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ".public"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          ".public"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*tot",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "to\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a[\\s\\S]href=\"(.*?)\"[\\s\\S]*?>(.*?)<\\/a>",
    "inputs": [
      {
        "prefix": [
          "<aahref=\"a",
          "a"
        ],
        "suffix": "ah",
        "pump": [
          "\"",
          ">"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "r",
        "pump": [
          "<aahref=\"",
          "\"",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "//.*?\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "lib\\/.*\\.rb",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ila",
        "pump": [
          "lib/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I should\\s*((?:not)?)\\s+see page title as \"(.*?)\"$",
    "inputs": [
      {
        "prefix": [
          "I should\t"
        ],
        "suffix": "ee",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*charset\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "\tcharset\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*-solid$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "input file .* is missing",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ngi ",
        "pump": [
          "input file "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+)__(\\w+)___(\\w+)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "#",
        "pump": [
          "__a",
          "___a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*#?\\s*(local|host)\\s*(replication)",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "o",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-_.a-zA-Z0-9]\\\\: Attribute '.*' expected .*, got .*",
    "inputs": [
      {
        "prefix": [
          "a\\: Attribute 'a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "' expected ",
          ", got "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\+\\+\\s*;{0,1}\\s*$",
    "inputs": [
      {
        "prefix": [
          "++\t"
        ],
        "suffix": "+\t+",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a++\t"
        ],
        "suffix": "+\ta+",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "++\t"
        ],
        "suffix": "+\t+",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Mobile(\\/.*)? Safari",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f",
        "pump": [
          "Mobile/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%{(.*?)(KEY|URI|BLOCK|ORDER|ACTION|NOTE|ID)}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<img\\s.*?\\>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "im<",
        "pump": [
          "<img\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "header\\.(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "header.a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<input name=\"SAMLResponse\" value=\"(.*?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "al<",
        "pump": [
          "<input name=\"SAMLResponse\" value=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((var|let|const) .+\\s*=\\s*)?goog\\.require\\(.+\\);?\\s*$",
    "inputs": [
      {
        "prefix": [
          "var a"
        ],
        "suffix": "og",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/player/jwp/clients/(?:[^ ]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p ",
        "pump": [
          "/player/jwp/clients/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><S>[Gg]an<\\/S> (?:<N[^>]*>[BbCcGgMmPp][^Hh'][^<]*<\\/N>)<\\/E> <R>(?:amach|amh\\x{e1}in)<\\/R>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<R",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\$\\{[^\\}]+\\})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "${",
        "pump": [
          "${a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(#(?:selector|keyPath)\\()([^)]+?(?:[(].*?[)])?)(\\))",
    "inputs": [
      {
        "prefix": [
          "#selector(a"
        ],
        "suffix": "#",
        "pump": [
          "("
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "r",
        "pump": [
          "#selector(a",
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\=(\\S+)\\;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "=a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a;\ta",
        "pump": [
          "a",
          "=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)?##(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "##"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "TextMate\\.system\\(.*open file://\\./tmp/screenshot.html",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "TextMate.system("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\S+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "this is the widget.*this is the partial.*this is the widget again",
    "inputs": [
      {
        "prefix": [
          "this is the widgeta"
        ],
        "suffix": "a",
        "pump": [
          "this is the partial"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(?:(GET|POST|PUT|DELETE)\\s+)?(.+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "GET\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@import (?:url\\()?['\"].*shared\\/([^\\/]+)\\/([^'\"\\s]+)['\"](?:\\))?.*;$",
    "inputs": [
      {
        "prefix": [
          "@import url(\"a"
        ],
        "suffix": "ed/\"share",
        "pump": [
          "shared/a/a"
        ]
      },
      {
        "prefix": [
          "@import url\"shared/\u0000/\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      },
      {
        "prefix": [
          "@import url\"shared/\u0000/\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w_]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(@return[\\s\\S]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@returna"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Found (.+?) (error|warning)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nFo",
        "pump": [
          "Found a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<group id=\"\\d+\" status=\"active\">\\s*<name>\\s*([^<]+)\\s*</nam",
    "inputs": [
      {
        "prefix": [
          "<group id=\"0\" status=\"active\">\t<name>\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a<group id=\"0\" status=\"active\">\t<name>\t",
          "a"
        ],
        "suffix": "us=",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "add_date=\"(.*?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d_",
        "pump": [
          "add_date=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(<\\S+)\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t<a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\].*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z.]([a-zA-Z_][\\w.]*)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".$",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zA-Z0-9_.+-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(onkeypress|onclick)=\"(.*?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "es",
        "pump": [
          "onclick=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^:]+)\\s*:\\s*(.+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\-((\\s+)(.+?))?\\s*$",
    "inputs": [
      {
        "prefix": [
          "-\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\+[^@]*(@?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "@a",
        "pump": [
          "+"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":[^/]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\t(\\w.*):\\s+(\\w.*)$",
    "inputs": [
      {
        "prefix": [
          "\taa"
        ],
        "suffix": "a",
        "pump": [
          ":\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "index definition (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "index definition "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[,&#\\.\\w-]([\\w-]|(\\\\.))*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$\\",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[SHD]\\d+[a-z0-9]+$",
    "inputs": [
      {
        "prefix": [
          "D0"
        ],
        "suffix": "Da",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+.*)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<([^\\>]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a>",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+) pages",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+\\*|\\d*\\.\\d+)(e[+-]?[0-9]+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e+",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "function (.{1,})\\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "function a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\S+=\\S+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "=a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "a",
          "=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\S*)\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(gyp info spawn args).*(FOO=bar)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aw",
        "pump": [
          "gyp info spawn args"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "://.*:.*@",
    "inputs": [
      {
        "prefix": [
          "://a"
        ],
        "suffix": ":",
        "pump": [
          ":"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "://",
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@import\\s+['\"](.+?\\.scss)['\"]\\s*;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "@import\t\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9%$£# ]*){0,1}(\\[[a-zA-Z0-9]*\\]){0,1}(->[a-zA-Z0-9_]*){0,1}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a$>",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^if\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "if\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S*) team (clear|empty)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z\\-][\\w\\.\\/\\-]*::?)([^\\s\\[]+)(\\[.*?\\])?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a]\t]a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^info:oclcnum\\/(ocm0*|ocn0*|on0*|\\(OCoLC\\)0*|ocl70*|0+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "info:oclcnum/ocm0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *\\. *",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__version__.*?=.*?([0-9\\.]+)",
    "inputs": [
      {
        "prefix": [
          "__version__a",
          "a"
        ],
        "suffix": "e",
        "pump": [
          "=",
          "."
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "er_",
        "pump": [
          "__version__",
          "=",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*\\{\\s*)|(\\s*\\}\\s*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?) at .*? (?:line|chunk) \\d+.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a line 0"
        ],
        "suffix": "a",
        "pump": [
          " at ",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a line 0"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " at ",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^=]+)(?:=([\\s\\S]*))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[-+]?[0-9]*\\.?([0-9]+([eE][-+]?[0-9]+)?)?$",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\$(\\w+)\\.?(\\w+)?",
    "inputs": [
      {
        "prefix": [
          "$a"
        ],
        "suffix": "a..",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Missing required parameter in input: \\\"imageIds\\\".*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Missing required parameter in input: \"imageIds\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "Missing required parameter in input: \"imageIds\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\s]*?)\\s+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[attach\\]href=\\\"(.*?)\\\" length=\\\"(.*?)\\\" type=\\\"(.*?)\\\"(?: title=\\\"(.*?)\\\")?",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "[^<\\{]*([<\\{])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<HavenSearch-QueryText-Placeholder>(.*?)</HavenSearch-QueryText-Placeholder>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ext</HavenSearch-QueryText-Pl",
        "pump": [
          "<HavenSearch-QueryText-Placeholder>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([a-z0-9]+)?(?:([\\.\\#]+[\\w\\-\\.#]+)?)",
    "inputs": [
      {
        "prefix": [
          "a#"
        ],
        "suffix": "a#0",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w\\._]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*[^#:])@",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/*.?-time",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "im",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\\\\\\\\\\\\\\\)?\\([^)]+\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\a",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "usage:.+?Z1",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "1a",
        "pump": [
          "usage:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "&thumbnail_url=(.+?)&",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "&thumbnail_url=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\([^)]+\\)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")(",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ruby -Itest .* -- -v",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-It",
        "pump": [
          "ruby -Itest "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*#\\+begin_(\\w+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t#+begin_a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ ]*\n[ \t]+[*][ ]?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)_(image|file)_path$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aga",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Dominio:(.*)\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "Dominio:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "smoothie-(.*).hex",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "smoothie-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/v2/tlds/.+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/v2/tlds/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *\\+ *- *",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a+",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http:\\/\\/.*?\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h",
        "pump": [
          "http://"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n\\[ From: .*? \\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]a",
        "pump": [
          "\n[ From: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#{(.+)}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": ", including .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ", including "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\+|\\-)\\s*([0-9]+)(y|mo|d|h|mi|s)[a-z]*(.*)",
    "inputs": [
      {
        "prefix": [
          "+\t0ya"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a+\t0ya"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ (.*?) (?: /(.*) )? $",
    "inputs": [
      {
        "prefix": [
          " a"
        ],
        "suffix": "/",
        "pump": [
          "  /"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*does not exist.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "does not exist"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "does not exist"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<html.*?>.*?<body.*?>",
    "inputs": [
      {
        "prefix": [
          "<htmla",
          "a"
        ],
        "suffix": "ht",
        "pump": [
          ">",
          "<body"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "m",
        "pump": [
          "<html",
          ">",
          "<body"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*):[0-9]+:[0-9]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*use\\s+([\\w:]+)\\s*.*\\s*;\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tuse\ta\t",
          "a"
        ],
        "suffix": "e\t",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"(\\\\\"|[^\"])*",
    "inputs": [
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "\u0000",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\""
        ]
      },
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "\u0000",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/rss/(.*)?/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/rss/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Content-Type:(\\V*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ypCo\u000bConte",
        "pump": [
          "Content-Type:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".other-key=[^\\n]*<String: \"ohai\">",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "r",
        "pump": [
          "aother-key="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "rh-amazon-rhui-client-beta-\\d.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "rh-amazon-rhui-client-beta-0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^from (\\S+) \\(\\S+\\@\\S+ \\[127\\.0\\.0\\.1\\]\\) ",
    "inputs": [
      {
        "prefix": [
          "from a",
          "a"
        ],
        "suffix": "0.",
        "pump": [
          " (a",
          "@a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[^:]*:\\s*[^:]*:\\s*(.*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "a:\t",
          "a:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ";*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.+:\\s+.*\\((.+)(?:/\\d+ cpus?)?\\)$",
    "inputs": [
      {
        "prefix": [
          "a:\t",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a",
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\.(.+)\\(.*\\)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ")a",
        "pump": [
          ".a",
          "("
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "a",
          ".a",
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "{#.+}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "FIND(.*?)HAVING",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "I",
        "pump": [
          "FIND"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__version__\\s*=\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "__version__\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a__version__\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$\\{?[a-zA-Z_][a-zA-Z0-9_]*(\\([^)]*\\))?(\\.[a-zA-Z0-9_]+(\\([^)]*\\))?)*\\}?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "().",
        "pump": [
          "${a("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\s到\\s\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "到",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+)\\s*([\\+\\|])\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "a\t+\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)[\\w-]+\\.(yml|yaml|json)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "so.j",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^total_duration=\\d+.\\d+$",
    "inputs": [
      {
        "prefix": [
          "total_duration=0"
        ],
        "suffix": "n=",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "test_public/assets/\\.sprockets-manifest-.*\\.json$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "es.t",
        "pump": [
          "test_public/assets/.sprockets-manifest-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ">Account balance:</span> (.*?)<",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "an",
        "pump": [
          ">Account balance:</span> "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^-\\=]+.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%\\{.*\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%",
        "pump": [
          "%{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "this.items = (.+?);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "em",
        "pump": [
          "thisaitems = a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ERROR\\s+.* - fact \"non-existing-fact\" does not exist",
    "inputs": [
      {
        "prefix": [
          "ERROR\t"
        ],
        "suffix": "in",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aERROR\t"
        ],
        "suffix": "-ex",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I see element \"(.*?)\" \"(.*?)\" times$",
    "inputs": [
      {
        "prefix": [
          "I see element \"a"
        ],
        "suffix": "I ",
        "pump": [
          "\" \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/\\/ <reference path\\=\\\"(.*?)\\\" \\/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er",
        "pump": [
          "/// <reference path=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\000(.+?)\\000",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000a",
        "pump": [
          "\u0000a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^ ]+ [^ ]+ HTTP/1\\.[0-9]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "T",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\.html",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\*\\*\\* Detached from script.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "*** Detached from script"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)([+-].*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "+"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\`(.+?)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "`a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/_?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"backtrace\\\":\\[[^\\]]+\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "trac",
        "pump": [
          "\"backtrace\":[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\:]+)Model$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "M",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ";+\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "id=(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "id="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "css\\-([a-zA-Z0-9\\_\\-]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$css",
        "pump": [
          "css-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*a=a%20b.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a=a%20b"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a=a%20b"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "cookbooks.*already exists",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "kbo",
        "pump": [
          "cookbooks"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n.*?MARKDOWNDETAILSEND.*?\\n",
    "inputs": [
      {
        "prefix": [
          "\na"
        ],
        "suffix": "M",
        "pump": [
          "MARKDOWNDETAILSEND"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "EM",
        "pump": [
          "\n",
          "MARKDOWNDETAILSEND"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)\\[(.*)\\]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "[",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)_without_static_rc$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "_wi",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\[(\\d+)\\]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0[",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\@charset[^;]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h@;@c",
        "pump": [
          "@charseta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*requirejs.config\\([^;]*;\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":(([\\w\\d]+)\\[(.*?)\\])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a[:",
        "pump": [
          ":a["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((https?|ftp|gopher|telnet|file|notes|ms-help):((//)|(\\\\))+[\\w\\d:#@%/;$()~_?\\+-=\\\\.&]*)",
    "inputs": [
      {
        "prefix": [
          "https://"
        ],
        "suffix": "\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<serviceList>(.*)<\\/serviceList>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "vi",
        "pump": [
          "<serviceList>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\S+ \\S+ \\S+$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          " a",
          " a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": " \ta   ",
        "pump": [
          "a",
          " a",
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+ \\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "a=rtcp-fb:.*\\ x-message\\ .*\\r\\n",
    "inputs": [
      {
        "prefix": [
          "a=rtcp-fb:a"
        ],
        "suffix": "-\r",
        "pump": [
          " x-message "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "p ",
        "pump": [
          "a=rtcp-fb:",
          " x-message "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<Action .* title='Foo'\\/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "io",
        "pump": [
          "<Action "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*blob.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "blob"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "blob"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "powershell -executionpolicy bypass -file \\\"%TEMP%(.{1})packer-elevated-shell.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "powershell -executionpolicy bypass -file \"%TEMP%apacker-elevated-shell"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "SubTypeAspects::.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "SubTypeAspects::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "addition(.*)\\.rb",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "io",
        "pump": [
          "addition"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+INSTEAD\\s+OF\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "T",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+Action\\:\\s+\\S+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ion\tAction",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "PREFIX\\s*(\\w*):\\s*<([^>]*)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t>PRE",
        "pump": [
          "PREFIXa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([\\w-:]+)(?:\\?(.+?))?(?:\\=(.*))?$",
    "inputs": [
      {
        "prefix": [
          "a?a"
        ],
        "suffix": "a",
        "pump": [
          "="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__version__\\s*=\\s*'(.*)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ion_",
        "pump": [
          "__version__='"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([[:digit:]]+)[[:space:]]*([[:alpha:]]+)$",
    "inputs": [
      {
        "prefix": [
          ":",
          "a"
        ],
        "suffix": "d:hd",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          ":t"
        ],
        "suffix": "",
        "pump": [
          "it"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Warning.*Malicious Host.*not defined in the observable dictionary",
    "inputs": [
      {
        "prefix": [
          "Warninga"
        ],
        "suffix": "o",
        "pump": [
          "Malicious Host"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "gulp\\.watch\\(.*\\*\\.js'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s'*.",
        "pump": [
          "gulp.watch("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "CREATE +TABLE .*\\(.*\\)\\s+ORGANIZATION INDEX INITRANS 4 COMPRESS 1 TABLESPACE bogus",
    "inputs": [
      {
        "prefix": [
          "CREATE TABLE a"
        ],
        "suffix": "ION",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^ ]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\s*=\\s*(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=a\ta",
        "pump": [
          "=a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "=\ta\ta",
        "pump": [
          "a",
          "=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span class=\"comment\"><font color=\".*\">(.*)</font></p><p><font size=\"1\">",
    "inputs": [
      {
        "prefix": [
          "<span class=\"comment\"><font color=\"a"
        ],
        "suffix": "<",
        "pump": [
          "\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s\\-\\(\\)\\.\\.+'\\/<>&=~\\!]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http\\:\\/\\/mp3.zing.vn\\/download\\/song\\/\\S+\\/\\w+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\tvn/downl",
        "pump": [
          "http://mp3azingavn/download/song/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^#exec\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "#exec\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.dtr",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "dt",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "templateRootPaths\\.0 = EXT:mask_example_export/(.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "templateRootPaths.0 = EXT:mask_example_export/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "H3C Comware Platform Software, Software Version (.+) H3C (.+)Copyright",
    "inputs": [
      {
        "prefix": [
          "H3C Comware Platform Software, Software Version a"
        ],
        "suffix": "s",
        "pump": [
          " H3C a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([+|: \\t-]*?-[+|: \\t-]*?)[ \\t]*\\n",
    "inputs": [
      {
        "prefix": [
          "\t",
          "\t"
        ],
        "suffix": "\t\n+",
        "pump": [
          "-",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(\"archives\":.*?]),\"page\".*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\"archives\":",
          "],\"page\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\"archives\":",
          "],\"page\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ALTER TABLE (.*) MODIFY (.*?) (.*) AUTO_INCREMENT",
    "inputs": [
      {
        "prefix": [
          "ALTER TABLE a",
          "a"
        ],
        "suffix": "CRE",
        "pump": [
          " MODIFY ",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-#=]+>+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#a",
        "pump": [
          "#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\(|\\)|[^\\(\\)]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]+)_ ([a-z]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a_a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)_id",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ida",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "git-cpan-module:\\ (.*?) \\s+ git-cpan-version: \\s+ (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \t \t git-cpan-ver",
        "pump": [
          "git-cpan-module: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\$\\\\](\\$.*?[^\\\\]\\$)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\\",
        "pump": [
          "a$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?) \\((\\d+)\\): (.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " (0): a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+?::",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0Ea",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^/([-a-zA-Z0-9]+)\\.?(v([0-9]*))?(.*)$",
    "inputs": [
      {
        "prefix": [
          "/a.v0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\W+dvd\\W*rip\\W*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "dvd",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)([ABC])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Aa",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NTLM (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "NTLM "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "rdoc(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "rdoc"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+(の).+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "のa"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "のa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(.+?)( .*?)>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-.*)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:ra = )([-]?[0-9]*[.]?[0-9]*)",
    "inputs": [
      {
        "prefix": [
          "ra = -0"
        ],
        "suffix": " ..",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "ara = -0"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Version\\/(\\d+)[.\\d]+\\s+Safari",
    "inputs": [
      {
        "prefix": [
          "Version/0"
        ],
        "suffix": "0.\t",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "aVersion/0"
        ],
        "suffix": "s",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[><=]+[^,]*,",
    "inputs": [
      {
        "prefix": [
          "<"
        ],
        "suffix": "<,a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "<"
        ],
        "suffix": "<,a",
        "pump": [
          "<",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[_\\s]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "IP\\.bind_layer\\(.*Eth",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Pa",
        "pump": [
          "IP.bind_layer("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w/\\-\\s]+:\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)([^\\d\\.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([[:alnum:]]+)",
    "inputs": [
      {
        "prefix": [
          ":m"
        ],
        "suffix": "\u0000",
        "pump": [
          ":m"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          ":m"
        ],
        "suffix": "\u0000",
        "pump": [
          ":m"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\\verb.(.*?).\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er",
        "pump": [
          "\\verba"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "line.*\\[32m777",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "line"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/?cartodb[\\-\\._]?([\\w\\-\\._]*)\\.js\\??",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s?c",
        "pump": [
          "/cartodba"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)sleeps$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ee",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*react-dates.*\\.css",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-d",
        "pump": [
          "react-dates"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "t",
        "pump": [
          "a",
          "react-dates"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<body[^>]*>(.*?)</body>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ba><bod",
        "pump": [
          "<body"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#define\\s+\\w+\\s+\"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d#defin",
        "pump": [
          "#define\ta\t\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "hash_key.*specified",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eci",
        "pump": [
          "hash_key"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+\\S+\\s(?:CS|RF)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "CS\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\n]+)\\n\\nDetailed",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\s+angle",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\/_]+)_offline\\.txt$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tx_",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "《.*?》",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "《",
        "pump": [
          "《"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<<[-~](@heredelim).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<<-@heredelim"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "href=\"(ruby.*tar.gz)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ub",
        "pump": [
          "href=\"ruby"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Jtds.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Jtds"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "Jtds"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\W\\d]+)[\\W\\d]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\..+?)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+)\\s+(\\S)\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "a\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*structures\\sbegin\\sdiffering\\sat:\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ng\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#<RailsERD::Domain:.*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s#",
        "pump": [
          "#<RailsERD::Domain:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "f\\((.+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "f(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n3 TIME (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n3 TIME a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(secret \\d* {0,1})\\S+(.*)",
    "inputs": [
      {
        "prefix": [
          "secret 0",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "asecret 0",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "secret 0 ",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "sender.*not",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "sender"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "access_token=[^;]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "k;acces",
        "pump": [
          "access_token=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\((.*?)\\)\\*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<script type=\\\"text\\/spm\\\">)([\\s\\S]*?)(<\\/script>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t</",
        "pump": [
          "<script type=\"text/spm\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\.]+\\.\\.[^\\.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\#\\s?\\#\\s*(.+)",
    "inputs": [
      {
        "prefix": [
          "#\t#\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\< (.*?)\\n(.*?)\\>",
    "inputs": [
      {
        "prefix": [
          "< a"
        ],
        "suffix": "<",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "<",
        "pump": [
          "< ",
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(RUNNER_ETC_DIR=)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "RUNNER_ETC_DIR="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*<\\?xml[^>]*\\?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "x",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "cpu_cpu.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "cpu_cpu"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+FINAL.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "FINAL"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "FINAL"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)\\.([0-9]+)\\.([0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *extra_API.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#define\\s+(\\w+)\\s+(.*)?$",
    "inputs": [
      {
        "prefix": [
          "#define\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a#define\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{[\\s\\S]*?\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "{",
        "pump": [
          "{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[:|@](.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^201[5-9]-[0-9][0-9]-[0-9][0-9].+([0-9]).+([a-z]).+([a-z0-9-])$",
    "inputs": [
      {
        "prefix": [
          "2015-00-00a",
          "a"
        ],
        "suffix": "0$",
        "pump": [
          "0a",
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<(?:/?)(?:quote|legacyquote)[^>]*>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c></",
        "pump": [
          "<quote"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^DEFINITION\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "DEFINITION\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Final-Recipient: rfc822;(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Final-Recipient: rfc822;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*testStackTraceGet$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tS",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \t]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{([0-9])*,? ?([0-9]+)\\}",
    "inputs": [
      {
        "prefix": [
          "{0"
        ],
        "suffix": "{{",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a{0"
        ],
        "suffix": ", ",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\.(\\d*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\?\\;\\&])(pg=[^;&]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pg?&pg",
        "pump": [
          "&pg=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*SELECT\\s.*\\s+FROM\\s",
    "inputs": [
      {
        "prefix": [
          "\tSELECT\ta"
        ],
        "suffix": "\tF",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Z][a-z]+|[0-9]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d*)(P?.)(.*)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "a",
        "pump": [
          "Pa"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "Pa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\/\\/\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t//\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\r\\n\\t]+|\\s{2,})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u000b\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*[aa]nn.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "ann"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " +DESC",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "E",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Ultra-Enterprise-10000",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a-",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(#\\s*line\\s+\\d+(?:\\s+(?:\"[^\"]*\"|\\S+))?)(.*)$",
    "inputs": [
      {
        "prefix": [
          "#\tline\t0\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Fixnum#methods:.*modulo",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h",
        "pump": [
          "Fixnum#methods:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*(\\d+)(mo|[wdhms]))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "store:(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "store:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*:\\/+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Unrecognized rule: (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Unrecognized rule: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " +at +([^ ]*).*",
    "inputs": [
      {
        "prefix": [
          " at a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          " at a"
        ],
        "suffix": "a",
        "pump": [
          " ",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<math([\\s\\S]*?)<\\/math>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ma</",
        "pump": [
          "<math"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[?&]([^&=]+)(?:[&=])([^&=]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a&",
        "pump": [
          "&a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)(?:\\s+AS\\s+|\\s+)(\\w+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "AS\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\@\\w+(\\(.+\\))?\\s*)(\\#.*)?$",
    "inputs": [
      {
        "prefix": [
          "@a(a"
        ],
        "suffix": "a",
        "pump": [
          ")#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ": (\\d+).(\\d+)",
    "inputs": [
      {
        "prefix": [
          ": 0"
        ],
        "suffix": "::",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "a: 0"
        ],
        "suffix": " 0:0: 0",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*([^;]+);\\s+([^;\\)]+)\\)",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a;\t"
        ],
        "suffix": "a;;",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t",
          "a;\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":link:\\s(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":link:\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "change_table :users.*?t\\.string :email",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nge",
        "pump": [
          "change_table :users"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]+",
    "inputs": [
      {
        "prefix": [
          "0x"
        ],
        "suffix": "\u0000",
        "pump": [
          "2x"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      },
      {
        "prefix": [
          "0x"
        ],
        "suffix": "\u0000",
        "pump": [
          "2x"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+) by (\\S+) \\(([^)]+)\\)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ")\t",
        "pump": [
          " by a",
          " (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\?:?([^\\s$]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$?",
        "pump": [
          "?a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^=([^=]+)=*?\\s*?\\n",
    "inputs": [
      {
        "prefix": [
          "=a"
        ],
        "suffix": "=a\n=a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Please see the logfile '(.*)' for more details",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "gf",
        "pump": [
          "Please see the logfile '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "::Pages.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "::Pages"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Audio:.*?([0-9]+) Hz",
    "inputs": [
      {
        "prefix": [
          "Audio:a"
        ],
        "suffix": "u",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " H",
        "pump": [
          "Audio:",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(\\)|etc|No|a\\.m|p\\.m)\\.$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n{3,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\n",
        "pump": [
          "\n\n\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)(\\.\\w+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z$%*\\/_+!?&<>\\-=]=?[a-zA-Z0-9$&*+!\\/_?<>\\-\\#]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#a\u0000",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:(\\S+?)::)?(\\w+)\\s*\\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "lib\\/artoo.*\\.rb$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "lib/artoo"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "root: {([^}]*)}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "Nan::Set\\(([^,]+),\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "S",
        "pump": [
          "Nan::Set(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\sat line\\s.+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\tat line\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*l(?:ist)?(?:\\s+(.+))?$",
    "inputs": [
      {
        "prefix": [
          "\tlist\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "uninitialized constant (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n\tu",
        "pump": [
          "uninitialized constant a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "bb\\d+.*?version\\/([\\.\\_\\d]+)",
    "inputs": [
      {
        "prefix": [
          "bb0"
        ],
        "suffix": "b",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "abb0"
        ],
        "suffix": "i",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http(s)?://www.nycourts.gov/(.*).htm",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s:",
        "pump": [
          "https://wwwanycourtsagov/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t\\f\\v]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+at level2.*\\n\\s+at level1.*",
    "inputs": [
      {
        "prefix": [
          "\tat level2a"
        ],
        "suffix": "a",
        "pump": [
          "\n\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\tat level2a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\n\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+\\d+\\s+\\*\\s+(?:\\s+(?:\\<1|\\d+)\\sms){2}.*$",
    "inputs": [
      {
        "prefix": [
          "\t0\t*\t"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Seat [0-9]+: (.*) \\(((small)|(big)) blind\\) folded on the Flop",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "in",
        "pump": [
          "Seat 0: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+|#.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ": \"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a",
        "pump": [
          ": \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)?(\\*|\\_){2}(\\S+.*)?$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "__a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d{1,2}|)\\s*(\\S+|)\\s*(\\d{4}|)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\ta\t000",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "0\ta0\ta",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "!weather (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "!weather "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)-([0-9]+)-([0-9]+)\\s([0-9]+):([0-9]+):([0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*configuration\\s+'hello'\\s*\\{\\s*node\\s+'localhost'\\s*\\{\\s*archive\\s*\\{\\s*\\}\\s*\\}\\s*\\}\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "calh",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\\\d\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "\\d\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "FATAL:  database \".*\" does not exist",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "AT",
        "pump": [
          "FATAL:  database \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(D|S|\\n|\\r|[^DS\\r\\n]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\ ([^\\s]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \t ",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)take$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ak",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\r?\\n)+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\r"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+(Sync|Stream)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\n[ \\t]*\\/\\/\\/[^\\n]*)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta\n",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(\\[|\\]|\\{|\\}),?\\s*\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "{",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(\\w+)(.*?)>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "<",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<a"
        ],
        "suffix": "<a>a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\s']+|'([^']|'[^\\s])*'|\"([^\"]|\"[^\\s])*\"",
    "inputs": [
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\"'\"\ta'\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "\"\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\"\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/.+/[a-zA-Z]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/$",
        "pump": [
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w[\\.\\w]*)\\s*:{0,1}=\\s*(\\S.+)?\\s*$",
    "inputs": [
      {
        "prefix": [
          "\taa\t=\taa"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "\taa\t:=\taa"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "//*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)spells$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\s]+?implements[\\s]+?ModuleInterface)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@return\\s*(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "r\t@r",
        "pump": [
          "@returna"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "MSIE ([\\d.]+).*Windows NT ([\\d.]+)",
    "inputs": [
      {
        "prefix": [
          "MSIE ."
        ],
        "suffix": " ",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aMSIE ."
        ],
        "suffix": "ndo",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Za-z0-9]+)<([A-Za-z0-9.]+)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<a.>a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(https?://[A-Za-z0-9.:_/?#~\\$\\-=&%]+|[A-Za-z0-9_][A-Za-z0-9_.']*[A-Za-z0-9_])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tp'",
        "pump": [
          "https://a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<verification_value>).+(</verification_value>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "io",
        "pump": [
          "<verification_value>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Fini (.+ morceaux)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mo",
        "pump": [
          "Fini a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(\\@\\)EVENT:\\s*(.*\\S)\\s*$",
    "inputs": [
      {
        "prefix": [
          "(@)EVENT:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a(@)EVENT:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w.@()\\/\\\\-]+[#>]\\s?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Usage: .* \\[ options \\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pa",
        "pump": [
          "Usage: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)[\\/\\\\](.*?\\.\\w+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/a",
        "pump": [
          "/a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "/",
        "pump": [
          "a",
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(===== SNAP-SCHED-A =====.*?)=====",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-A",
        "pump": [
          "===== SNAP-SCHED-A ====="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\d()]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(## Usage\\n \\* ```js)([\\S\\s]*?)(```)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "`j`#",
        "pump": [
          "## Usage\n * ```js"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)Table$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div([^>]*)><\\/div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<",
        "pump": [
          "<div"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*<(.*)>$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " ([a-z][.] ?)+ ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " $ ",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\s?property\\s+name\\s?=\\s?\"icon_size\"\\s?>.+<\\s?/property\\s?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i<property",
        "pump": [
          "<\tproperty\tname\t=\t\"icon_size\"\t>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_\\(.*\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a_",
        "pump": [
          "_("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a [^>]+>.+?</a>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<a>",
        "pump": [
          "<a a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ERROR: MinVersionError: tox version is .*, required is at least 6.0",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "x vers",
        "pump": [
          "ERROR: MinVersionError: tox version is "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Aa]r)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(t\\x{ed})<\\/[A-DF-Z]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</a<>ar",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-z0-9\\-]+\\.[a-z0-9\\-]+\\.[a-z0-9\\-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9a-f:]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^HTTP\\/1[.]1 400[\\s\\S]*The request host is missing.*",
    "inputs": [
      {
        "prefix": [
          "HTTP/1.1 400a"
        ],
        "suffix": "a",
        "pump": [
          "The request host is missing"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\/([^/\\s]+?)-[^\\s]*$",
    "inputs": [
      {
        "prefix": [
          "/a"
        ],
        "suffix": "\t",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?-\\d{4}-\\d{2}-\\d{2}\\.log",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-00-",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*<localRepository>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ca",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NetSuite::Records::KitItem with OPTIONS=(.*) could not be found",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "NetSuite::Records::KitItem with OPTIONS="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)([?&#])(?:_gac=[^&#]*)(?:&?)(.*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#_gac=",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "#_gac=",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "</?body.*>\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d</",
        "pump": [
          "</body"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "android (\\d+)\\.(\\d+)\\.?(\\d+)?",
    "inputs": [
      {
        "prefix": [
          "android 0.0"
        ],
        "suffix": "0..",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "aandroid 0.0"
        ],
        "suffix": "d",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[A-Za-z0-9,]+\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+[\\\\\\/]lib[\\\\\\/]chef[\\\\\\/]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/ca",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "A silo .* does not exist.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "il",
        "pump": [
          "A silo "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(from|external)\\s+([\\w.$]+)\\s+import\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "from\ta\timport\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DEBUG.*Posted TextMessage \"Hi\" to room 123",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " r",
        "pump": [
          "DEBUG"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<h1>.*Hello World!.*<\\/h1>",
    "inputs": [
      {
        "prefix": [
          "<h1>a"
        ],
        "suffix": "eH",
        "pump": [
          "Hello World!"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "h1</h1",
        "pump": [
          "<h1>",
          "Hello World!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "namespace (.*)[\\s\\S]+IReactPackage",
    "inputs": [
      {
        "prefix": [
          "namespace a"
        ],
        "suffix": "es",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "m",
        "pump": [
          "namespace ",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+(?::[ \\d,]*\\d\\-[ \\d,]*\\d)?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^fsck\\.com-\\w+\\:\\/\\/(.*?)\\/(.*?)\\/(\\d+)$",
    "inputs": [
      {
        "prefix": [
          "fsck.com-a://a"
        ],
        "suffix": "sc",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span[^>]+data-jodit_selection_marker=\"end\"[^>]*>[<>]*?<\\/span>",
    "inputs": [
      {
        "prefix": [
          "<spana"
        ],
        "suffix": "it_",
        "pump": [
          "data-jodit_selection_marker=\"end\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "n_",
        "pump": [
          "<spana",
          "data-jodit_selection_marker=\"end\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\r\\n){2,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ra",
        "pump": [
          "\r\n\r"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\n(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "You are not permitted to perform .*change_members.*domain",
    "inputs": [
      {
        "prefix": [
          "You are not permitted to perform a"
        ],
        "suffix": "e_m",
        "pump": [
          "change_members"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " to p",
        "pump": [
          "You are not permitted to perform ",
          "change_members"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(([^)]+)\\) ?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)@(\\$[0-9a-zA-Z_\\-]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "@",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(msie\\s|trident.*rv:)([\\w.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ems$ms",
        "pump": [
          "trident"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Score = ([\\d.]+) bits \\((\\S+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sSc\tScor",
        "pump": [
          "Score = . bits (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(.-.)+\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<link[^>]*)type\\\\s*=\\\\s*([\\\"']*)text/(?:css|plain)\\\\2([^>]*>)",
    "inputs": [
      {
        "prefix": [
          "<linka"
        ],
        "suffix": "=",
        "pump": [
          "type\\=\\text/css\\2a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "c><linktype\\=\\text/css",
        "pump": [
          "<link",
          "type\\=\\text/css\\2a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:,\\s*)?{([\\s\\S]*)}$",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/+.*",
    "inputs": [
      {
        "prefix": [
          "//"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "/"
        ],
        "suffix": "a",
        "pump": [
          "//",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]*\\)(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\[(?:(Full) )?GC.*(\\d+\\.\\d+) secs\\]",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ul0",
        "pump": [
          "[GC",
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "0",
        "pump": [
          "a",
          "[GC",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "`(.+?)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "`a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-- operating system:.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-- operating system:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*);$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*fluentd-elasticsearch.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "fluentd-elasticsearch"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "fluentd-elasticsearch"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "dup (\\d+)\\s*/(\\S+) put",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p 0\t/",
        "pump": [
          "dup 0/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http:\\/\\/localhost:5984\\/test\\/with_time%2F.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "http://localhost:5984/test/with_time%2Fa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#include\\s*\"(.+)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "#include\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-]?[0-9]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\d",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "No\\.[ 0-9]+ (\\S+\\....) (?:\\d+ bytes )?\\[",
    "inputs": [
      {
        "prefix": [
          "No. "
        ],
        "suffix": "o",
        "pump": [
          " a"
        ]
      },
      {
        "prefix": [
          "aNo. "
        ],
        "suffix": "o",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([ \\t]+)?\\<\\/(head|body|html)\\>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "sourceMappingURL=data:application\\/json;.*base64,",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "on",
        "pump": [
          "sourceMappingURL=data:application/json;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^=;&]+)=([^;&]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=&",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w{3,})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "aaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*(?:\\:\\:|\\'))(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(s+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "s"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*/t/\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(xlink\\:href=+|(?:data-)?src(?:set)?\\s*=\\s*)('[^']+'|\"[^\"]+\"|[^\\s\\/>]+)",
    "inputs": [
      {
        "prefix": [
          "xlink:href="
        ],
        "suffix": "et\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "refs/tags/(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "refs/tags/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[$indent_string]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*<a href=\"[^\"]+\">(.*?)<\\/a>\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "=([^&]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a&=",
        "pump": [
          "=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\?http",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(([+-]\\s*)?[0-9,]*,*[0-9]+(\\.[0-9]+(e[+-][0-9]+)?)?)(\\s*.)?",
    "inputs": [
      {
        "prefix": [
          "+\t,"
        ],
        "suffix": "+,",
        "pump": [
          ","
        ]
      },
      {
        "prefix": [
          "a",
          ","
        ],
        "suffix": "e++",
        "pump": [
          ",",
          ","
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\@\\{date\\:([^\\}]*)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d@",
        "pump": [
          "@{date:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(pmid:)?(\\d+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@exerslide-file-hash (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-f\t@exerslid",
        "pump": [
          "@exerslide-file-hash a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "WHERE\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "WHERE\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aWHERE\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+[0-9]+\\s+=>\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=>",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^=]+)=?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\S+.*)$",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^a-zA-Z0-9])+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:http?://|www\\\\.)*(?:[\\w+-_][.])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "w",
        "pump": [
          "h"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^0-9a-z]*)(.*)$",
    "inputs": [
      {
        "prefix": [
          "$"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?\\s.*?\\s.*?\\s",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\t.+: (.*)",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "a",
        "pump": [
          ": "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\ta",
          ": "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)([a-z]?)('*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(!|(?:not))\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t!\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t!\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<link[^\\>]+href=['\"])([^\"']+)([\"'])",
    "inputs": [
      {
        "prefix": [
          "<link\u0000href=\"\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "=hr\"a<h><link",
        "pump": [
          "<linka"
        ]
      },
      {
        "prefix": [
          "<link\u0000href=\"\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*plural\\s*=\\s*([^;]+);.*$",
    "inputs": [
      {
        "prefix": [
          "aplural\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[:_A-Za-z][-\\.:_0-9A-Za-z]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d\\d) ([^,]+), (\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "00 a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "!defined\\(([^\\)]+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e)!define",
        "pump": [
          "!defined(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "filename=(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "il\tfile",
        "pump": [
          "filename=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([\\w$.]+)\\s*:\\s*([^\\n;]+)",
    "inputs": [
      {
        "prefix": [
          "\ta\t:\t"
        ],
        "suffix": "a\t\n\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{\\s*n:([^\\}]+)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":{",
        "pump": [
          "{n:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<p([^>]*>\\s*)<blockquote([^>]*>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c><blockquo",
        "pump": [
          "<pa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)\\s+(\\w+day.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\ta"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "day"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]{2,}.*)$",
    "inputs": [
      {
        "prefix": [
          "aa"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "aa",
          "a"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DN:[\\s]*(.*)",
    "inputs": [
      {
        "prefix": [
          "DN:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aDN:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<pre.*?data-gist-like.*?>",
    "inputs": [
      {
        "prefix": [
          "<prea"
        ],
        "suffix": "-li",
        "pump": [
          "data-gist-like"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^__([a-z_]+)__\\s*=\\s*u?[\\'\"](.+?)[\\'\"]\\s*(#.+)?$",
    "inputs": [
      {
        "prefix": [
          "__a__\t=\tu\"a"
        ],
        "suffix": "a",
        "pump": [
          "\"#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\\\[UL][\\$\\\\]\\d.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\\L$0"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\\L$0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "define\\(\\[[^\\]]*\\]\\)[\\W\\n]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$]$adef",
        "pump": [
          "define(["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Name:(.*) Sensor:(.*)$",
    "inputs": [
      {
        "prefix": [
          "Name:a"
        ],
        "suffix": "a",
        "pump": [
          " Sensor:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%(-?[0-9]+)?(\\.?[0-9]+)?([acdfmMnpr%])(\\{([^\\}]+)\\})?|([^%]+)",
    "inputs": [
      {
        "prefix": [
          "%-0"
        ],
        "suffix": "%-}.",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a%-0"
        ],
        "suffix": "0.%",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\w-_\\.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\?|\\#).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "domain .+ already exists",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "domain a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*::test.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "::test"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "tests\\['.*'\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s[",
        "pump": [
          "tests['"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ENOENT.*nothing",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "E",
        "pump": [
          "ENOENT"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\([^\\)]*Trident[^\\)]*rv:([\\d\\.]+)",
    "inputs": [
      {
        "prefix": [
          "(a"
        ],
        "suffix": "idTrv:r",
        "pump": [
          "Trident"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "v:",
        "pump": [
          "(",
          "Trident"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(0x[^ ]*).*:\\s*([^ ]*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a:\t"
        ],
        "suffix": " 0",
        "pump": [
          "0x",
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a:\t"
        ],
        "suffix": " 0",
        "pump": [
          "a",
          "0x",
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(importScripts\\(.*?\\);?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "port",
        "pump": [
          "importScripts("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I forcefully click on element having (.+) \"(.*?)\"$",
    "inputs": [
      {
        "prefix": [
          "I forcefully click on element having a"
        ],
        "suffix": "n ",
        "pump": [
          " \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\/\\/[^\\n]*\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[i](.+?)\\[\\/i]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i][/i",
        "pump": [
          "[i]a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/event (\\w+) (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/event a a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^bogomips\\s*:\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "bogomips\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\/a\\/([^/\\s]+?)-([^/\\s]+?)$",
    "inputs": [
      {
        "prefix": [
          "/a/a"
        ],
        "suffix": "//",
        "pump": [
          "-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/read$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eada/r",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"*([^\"]*)\"*",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "a\"a",
        "pump": [
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "\""
        ],
        "suffix": "a",
        "pump": [
          "\"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *([A-Z]) *",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/video/(.*?)\\?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eo/",
        "pump": [
          "/video/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\*]*)\\*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[epsf\\s+(\\S+)(.*)\\]$",
    "inputs": [
      {
        "prefix": [
          "[epsf\ta"
        ],
        "suffix": "epsf",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Z]\\w*(?:::[A-Z]\\w*)*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a:",
        "pump": [
          "A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I click \"(.*)\" within \"(.*)\"$",
    "inputs": [
      {
        "prefix": [
          "I click \"a"
        ],
        "suffix": "I ",
        "pump": [
          "\" within \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z\\-']+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(([A-Za-z][0-9A-Za-z+.-]*)(:))?((\\/\\/)([^\\/?#]*))?([^?#]*)((\\?)([^#]*))?((#)(.*))?",
    "inputs": [
      {
        "prefix": [
          "aa://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+\\|\\|\\s$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "|\t\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<(?:noscript|noscript\\s[^>]*)>)([\\s\\S]*?)(<\\/noscript>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cr><nos",
        "pump": [
          "<noscript\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"og:image\" content=\"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "\"og:image\" content=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "&lt;([/]*?)(.*)([\\s]*?)&gt;",
    "inputs": [
      {
        "prefix": [
          "&lt;/",
          "a"
        ],
        "suffix": "t",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a&lt;/",
          "a"
        ],
        "suffix": "g",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(U\\+[\\dABCDEF]+\\-?[\\dABCDEF]*),?",
    "inputs": [
      {
        "prefix": [
          "U+0"
        ],
        "suffix": "U+",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "aU+0"
        ],
        "suffix": "U",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/templates\\/(.*)\\/associations",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sso",
        "pump": [
          "/templates/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Shift.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Shift"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "Shift"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([+-])?(\\d+)(?:\\.(\\d+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Push {2}URL: ((git@github\\.com:)|(https:\\/\\/github\\.com\\/)).+\\/(.+)\\.git",
    "inputs": [
      {
        "prefix": [
          "Push  URL: git@github.com:a"
        ],
        "suffix": "s",
        "pump": [
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":([\\w-]+)=?([\\w-]+)?",
    "inputs": [
      {
        "prefix": [
          ":a"
        ],
        "suffix": "::",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a:a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<\\s*.*img.*>)",
    "inputs": [
      {
        "prefix": [
          "<\t",
          "a"
        ],
        "suffix": "i",
        "pump": [
          "a",
          "img"
        ]
      },
      {
        "prefix": [
          "a<\t",
          "a"
        ],
        "suffix": "im",
        "pump": [
          "a",
          "img"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "=head1 \\Q$module\\E\\n\\n(.*?) \\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mo",
        "pump": [
          "=head1 $module\n\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(@ali\\/)?.+@.+$",
    "inputs": [
      {
        "prefix": [
          "@ali/a"
        ],
        "suffix": "a",
        "pump": [
          "@a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<URI.*?>\\s*(\\S+)\\s*</URI>",
    "inputs": [
      {
        "prefix": [
          "<URIa"
        ],
        "suffix": "I><>",
        "pump": [
          ">a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "UR>",
        "pump": [
          "<URI",
          ">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "# @route DELETE (.*?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "# @route DELETE "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([+-]?[0-9.]+)(vh|vw|vmin|vmax)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ma.",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\/span[^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p</sa></",
        "pump": [
          "</span"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*quit\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "qu",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Expected indentation of 0 .* but found 2\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " fo",
        "pump": [
          "Expected indentation of 0 "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^%]*)(%([^%]*)%)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*scgi_(port|local)\\s*=\\s*(.+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tscgi_port\t=\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "=====(.+?)=====",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=a==",
        "pump": [
          "=====a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/\\*.*?\\*/|//.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*",
    "inputs": [
      {
        "prefix": [
          "\tmatrix\t(\t",
          "a"
        ],
        "suffix": "\tr",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "# *doctest.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#doctest"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "`(?:[^`]|``)*`",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "`a",
        "pump": [
          "`"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ";[ ]?;+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a;",
        "pump": [
          ";;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(mailto:)?([\\w\\.\\_]+)@(\\w+)\\.(\\w+)\\.?(\\w+)?",
    "inputs": [
      {
        "prefix": [
          "mailto:a@a.a"
        ],
        "suffix": "mailto:",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a@a.a"
        ],
        "suffix": ":",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$\\(OBJECT\\).*:.*\\$\\(FIRST_MAKEFILE\\)",
    "inputs": [
      {
        "prefix": [
          "$(OBJECT)a"
        ],
        "suffix": "(F",
        "pump": [
          ":"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "M",
        "pump": [
          "$(OBJECT)",
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "INST_MAN3DIR\\s*=\\s*(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "IR\tIN",
        "pump": [
          "INST_MAN3DIR=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{\\$[0-9]+(\\{[^}]+\\})*\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$0",
        "pump": [
          "{$0{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?<hr/>(.*?)<hr/>.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<hr/>",
          "<hr/>"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "<hr/>",
          "<hr/>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)\\/([^\\.]+)\\.([^\\.]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.a/.",
        "pump": [
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "location\\.replace\\(\"(.+?)\"\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e(",
        "pump": [
          "location.replace(\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "public function create\\((.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "public function create(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<TaaS Response Start>(.*)<TaaS Response Complete>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pl",
        "pump": [
          "<TaaS Response Start>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Mac OS X.*(10\\.[^ ]+)",
    "inputs": [
      {
        "prefix": [
          "Mac OS Xa"
        ],
        "suffix": "Mac ",
        "pump": [
          "10.a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " O",
        "pump": [
          "Mac OS X",
          "10.a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\_+|\\s{2,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "loading cached values for .+ fact",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ed ",
        "pump": [
          "loading cached values for a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^\\s:]*):\\s*([\\s\\S]*)$",
    "inputs": [
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "0Ea",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^SERVER +(\\S+) +(\\S+) +(.+)$",
    "inputs": [
      {
        "prefix": [
          "SERVER ",
          "a",
          " ",
          "a",
          " "
        ],
        "suffix": "a",
        "pump": [
          "a",
          " ",
          "a",
          " ",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!ENTITY[^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "IT",
        "pump": [
          "<!ENTITY"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[^\\n]*delete this line after build[^\\n]*\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n",
        "pump": [
          "delete this line after build"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n(\\n| )+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na\n",
        "pump": [
          "\n "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "url\\(['\"]?([^\\/\\)'\"][^:\\)'\"]+)['\"]?\\)",
    "inputs": [
      {
        "prefix": [
          "url\u0000\u0000\""
        ],
        "suffix": ")",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "(\"",
        "pump": [
          "url(aa"
        ]
      },
      {
        "prefix": [
          "url\u0000\u0000\""
        ],
        "suffix": ")",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?\\+)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "+"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "+"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\/\\\\]+[\\/\\\\]{0,2}$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "///",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(?:TZ|TIMEZONE|ZONE)\\s*=\\s*(.*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tTZ\t=\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*) =(\\w+)=> (.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " =a=> "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*movzwl\\s+(.*)\\s*,\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\tmovzwl\t",
          "a",
          "\t,\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^HTTP error:\\s(\\d{3}),\\s<(.*)>\\s(.*)$",
    "inputs": [
      {
        "prefix": [
          "HTTP error:\t000,\t<a"
        ],
        "suffix": "a",
        "pump": [
          ">\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "var hostName\\s+=\\s+['\\\"](.+)['\\\"]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "var hostName\t=\t\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<%=\\s*(.*).class\\s*%>",
    "inputs": [
      {
        "prefix": [
          "<%=\t"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<%=\t"
        ],
        "suffix": "aa<%",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "sort=([^&]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tsor&s",
        "pump": [
          "sort="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)<(.+)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*at .*(\\S+\\:\\d+|\\(native\\))",
    "inputs": [
      {
        "prefix": [
          "\tat a"
        ],
        "suffix": "ea(nat",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "tags: (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "tags: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(@[a-zA-Z\\-]+)\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "@a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a@a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\=\\?(.+)\\?Q\\?(.+)\\?\\=",
    "inputs": [
      {
        "prefix": [
          "=?a"
        ],
        "suffix": "Q",
        "pump": [
          "?Q?a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "Qa=",
        "pump": [
          "=?a",
          "?Q?a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-+]?[0-9]*\\.?[0-9]+",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "0+",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.+\\/(.+?)(?:-\\d+.+)?\\.tgz$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a-0"
        ],
        "suffix": "/-0",
        "pump": [
          "/a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*,([^\\[\\],=]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "One of .* must be set",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e se",
        "pump": [
          "One of "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\d+[,.]{0,1}\\d+$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "0,,",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "0,0,",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "N9K.*-F",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "9-a",
        "pump": [
          "N9K"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\\\|\\/]index..+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/indexaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img(.*?)\\/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "im<a",
        "pump": [
          "<img"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*ve$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eav",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+-\\d+-\\d+T\\d+[\\+\\-]\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "T",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\/h[1-6][^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h",
        "pump": [
          "</h1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[\\s\\t]*([^>#]+)>[\\s\\t]+-([^\\,\\s\\t]+),([^\\s\\t]+)",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "\t-a>,",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+):+(.+)$",
    "inputs": [
      {
        "prefix": [
          "a:"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^0-9]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(import|include)\\s+[^>]+?>",
    "inputs": [
      {
        "prefix": [
          "<import\t"
        ],
        "suffix": "n",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<import\t"
        ],
        "suffix": "c><in",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s+inset|inset+\\s)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "in",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(/\\*.*?\\*/\\s+)\n             ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "multipart/mixed;?\\s*(?:boundary=)\"?([^\"]*)\"?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "armu\"ma",
        "pump": [
          "multipart/mixedboundary=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "create[^\\s]+  doc/images/nslogo\\.gif",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea ",
        "pump": [
          "createa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "href=\"/commands/(.+?)\">.+?</a>",
    "inputs": [
      {
        "prefix": [
          "href=\"/commands/a"
        ],
        "suffix": "n",
        "pump": [
          "\">a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ef",
        "pump": [
          "href=\"/commands/a",
          "\">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "uninitialized constant (?:(.+)(?:::))?(.+)",
    "inputs": [
      {
        "prefix": [
          "uninitialized constant a"
        ],
        "suffix": "a",
        "pump": [
          "::a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "uninitialized constant a",
          "::a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<meta name=\"csrf-token\" content=\"(.*)\" \\/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " n",
        "pump": [
          "<meta name=\"csrf-token\" content=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(s|t)\\/.*\\/g?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "t/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*Version\\s*=\\s*.*",
    "inputs": [
      {
        "prefix": [
          "\tVersion\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*module\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mo\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "code=\"([0-9]+)\">(.*)<",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e=\"",
        "pump": [
          "code=\"0\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?([a-z0-9\\-]+\\.[a-z]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a-",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a-.",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^derived object\\s+(\\S+?.+?)@@(\\S+)\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "derived object\ta",
          "a",
          "a\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "@@a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " (\\d\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0 \t ",
        "pump": [
          " 0a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\=|return)(.*?)(\\|\\>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "et|",
        "pump": [
          "="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([[:alpha:]]+)$",
    "inputs": [
      {
        "prefix": [
          ":h"
        ],
        "suffix": "\u0000",
        "pump": [
          ":h"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          ":h"
        ],
        "suffix": "\u0000",
        "pump": [
          ":h"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<<\\s*([^\\|\\s>]+)\\s*(\\|\\s*\\!\\s*(singularize|pluralize))?\\s*>>",
    "inputs": [
      {
        "prefix": [
          "<<\ta\t"
        ],
        "suffix": "u",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a\t"
        ],
        "suffix": "<|!p",
        "pump": [
          "<<a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^/]+)\\.a$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "bool\\n.*=> false",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea",
        "pump": [
          "bool\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#(.*)\\n\\n?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " ?data-scrapy-annotate=\".*?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-s",
        "pump": [
          " data-scrapy-annotate=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "matrix(3d)?\\(([^)]+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "imatr",
        "pump": [
          "matrix(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https?:\\/\\/[^\\/]+(.+)$",
    "inputs": [
      {
        "prefix": [
          "https://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "ahttps://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_(?:\\w+)_DOT_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "DO$_",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "void\\s+loop\\(\\)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "void\tloop()"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\:$q_slash]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9][0-9,-]*/[^,]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0,/,",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ssh .* -o 'ProxyCommand=ssh -W %h:%p candle@example\\.org' hostname\\.com",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "hoss",
        "pump": [
          "ssh "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "PUT (.*) HTTP",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "PUT "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([一二三四五六七八九十壱弐参拾百〇]+)進法",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "〇"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "['\"](http.+\\.m3u8.*?)['\"]",
    "inputs": [
      {
        "prefix": [
          "\"httpa"
        ],
        "suffix": "tt",
        "pump": [
          ".m3u8"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "m3",
        "pump": [
          "\"httpa",
          ".m3u8"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{[^\"'}]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "{\"",
        "pump": [
          "{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\d+\\s+[\\w?]+\\s+([A-Z])\\S*\\s+.+$",
    "inputs": [
      {
        "prefix": [
          "\t0\ta\tAa\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<#[\\s\\S]*?#>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<#",
        "pump": [
          "<#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Skipping.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Skipping"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "Skipping"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^!memo (.+?) (.+)",
    "inputs": [
      {
        "prefix": [
          "!memo a"
        ],
        "suffix": "a",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "k-point\\s+\\d+\\s*:\\s+([-.\\d\\s]+)",
    "inputs": [
      {
        "prefix": [
          "k-point\t0\t:\t"
        ],
        "suffix": "0:",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "ak-point\t0\t:\t"
        ],
        "suffix": "-p",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[+-]?\\d*\\.?\\d*(e[+-]?\\d+)?$",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*[\\])\\n]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".set\\(\"signature\"\\s*,\\s*(.*)\\(",
    "inputs": [
      {
        "prefix": [
          "aset(\"signature\"\t,\t"
        ],
        "suffix": "\t\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aaset(\"signature\"\t,\t"
        ],
        "suffix": "n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\<(\\w+)\\s+(.+)\\>$",
    "inputs": [
      {
        "prefix": [
          "<a\t"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Aa]r)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(me\\x{e1}n)<\\/[A-DF-Z]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n<",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^:([a-z]+)(.*)",
    "inputs": [
      {
        "prefix": [
          ":a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "}\\s*\\)\\s*\\(\\s*[\\w.=\\s]*(\\|\\|\\s*\\{\\})?\\s*\\);?$",
    "inputs": [
      {
        "prefix": [
          "}\t)\t(\t",
          "a"
        ],
        "suffix": "|{",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a}\t)\t(\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((.+)\\s+to\\s+(.+))",
    "inputs": [
      {
        "prefix": [
          "a",
          "\tto\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\tto\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "paid-till:\\s*(.+?)\\n",
    "inputs": [
      {
        "prefix": [
          "paid-till:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "apaid-till:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9])*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Data descriptors unexpanded:\\s+(\\d+.*)",
    "inputs": [
      {
        "prefix": [
          "Data descriptors unexpanded:\t0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aData descriptors unexpanded:\t0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><T>[Aa]n<\\/T> <A pl=\"n\" gnt=\"n\">(?:tr\\x{ed}|ceithre|c\\x{fa}ig|s\\x{e9}|seacht|naoi|deich)<\\/A><\\/E> <N pl=\"n\" gnt=\"n\" gnd=\"m\">(?:mh\\x{ed}le|mh?illi\\x{fa}n)<\\/N>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ">deic",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\d]+)(\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^the (first|second|third) ([^\\s]+)'s ([^\\s]+) attribute should be (.+)$",
    "inputs": [
      {
        "prefix": [
          "the first a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "'s a",
          " attribute should be a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)\\s*\\.(\\S*)\\s+(.*):\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "a\t.a\t",
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a\t.a\t",
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "拼写错误.*nodejs",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "拼写错误"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\s+)(2\\.6\\.\\d+[^\\n]*)$",
    "inputs": [
      {
        "prefix": [
          "\t2.6.0"
        ],
        "suffix": ".\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n\\n(.+)\\n$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n\na"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div class=\"d_descriptive\">By\\s*(.*?)\\s*</div>",
    "inputs": [
      {
        "prefix": [
          "<div class=\"d_descriptive\">By\t",
          "a"
        ],
        "suffix": "pti",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a<div class=\"d_descriptive\">By\t",
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-?[^,\\s\\-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Could not push castle_repo, expected .* to exist and contain dotfiles",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ", e",
        "pump": [
          "Could not push castle_repo, expected "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<frame\\s.+Welcome",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m",
        "pump": [
          "<frame\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "for\\s*?\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "or",
        "pump": [
          "for("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\.abproject",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^%\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "%\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I should see date \"(.*)\" in \"(.*)\" if on Windows$",
    "inputs": [
      {
        "prefix": [
          "I should see date \"a"
        ],
        "suffix": " Wi",
        "pump": [
          "\" in \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Updating 1 viewer to domain.*There is no user with a login testuser",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " t",
        "pump": [
          "Updating 1 viewer to domain"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\/\\S+ (\\S+) .*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/a",
          " a",
          " "
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/a",
          " a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w-\\.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<key>ApplicationIdentifierPrefix<\\/key>.*?<array>(.*?)<\\/array>",
    "inputs": [
      {
        "prefix": [
          "<key>ApplicationIdentifierPrefix</key>a"
        ],
        "suffix": "ti",
        "pump": [
          "<array>"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ey<a",
        "pump": [
          "<key>ApplicationIdentifierPrefix</key>",
          "<array>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\=$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<script .*type=\"text\\/javascript\"[^>]*>.*<\\/script>",
    "inputs": [
      {
        "prefix": [
          "<script a"
        ],
        "suffix": "scrt<>t</s",
        "pump": [
          "type=\"text/javascript\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\-\\s*|\\s*\\/\\s*|\\s*\\:+\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^voltage:\\s*(.*) V$",
    "inputs": [
      {
        "prefix": [
          "voltage:\t"
        ],
        "suffix": "l",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--opt_a.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "--opt_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+P",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "P0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "AGRICOLA; (.*)\\.$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "I",
        "pump": [
          "AGRICOLA; "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "There was an error deleting the snapshot.+it blew up.+",
    "inputs": [
      {
        "prefix": [
          "There was an error deleting the snapshota"
        ],
        "suffix": "a",
        "pump": [
          "it blew upa"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "There was an error deleting the snapshota",
          "it blew upa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$I->wantTo\\(\\s*?['\"](.*?)['\"]\\s*?\\);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "$I->wantTo(\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*onclick=\".*?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ic",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+  history$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"(\\S.*\\S)\" ([A-Z]+) (.*)\\[(.*)\\](.*)$",
    "inputs": [
      {
        "prefix": [
          "\"aa",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a\" A ",
          "[",
          "]"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\"a",
          "a\" A ",
          "[",
          "]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\?xml.+?\\?>\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "x<?>\t?",
        "pump": [
          "<?xmla"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\[(-?[_a-zA-Z]+[_a-zA-Z0-9-]*)(?:=(?:\"|')([a-zA-z0-9\\-_. ]+)(?:\"|'))?\\])?",
    "inputs": [
      {
        "prefix": [
          "[-a"
        ],
        "suffix": "[=",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a[-a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "t\\.index\\s+.+\\s+name: \"idx_obvious\",.+\\s+comment: \"We need to see obvious comments\"",
    "inputs": [
      {
        "prefix": [
          "t.index\t",
          "a",
          "\tname: \"idx_obvious\",a"
        ],
        "suffix": "co",
        "pump": [
          "a",
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/(\\d+:[^?]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0?",
        "pump": [
          "/0:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/Groups/(.*)/members$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mem",
        "pump": [
          "/Groups/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\/]((\\\\\\/|[^\\/])*)[\\/]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<meta[^>]+>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "met><m",
        "pump": [
          "<metaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+)\\s*:\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "a\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "injectStyles = gulp\\.src\\(\\[\\n.*conf\\.paths\\.src",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y",
        "pump": [
          "injectStyles = gulp.src([\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([\\s\\t]*\\S*)encrypted \\S+$",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "\tenc",
        "pump": [
          "encrypted a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\.rrd$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "r",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(.+?)\\s*(\")?export '(.+?)' was not found in '(.+?)'",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d\\d)?:?(\\d\\d)?:?(\\d\\d)?.?([0-9]+)?",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*callback\\((\\{.*\\})\\);$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "lb",
        "pump": [
          "callback({"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+ping\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pa",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@([a-zA-Z0-9]+)(\\((.+)\\))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a@",
        "pump": [
          "@a(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([a-z-]+) ?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\-]?[0-9]*[0-9|\\.][0-9]*",
    "inputs": [
      {
        "prefix": [
          "-0"
        ],
        "suffix": "-0..",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:http://)?([^/:]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^((\\S+) : )?\\S+ $",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " :",
        "pump": [
          " : a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Binary files (.+) and (.+) differ",
    "inputs": [
      {
        "prefix": [
          "Binary files a"
        ],
        "suffix": "y",
        "pump": [
          " and a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Title:\\s+(.*?)\\r?\\n(.*)",
    "inputs": [
      {
        "prefix": [
          "Title:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\r\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^data:text\\/(.+);(base64)?,(.*)$",
    "inputs": [
      {
        "prefix": [
          "data:text/a"
        ],
        "suffix": "a",
        "pump": [
          ";,"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<ref([^>]*)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "<ref"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img [^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "im<",
        "pump": [
          "<img "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I call \"(.*?)\" and then I call \"(.*?)\"$",
    "inputs": [
      {
        "prefix": [
          "I call \"a"
        ],
        "suffix": " I call ",
        "pump": [
          "\" and then I call \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w\\[\\],]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)([MIDNSHP=X]{1})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "MSIE\\s([^ ;]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "IEM M",
        "pump": [
          "MSIE\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/{2,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*%%\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "module LessInitializer.*Rack::Less",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "module LessInitializer"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)([\\%c]?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\((\\d{4}(\\/[^)]*)?|[A-Z]+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A(0000",
        "pump": [
          "(0000/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "googleapis.com\\/.+webfont",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "bcom",
        "pump": [
          "googleapisacom/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "hpwOS\\/([^\\s]*);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/hpwOS;\thp",
        "pump": [
          "hpwOS/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+)\\s+(\\S.*?)?\\s+(\\S+)\\s+([\\de]\\S*)\\s*\\n",
    "inputs": [
      {
        "prefix": [
          "a\taa"
        ],
        "suffix": "0\t\n0",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "description.+link",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pt",
        "pump": [
          "descriptiona"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(?:'(.*)'|\"(.*)\"|url\\((.*)\\))(.*)$",
    "inputs": [
      {
        "prefix": [
          "'a"
        ],
        "suffix": "a",
        "pump": [
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d*\\.\\d",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ ]*[!|c|\\*]\\$OMP",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "M!$",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "fax:\\s+(.+)\\n",
    "inputs": [
      {
        "prefix": [
          "fax:\t"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "afax:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(images/osc\\.gif\\?[^\"]+)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c.",
        "pump": [
          "images/osc.gif?a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\_\\-\\.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([0-9]+)(.+)(Scenario|Feature).js$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "i",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<password>).+(</password>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "w",
        "pump": [
          "<password>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Unrecognized.*--list2",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "st",
        "pump": [
          "Unrecognized"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "dir1\\/dir2\\/clean-name[^\\.]+.zip",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c.dir1/dir",
        "pump": [
          "dir1/dir2/clean-namea"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w]+)(?:\\((.*)\\))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@(\\S+?)\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "@",
        "pump": [
          "@a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img[^>]*alt\\s*=\\s*([a-zA-Z_]+)[^>]*>",
    "inputs": [
      {
        "prefix": [
          "<imgaalt\t=\ta"
        ],
        "suffix": "<al",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "aalt\t=\ta"
        ],
        "suffix": "malA><img",
        "pump": [
          "<img",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(([^\\-]+) -",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-(-",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zA-Z0-9:]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Linux (\\d+\\.\\d+\\.\\d+\\S*)\\s* \\((\\w*)\\)",
    "inputs": [
      {
        "prefix": [
          "Linux 0.0.0"
        ],
        "suffix": "0.0.",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aLinux 0.0.0"
        ],
        "suffix": "0\tLinux 0.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*movsbl\\s+(.*)\\s*,\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\tmovsbl\t",
          "a",
          "\t,\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+(?:\\.\\d+))\\s+(\\d+(?:\\.\\d+))\\s+(\\d+(?:\\.\\d+))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)-(m|r)-(\\d+)(\\.\\w+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-ra-",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<Paragraph preformat=\\\"true\\\">(.*?)<\\/Paragraph>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<Paragraph preformat=\"true\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^from (\\S+) by (\\S+) with BSMTP",
    "inputs": [
      {
        "prefix": [
          "from a"
        ],
        "suffix": " ",
        "pump": [
          " by a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\d{1,3}\\.[\\.0-9]*)?:?(\\d+)->(\\d+)$",
    "inputs": [
      {
        "prefix": [
          "0.."
        ],
        "suffix": "->",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "0.."
        ],
        "suffix": "-",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Connection time \\[ms\\]: connect ([0-9]*?\\.?[0-9]+)$",
    "inputs": [
      {
        "prefix": [
          "Connection time [ms]: connect 0"
        ],
        "suffix": "e",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[\\n ]*(.*)",
    "inputs": [
      {
        "prefix": [
          "\n"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(:|\\s*\\()",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_+[a-zA-Z]+_+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a_$",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+_(CFLAGS|LIBS)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*[|&,]\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^read\\s+(\\d+)\\s+admin\\s+passwords\\s+from\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "read\t0\tadmin\tpasswords\tfrom\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[(\\w+)\\]:\\s*([\\w\\W[[:punct:]]]+)\\s*\\u0022([\\w\\W\\s[[:punct:]]]+)\\u0022\\n?$",
    "inputs": [
      {
        "prefix": [
          "[a]:\t",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "(::u0022:u"
        ],
        "suffix": "",
        "pump": [
          ":u"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "config\\(.*, \\$stateProvider.*\\)",
    "inputs": [
      {
        "prefix": [
          "config(a"
        ],
        "suffix": "co",
        "pump": [
          ", $stateProvider"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "o",
        "pump": [
          "config(",
          ", $stateProvider"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+:/\\w*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/a:a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "load_(\\w+?)\\.rb$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ad_",
        "pump": [
          "load_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w_-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^:]*):([^/]*)/\\\\.?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\S+\\s*\\S*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\ta\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^find\\((.+)\\)\\.(.+)$",
    "inputs": [
      {
        "prefix": [
          "find(a"
        ],
        "suffix": "a",
        "pump": [
          ").a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((@)[a-zA-Z]+)\\s*(\\{)\\s*([^\\s,]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t@a",
        "pump": [
          "@a{a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<%([=!@:~\\x1a\\x1b\\x1c\\x1d])?([\\s\\S]*?)%>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%\u001a<",
        "pump": [
          "<%a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-+]?(0|[0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "+",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<Message>(.*)</Message>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e<",
        "pump": [
          "<Message>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\000.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[ ]{0,3}([A-Za-z0-9_-]+):\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          " a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[_]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+_at",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ata",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?) on (.+?) type (.+) \\((.+?)\\)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "e",
        "pump": [
          " on a",
          " type a",
          " (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "pulled from ([\\S]+) ~~",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "pulled from a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(snmp-server community).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "snmp-server community"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^mumble:\\/\\/([^/]+)(\\/[^?]*)?(\\?[^#]*)?$",
    "inputs": [
      {
        "prefix": [
          "mumble://a"
        ],
        "suffix": "e:/?#",
        "pump": [
          "?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\?php echo erLhcoreClassDesign::designCSS\\((.*?)\\)(.*?)\\?\\>",
    "inputs": [
      {
        "prefix": [
          "<?php echo erLhcoreClassDesign::designCSS(a"
        ],
        "suffix": " ",
        "pump": [
          ")"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "des",
        "pump": [
          "<?php echo erLhcoreClassDesign::designCSS(",
          ")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[a-zA-Z_]+[a-zA-Z0-9_]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\|\\w)?(?:=(.*?))?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "v0\\.([123456789]\\..*|10\\.(0|1|2[0-7]))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "v0.1."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "a=msid:[^\\n]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ia=ms\na=",
        "pump": [
          "a=msid:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+) examples?, (\\d+) failures?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "es, ",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "model:(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "model:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "I, \\[.* \\#\\d*\\]  INFO : (\\{\\\"kind\\\"\\:\\\"heartbeat\\\".*)",
    "inputs": [
      {
        "prefix": [
          "I, [a"
        ],
        "suffix": "a",
        "pump": [
          " #]  INFO : {\"kind\":\"heartbeat\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "I, [",
          " #]  INFO : {\"kind\":\"heartbeat\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*\\/).*?\\/?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)[\\/\\_](\\d+)\\-(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-/",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[([^=\\]]+)=?([^\\]]+)?]",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "=][",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "[a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/([A-Z][A-Za-z0-9_]+)When([A-Z][A-Za-z0-9_]+)Trait\\.php$",
    "inputs": [
      {
        "prefix": [
          "/Aa"
        ],
        "suffix": "/A",
        "pump": [
          "WhenAa"
        ]
      },
      {
        "prefix": [
          "a/Aa"
        ],
        "suffix": "ai",
        "pump": [
          "WhenAa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*@\\w+\\s+(?:\\{([^\\}]+)\\})?\\s*(.*)?",
    "inputs": [
      {
        "prefix": [
          "\t@a\t",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t@a\t",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\=]+\\s?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=a",
        "pump": [
          "="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-\\w:.]*[\\w]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)\\?([^\\#]+)(\\#(.*))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "?a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Current thread is (.+?) ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ur",
        "pump": [
          "Current thread is a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)=([\\w\\\"]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.8xlarge",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "8x",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_[^.]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a._",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " +load_initializer\\s+Rails::Initializer\\.run\\(:set_load_path\\)\\s+end",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u ",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([\\w._]+)\\s*:?=\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\ta\t:=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<s>(.*?)</s>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</",
        "pump": [
          "<s>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+?):([^:]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)\\s+at\\s.*line\\s\\d+[\\.\\s\\n]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\* Desc: (.*)\\s\\*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "* Desc: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-{5,}\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-\t---",
        "pump": [
          "-----"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "0(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ ]*\\|[ ]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.sty",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><S>[^< ]+ [^<]+<\\/S> (?:<N[^>]*gnt=\"y\"[^>]*>[^<]+<\\/N>)<\\/E>)",
    "inputs": [
      {
        "prefix": [
          "<Ea><S>a a</S> <Na"
        ],
        "suffix": "S> <",
        "pump": [
          "gnt=\"y\""
        ]
      },
      {
        "prefix": [
          "a",
          "a><S>a a</S> <Na"
        ],
        "suffix": "S> </N>",
        "pump": [
          "<E",
          "gnt=\"y\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(iPad).*Version\\/([0-9]+\\.[0-9]+).*(Safari)",
    "inputs": [
      {
        "prefix": [
          "iPadaVersion/0.0"
        ],
        "suffix": "fa",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "aVersion/0.0"
        ],
        "suffix": "e",
        "pump": [
          "iPad",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?",
    "inputs": [
      {
        "prefix": [
          "crypto:0 a a"
        ],
        "suffix": "\t",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Applied catalog in\\s+[0-9.]*\\s+seconds",
    "inputs": [
      {
        "prefix": [
          "Applied catalog in\t"
        ],
        "suffix": "c",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "aApplied catalog in\t"
        ],
        "suffix": "o",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*.+?\\s+\\-\\s",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "\t\t",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Error.*Your refund could not be processed.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ou",
        "pump": [
          "Error"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "MatchedDestId\":\".+_(\\s\\s\\s\\s\\s)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t\t",
        "pump": [
          "MatchedDestId\":\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ *(?:([\\w-]+|\\*)(?: *; *q *= *([0-9\\.]+))?)? *$",
    "inputs": [
      {
        "prefix": [
          " "
        ],
        "suffix": " **",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\.([^.]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([~!%|/].+[~!%|/])\\s*remove\\s*(#.*)?$",
    "inputs": [
      {
        "prefix": [
          "\t!a"
        ],
        "suffix": "a",
        "pump": [
          "!remove#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img (.+?) alt=\"-L\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "<img a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9.]+) [\"']?([a-zA-Z0-9 ]+)[\"']?(?: [\"']?([a-zA-Z0-9 \\$]+)[\"']?)?$",
    "inputs": [
      {
        "prefix": [
          "a \"a"
        ],
        "suffix": "a. ",
        "pump": [
          " a"
        ]
      },
      {
        "prefix": [
          "a",
          "a \"a"
        ],
        "suffix": " \"a. ",
        "pump": [
          "a",
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^%exclude\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "%exclude\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+[\\/]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)\\t([\\d\\.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t.$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "({.*?})",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(.*?)\\s*,\\s*['\"].*",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\$\\@].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\\\[(\\\\d*)\\\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\(\\",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https:\\/\\/.+\\.execute-api\\..+\\.amazonaws\\.com.+",
    "inputs": [
      {
        "prefix": [
          "https://a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".execute-api.a",
          ".amazonaws.coma"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[CHAT=[0-9]+\\](.*?)\\[\\/CHAT\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=0[",
        "pump": [
          "[CHAT=0]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\(\\d+ words\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " wor",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(.*)\\[(.*)\\]\\s*",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "][",
        "pump": [
          "a",
          "["
        ]
      },
      {
        "prefix": [
          "a",
          "\t",
          "a"
        ],
        "suffix": "\t[",
        "pump": [
          "\t",
          "a",
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\.(\\d+).*",
    "inputs": [
      {
        "prefix": [
          "0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0.0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img (.*?) \\/>:(left|right|center)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ent",
        "pump": [
          "<img "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@password=\".*?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=@p",
        "pump": [
          "@password=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "mInputShown\\s*=\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "mInputShown\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "amInputShown\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "validate_augeas.*?matched less than it should",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ida",
        "pump": [
          "validate_augeas"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Mgt\\./Professional.+?>&nbsp;([\\d\\.]+)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "Mgt./Professionala"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Za-z_][_A-Za-z0-9?!]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\/(.*)\\/(.*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/",
          "/"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/",
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "xmas (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "as\tx",
        "pump": [
          "xmas a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(;.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NetSuite::Records::CustomerRefund with OPTIONS=(.*) could not be found",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "it",
        "pump": [
          "NetSuite::Records::CustomerRefund with OPTIONS="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+\\s)+\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\ta0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "current\\s->(.+)\\/deployment\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ur",
        "pump": [
          "current\t->a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+-\\d+-\\d+ \\d+:\\d+:\\d+(,\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(exports\\.enoughTestCpu[^;]+;)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p;expo",
        "pump": [
          "exports.enoughTestCpua"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[\\[(.*?)\\]\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "][]",
        "pump": [
          "[["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%\\(([^)]*)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%)%a",
        "pump": [
          "%("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((\\w\\w\\w\\w)-(\\w\\w)-(\\w\\w))\\s+funcDateCalc\\((\\w+)\\((.+)\\)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nc",
        "pump": [
          "aaaa-aa-aa\tfuncDateCalc(a(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "VM \".+?\" has been successfully started",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y s",
        "pump": [
          "VM \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https://www.quandl.com/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "https://wwwaquandlacom/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\\\\\-)?(\\-+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-\\",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w*?)\\s*?\\((.*?)\\):(.*)",
    "inputs": [
      {
        "prefix": [
          "a\t(a"
        ],
        "suffix": "a",
        "pump": [
          "):"
        ]
      },
      {
        "prefix": [
          "a",
          "a\t(a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "):"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<iframe[^>]+src=[\"\\']((?:https?://)?videopress\\.com/embed/[\\da-zA-Z]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "//v",
        "pump": [
          "<iframea"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "origin=(.*?)&",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "igo",
        "pump": [
          "origin="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":in `_run_erb_.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":in `_run_erb_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*user\\s*=\\s*([^ ]*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tuser\t=\t",
          "a"
        ],
        "suffix": " ",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*USER 1347\\n+CMD.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "USER 1347\nCMD"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "USER 1347\nCMD"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<xre([^\\>]*)>(.*?)[\\s](.*?)<\\/pre>",
    "inputs": [
      {
        "prefix": [
          "<xrea>a"
        ],
        "suffix": "\t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a>a"
        ],
        "suffix": "e>\t</",
        "pump": [
          "<xre",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+) (\\d+) (.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " 0 "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)x(\\d+)([+-]\\d+)([+-]\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "x0+0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[1-9]+\\.\\d+\\.\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "01.",
        "pump": [
          "1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NP.*-ADV.*",
    "inputs": [
      {
        "prefix": [
          "NPa"
        ],
        "suffix": "a",
        "pump": [
          "-ADV"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "NP",
          "-ADV"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Ii]na)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(aice)<\\/[A-DF-Z]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<<",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.\\d+\\.?.*$",
    "inputs": [
      {
        "prefix": [
          ".0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^snapshot\\s*=\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "snapshot\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"(.*)\\\" {.*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "break in [^:]+:(?:1|2)[^\\d]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eab:2break in ",
        "pump": [
          "break in a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ExceptionFormatterSpec\\.js.*\\d+",
    "inputs": [
      {
        "prefix": [
          "ExceptionFormatterSpec.jsa"
        ],
        "suffix": "E",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ma",
        "pump": [
          "ExceptionFormatterSpec.js",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[([\\w-]+)(\\^?=.+?)]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "[a^=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[^%]*(?:\\\\include|\\\\input)\\s*\\{([^\\}]*)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "\\input{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+Creation\\s+(.*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tCreation\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"(.*?)\\\".*\\\"(.*?)\\\"",
    "inputs": [
      {
        "prefix": [
          "\"a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\"",
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\"",
          "\"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "network (.+)/(\\d+)(?: route-map (\\w+))*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-m",
        "pump": [
          "network a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\* (.+)( \\(((#[0-9]+)|(@?[[:word:]]+))\\))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a (@",
        "pump": [
          "* a"
        ]
      },
      {
        "prefix": [
          " \u0000 ::"
        ],
        "suffix": "\u0000",
        "pump": [
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@@ -([0-9]+)(,[0-9]+)? \\+([0-9]+)(,[0-9]+)? @@[^\\n]*\\n(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@@ -0 +0 @@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([^/|]*)\\|",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "|\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d*)\\.(\\d*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<use.* xlink:href=\"#path\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "<use"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(opera)(?:.*version)[\\s\\/]([\\w.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e$ope",
        "pump": [
          "operaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__(.*)__",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "__"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(ADDINT\\s*\\(\\s*([^)]+)\\).*|DICT\\s*\\(\\s*\"([^\"]+)\"\\s*\\)>*)",
    "inputs": [
      {
        "prefix": [
          "\tADDINT\t(\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$f_n\\(([^)]*)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "$f_n("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\".+\" hook for \"(.+)\"",
    "inputs": [
      {
        "prefix": [
          "\"a"
        ],
        "suffix": " h",
        "pump": [
          "\" hook for \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\.*(.+)$",
    "inputs": [
      {
        "prefix": [
          "."
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*COLLADA[^>]+version\\s?=\\s?\\\\\"1\\.5\\.0\\\\\".*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "COLLADAa",
          "version\t=\t\\\"1.5.0\\\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "COLLADAa",
          "version\t=\t\\\"1.5.0\\\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]+",
    "inputs": [
      {
        "prefix": [
          "00"
        ],
        "suffix": "\u0000",
        "pump": [
          "70"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000a",
        "pump": [
          "\u0000"
        ]
      },
      {
        "prefix": [
          "00"
        ],
        "suffix": "\u0000",
        "pump": [
          "70"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)(\\s+(\\d+)\\s(\\d+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<form action=\"?(.+?)\"? method=\"?post\"?>(.+)<\\/form>",
    "inputs": [
      {
        "prefix": [
          "<form action=\"a"
        ],
        "suffix": "m",
        "pump": [
          "\" method=\"post\">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "component\\/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "component/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]+_)+test\\.py$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "est",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\p{Z}+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":.+:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "token=(.*?)&u=(.*?)&secstate=",
    "inputs": [
      {
        "prefix": [
          "token=a"
        ],
        "suffix": "s",
        "pump": [
          "&u="
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ec&",
        "pump": [
          "token=",
          "&u="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d[\\d.\\w]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(@.*)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<a",
        "pump": [
          "<@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/+blib/+lib/*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/l",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\s/]+)/([^\\s/]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<res[^>]*>(.*?)<\\/res>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e<",
        "pump": [
          "<res"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"(?:[^\"\\\\]|\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4}))*\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<A[^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<><a",
        "pump": [
          "<A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "root path.*string",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "root path"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\e\\[\\d+(?:;\\d+)?m(.+?)\\e\\[0m",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0;\u001b[",
        "pump": [
          "\u001b[0ma"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^https?://b\\.hatena\\.ne\\.jp/[^/]+/(.*?)(?:\\?.*)?$",
    "inputs": [
      {
        "prefix": [
          "https://b.hatena.ne.jp/a/a"
        ],
        "suffix": "a",
        "pump": [
          "?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\d+\\s+CONT\\s?(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[(.+?):(.+)\\]$",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "]:",
        "pump": [
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-Wl([^\\s]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-W\t-W",
        "pump": [
          "-Wla"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\{sign\\}\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\@after[\\s\\t]+(.+)[\\s\\t\\n\\r]*$",
    "inputs": [
      {
        "prefix": [
          "@after\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "rv:([\\w\\.]+).*gecko\\/",
    "inputs": [
      {
        "prefix": [
          "rv:a"
        ],
        "suffix": "eg",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "arv:a"
        ],
        "suffix": "eckoa$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\?sanityRole=.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "?sanityRole="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "inet[^\\d]+([\\d\\.]+)\\s",
    "inputs": [
      {
        "prefix": [
          "ineta"
        ],
        "suffix": "in.",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "e",
        "pump": [
          "ineta",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:(\\d+\\.\\d+\\.\\d+)(?:(-)([a-zA-Z]+)(\\d+)?)?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*)\\$this\\->assert\\((.*)\\);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "->a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\.0\\.\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "v2.Validator\\.add\\(\\{.*\\\"format-with\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".",
        "pump": [
          "v2aValidator.add({"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[?!].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]*sap\\.ui\\.test\\.qunit\\.delayTestStart\\(\\);?[ \\t]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".de",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Location: (http[^\\r\\n]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\nLoc",
        "pump": [
          "Location: httpa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ";(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(([a-z_']) (\\<|\\>|\\=|\\<\\=|\\>\\=) \\? OR)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*([^!]+)?!([^\\*\\/]+)\\*\\/",
    "inputs": [
      {
        "prefix": [
          "!\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/*",
        "pump": [
          "/*a"
        ]
      },
      {
        "prefix": [
          "!\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Justin.*20.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Justin",
          "20"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "Justin",
          "20"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*[^b])is$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "isb",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "youtube-dl .*--no-false-value\\s--|\\\"http.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "youtube-dl "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(pt|px|em)\\s+(\\w+)\\s*(\\w+)?",
    "inputs": [
      {
        "prefix": [
          "0pt\ta"
        ],
        "suffix": "em\t0",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0pt\ta"
        ],
        "suffix": "p0",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\; (K\\d+)\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "; K0\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a; K0\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+) (.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'(.*?)',",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",'",
        "pump": [
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(%_OPTION_\\((.*?)\\)_NOITPO_)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "N",
        "pump": [
          "%_OPTION_("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n\\s*?<cmis:repositoryId>.*?<\\/cmis:repositoryId>\\s*?\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "h6.*{.*color: #ADDADD;.*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?) (ASC|DESC)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "S",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\x20]?scale)([XY]?)\\(([^\\)]+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a) scal",
        "pump": [
          " scaleX(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^,\\s@]+) as .+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " as a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\\\\\/]+)\\.dll$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "la",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "plugins\\/(.*)\\/views",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "plugins/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*#\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "HbbTV/1.1.1 \\(; (Philips);.*NETTV/2",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "V/1a",
        "pump": [
          "HbbTV/1a1a1 (; Philips;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@marker ([^\\s]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "r\t@m",
        "pump": [
          "@marker a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*([^=]+)\\s*=\\s*(?:(?:\"([^\"]+)\")|(?:'([^']+)'))",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t",
          "a"
        ],
        "suffix": "==\"\t=\t",
        "pump": [
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^msg\\s+([^\\s]*)\\s+(.+?)$",
    "inputs": [
      {
        "prefix": [
          "msg\t",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S.*?),(\\S.*?)$",
    "inputs": [
      {
        "prefix": [
          "aa"
        ],
        "suffix": "a",
        "pump": [
          ",a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<\\s*.*type.*text/css.*>)",
    "inputs": [
      {
        "prefix": [
          "<\t",
          "a",
          "a"
        ],
        "suffix": "yp",
        "pump": [
          "a",
          "type",
          "text/css"
        ]
      },
      {
        "prefix": [
          "a<\t",
          "a",
          "a"
        ],
        "suffix": "t/",
        "pump": [
          "a",
          "type",
          "text/css"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zA-Z0-9._]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+at.*line.*\\n",
    "inputs": [
      {
        "prefix": [
          "\tata"
        ],
        "suffix": "aal",
        "pump": [
          "line"
        ]
      },
      {
        "prefix": [
          "a",
          "\tata"
        ],
        "suffix": "ia",
        "pump": [
          "\t",
          "line"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*).(js|css)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "scs",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "handler.*type ACTION.*not.*function",
    "inputs": [
      {
        "prefix": [
          "handlera",
          "a"
        ],
        "suffix": "IOtn",
        "pump": [
          "type ACTION",
          "not"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "uniform[ \\t\\n\\r]+\\S+[ \\t\\n\\r]+\\S+[ \\t\\n\\r]*\\;",
    "inputs": [
      {
        "prefix": [
          "uniform\t",
          "a",
          "\t",
          "a"
        ],
        "suffix": "if \t ",
        "pump": [
          "a",
          "\t",
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "auniform\t",
          "a",
          "\t",
          "a"
        ],
        "suffix": "mun \tun",
        "pump": [
          "a",
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?\\d+\\.?\\d*)?(\\w)?",
    "inputs": [
      {
        "prefix": [
          "-0"
        ],
        "suffix": "-0.aa",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "=head1 SEE ALSO.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "=head1 SEE ALSO"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\ta\t0\t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\\?(footnote(?:ref)?):\\[(.*?[^\\\\])\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "footnote:[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.\\. DOMAINS\\s*\\.\\.\\s*([\\s\\S]+?)\\s*\\.\\. END DOMAINS",
    "inputs": [
      {
        "prefix": [
          ".. DOMAINS\t..\t",
          "a"
        ],
        "suffix": "...",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a.. DOMAINS\t..\t",
          "a"
        ],
        "suffix": "I",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[\\s\\S]+url\\(([\\s\\S]+)\\)[\\s\\S]+$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "url(a",
          ")a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http_([^_]+).+_gbgff_.+_t_(.+)_s_",
    "inputs": [
      {
        "prefix": [
          "http_a",
          "a",
          "a"
        ],
        "suffix": "p_g",
        "pump": [
          "a",
          "_gbgff_a",
          "_t_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\$?[A-Za-z]+\\$?[0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)(?::(.*))?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\|(.*)\\|(.*)\\|(.*)\\|(.*)\\|",
    "inputs": [
      {
        "prefix": [
          "|a",
          "a",
          "a"
        ],
        "suffix": "|a",
        "pump": [
          "|",
          "|",
          "|"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "|a",
        "pump": [
          "|",
          "|",
          "|",
          "|"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http[s]*://[^\\s\"><\\)\\(]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\tht",
        "pump": [
          "http://a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<[a-z][^>]*\\s)(?:id|name|language|type|on\\w+|\\w+:\\w+)=(?:\"[^\"]*\"|\\w+)\\s?",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(Sample|Project)_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mp",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\+-]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "+"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]*)[\\x00-\\x20]*=[\\x00-\\x20]*([\\`'\\\"]*)[\\x00-\\x20]*j[\\x00-\\x20]*a[\\x00-\\x20]*v[\\x00-\\x20]*a[\\x00-\\x20]*s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:",
    "inputs": [
      {
        "prefix": [
          "a\u0000=\u0000"
        ],
        "suffix": "\u0000v",
        "pump": [
          "\u0000"
        ]
      },
      {
        "prefix": [
          "=ju"
        ],
        "suffix": "",
        "pump": [
          "0u"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "em (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "em a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\.\\/]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<segment[^>]*>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eg><a",
        "pump": [
          "<segment"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><S>[Ii]n<\\/S> <[A-DF-Z][^>]*>n(?:-[aeiou\\x{e1}\\x{e9}\\x{ed}\\x{f3}\\x{fa}]|[AEIOU\\x{c1}\\x{c9}\\x{cd}\\x{d3}\\x{da}])[^<]*<\\/[A-DF-Z]><\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "S>In</S>",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "cache size\\s+:\\s(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "cache size\t:\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9a-fA-F]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\.(js)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sa.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Model Number:\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "Model Number:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aModel Number:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "stripping .* from absolute path",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "stripping "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":helper.*must",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "el",
        "pump": [
          ":helper"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^percentage:\\s*(.*)%$",
    "inputs": [
      {
        "prefix": [
          "percentage:\t"
        ],
        "suffix": "er",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#\\/(.+)\\/(.+)",
    "inputs": [
      {
        "prefix": [
          "#/a"
        ],
        "suffix": "a",
        "pump": [
          "/a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#/a",
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!\\-\\-[^>]+\\-\\->",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "!-><!",
        "pump": [
          "<!--a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)?\\s+(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a\ta\ta\ta\ta\t"
        ],
        "suffix": "a\ta\ta\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Poster\"\\nsrc=\"(.*?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sr",
        "pump": [
          "Poster\"\nsrc=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)(\\[.*\\])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "[",
        "pump": [
          "["
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "a",
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*);\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--rspdir=(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "--rspdir="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https?://[^\\s<>\"]+|www\\.[^\\s<>\"]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\thttp",
        "pump": [
          "https://a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:`][^\\s\\[\\](){}<>\"'\\^]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(?:(.+)/(.+?))\\((.+)\\).*$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/a",
          "(a",
          ")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[([^\\]]+)]\\(([^)]+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/\\s*#\\s*sourceMappingURL=(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "//#sourceMappingURL="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " at.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " ata"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "options\\[(.*)\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "options["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+expected type State\\[\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pe",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^/[\\w.]*[[:alnum:]][\\w.]*/[\\w.]*[[:alnum:]][\\w.]*$",
    "inputs": [
      {
        "prefix": [
          "/a",
          "a/a"
        ],
        "suffix": "/://",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(\\/|\\\\)([^(\\/|\\\\)]*)\\.ngdoc",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(/",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-z0-9_]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__version__ *= *'(.*?)' *$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ia",
        "pump": [
          "__version__='"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((@font-face\\s*?){([\\s\\S]*?)})",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)(\\s+nocache)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "data-plusbar-url=[\"\\'](http.+?\\.html)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m",
        "pump": [
          "data-plusbar-url=\"httpa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\(pid=\\d+\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<TITLE>.*?</TITLE>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "I",
        "pump": [
          "<TITLE>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DBI:SQLite:([^;]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "S;",
        "pump": [
          "DBI:SQLite:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)[-=_](.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/localhost/*.*__mocks__",
    "inputs": [
      {
        "prefix": [
          "//localhost/"
        ],
        "suffix": "//",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a//localhost/"
        ],
        "suffix": "/l",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(.*?)(\\\\)?\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\>(\\D)+\\<",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<>",
        "pump": [
          ">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-L/opt/local/lib.*)(-L/usr/local/lib)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pt/local/",
        "pump": [
          "-L/opt/local/lib"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\s*\\/\\s*([^\\s>]+)(\\s[^>]*)?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<a",
        "pump": [
          "</a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-+]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "+"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*ping statistics ---\\n([0-9]*) packets transmitted, ([0-9]*) received, (\\d*\\.?\\d*)% packet loss, time ([0-9]*)ms\\nrtt min/avg/max/mdev = (\\d*\\.\\d+)/(\\d*\\.\\d+)/(\\d*\\.\\d+)/(\\d*\\.\\d+) ms",
    "inputs": [
      {
        "prefix": [
          "aping statistics ---\n0 packets transmitted, 0 received, 0"
        ],
        "suffix": "mi",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *xmlns:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mln",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "You tried to include \"title\".*but no association named \"title\" is defined",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cl",
        "pump": [
          "You tried to include \"title\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)#(\\w+)=(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?) (.+?) (.+?) :(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          " a",
          " a",
          " :"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I run \"vagrant (\\w+)(?:\\s)?([^\"]*)?\" and answer the confirmation with \"(\\w+)\"$",
    "inputs": [
      {
        "prefix": [
          "I run \"vagrant a"
        ],
        "suffix": "con",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "mediaplugin_test.*<video",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ug",
        "pump": [
          "mediaplugin_test"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\:+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "m set (\\S+) (\\S+) (.+)$",
    "inputs": [
      {
        "prefix": [
          "m set a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          " a",
          " a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "m set a",
          " a",
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "rpm created successfully: (.*\\.rpm)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y",
        "pump": [
          "rpm created successfully: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Valid fiat currency values are:\\s*(.*)\\s*<br>",
    "inputs": [
      {
        "prefix": [
          "Valid fiat currency values are:\t",
          "a"
        ],
        "suffix": "Val",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "aValid fiat currency values are:\t",
          "a"
        ],
        "suffix": "es ",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(([^\\s()]*)(?:[\\s]*)([^()]*)\\)",
    "inputs": [
      {
        "prefix": [
          "(a\t"
        ],
        "suffix": "a\t(",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a(a\t"
        ],
        "suffix": ")(",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<link([^>]*)data-fr-style=\"true\"([^>]*)>",
    "inputs": [
      {
        "prefix": [
          "<linka"
        ],
        "suffix": "n",
        "pump": [
          "data-fr-style=\"true\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "-s><link<d",
        "pump": [
          "<link",
          "data-fr-style=\"true\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<tr.*?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<tr",
        "pump": [
          "<tr"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eda\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\n\\t\\r]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^\\s\\(]+) (http.+:\\d+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:",
        "pump": [
          " httpa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "expected #<Class.*> not to respond to :new with 1 argument",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "new",
        "pump": [
          "expected #<Class"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a[^>]+href=\\\"https://www.bing.com/maps([^\\\"]+)\\\"[^>]*>([^<]*)",
    "inputs": [
      {
        "prefix": [
          "<aa"
        ],
        "suffix": "rh<href=\"h",
        "pump": [
          "href=\"https://wwwabingacom/mapsa\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\@([^\\s]+)(.*)",
    "inputs": [
      {
        "prefix": [
          "@a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "refs/tags/(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "refs/tags/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(cc|gcc|g\\+\\+|cl).+-o\\s+(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-o\tc\t-cgc",
        "pump": [
          "cla"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\-{0,1}[0-9]+\\.{0,1}[0-9]*)\\-(\\-{0,1}[0-9]+\\.{0,1}[0-9]*)|(>|<|=|@)(\\-{0,1}[0-9]+\\.{0,1}[0-9]*)",
    "inputs": [
      {
        "prefix": [
          "0",
          "0-0"
        ],
        "suffix": "-0.>",
        "pump": [
          "0",
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0",
          "0-0"
        ],
        "suffix": ">--0-",
        "pump": [
          "0",
          "0",
          "0"
        ]
      },
      {
        "prefix": [
          "-0",
          "0--0"
        ],
        "suffix": "-0.>",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "SF:(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "SF:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http://.*(/api.*)",
    "inputs": [
      {
        "prefix": [
          "http://a"
        ],
        "suffix": "a",
        "pump": [
          "/api"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "http://",
          "/api"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^A-Za-z\\.@\\-\\+]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "BISONPRE_COPY(_ONCE)?\\((\\S+)\\s*,\\s*{([^}]*)}\\s*\\)",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.(svg|woff2?|ttf|eot|jpe?g|png|gif|mp4|mov|ogg|webm)(\\?.*)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".ogg?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "skipping reporting of.*Exception.*",
    "inputs": [
      {
        "prefix": [
          "skipping reporting ofa"
        ],
        "suffix": "a",
        "pump": [
          "Exception"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "skipping reporting of",
          "Exception"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^-+(.*)",
    "inputs": [
      {
        "prefix": [
          "-"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)<!--#(.+?)\\s*-->(.*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<!--#a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "<!--#a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)(`[^`]+?\\(.*?\\);?`)(.*)",
    "inputs": [
      {
        "prefix": [
          "a`a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "(",
          ");`"
        ]
      },
      {
        "prefix": [
          "a",
          "a`a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "(",
          ");`"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(\\w+),\\s+(\\w+)\\s+(\\d+),\\s+(\\d{4})\\s+(\\d{1,2}):(\\d\\d) (AM|PM)\\s+([\\d\\.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t.a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Tech \\S+ is deprecated\\. Install package \\S+ and use tech \\S+ instead\\.",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+?)\\s*!=\\s*(.+)",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t!=\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\t!=\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^{]*\\{[\\s\\S]*?\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "{",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\*\\s+\\d+\\s+FETCH\\s+\\(.+?\\\"(.*)\\\"\\s*\\)",
    "inputs": [
      {
        "prefix": [
          "*\t0\tFETCH\t(a"
        ],
        "suffix": "H\t",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#(\\[\\w+[\\d\\s\\w]+\\])",
    "inputs": [
      {
        "prefix": [
          "#[a"
        ],
        "suffix": "a[",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a#[a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\-]+):[^:]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a::",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\.shtml\\?cid=(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+\\.? ?){2}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a..",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " a.$",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+\\tdbi:\\w+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\tdb",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w\\d_\\$]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(https?:\\/\\/.+)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "htt",
        "pump": [
          "<https://a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*\\$ git .*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$ git "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\\\"(.*?)\\\\\">",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\a",
        "pump": [
          "\\\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#(.+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\.css$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\D*(\\d*)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "0a0a",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " \\[((.*?):\\d+)\\]:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]",
        "pump": [
          " [a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "require ['\"](.+)['\"]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e \"a",
        "pump": [
          "require \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\D*(\\d+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "a0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^#? User\\@Host:\\s+(\\S+)\\s+\\@\\s+(\\S+).*",
    "inputs": [
      {
        "prefix": [
          "# User@Host:\ta\t@\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)/$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?\\n)(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\"\"\"((\\\\\"|[^\"])*)\"\"\"|\"((\\\\\"|[^\"])*)\")(@([a-z]+(-[a-z0-9]+)*)|\\^\\^(.+))?$",
    "inputs": [
      {
        "prefix": [
          "\"\\\""
        ],
        "suffix": "a",
        "pump": [
          "\"^^a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\dX]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+?)As of ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "As ",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^changeset: +(.+)",
    "inputs": [
      {
        "prefix": [
          "changeset: "
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\u0000-\u007f]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)slings$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "in",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<td[^>]*?>(.*)?</td>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t</a><",
        "pump": [
          "<td"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9_]*[^0-9a-zA-Z_]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ERROR.*Fire",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "ERROR"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "payload:(.*)}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ad",
        "pump": [
          "payload:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\s]+\\s+as\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "as",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Z.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Z"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([0-9]+)(px)?\\s+(solid|dotted|dashed)?\\s*([a-z0-9#,\\(\\)\\.\\s]+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t0px\t",
          "\t",
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "\t",
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "0s#0"
        ],
        "suffix": "\u0000",
        "pump": [
          "s0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "attachments/([0-9]+)d[0-9]+-.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "attachments/0d0-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\?|&)+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "&a",
        "pump": [
          "&"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(数|何)([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^close\\((\\d+)\\)\\s+= (-?\\d+)\\s*([A-Z]*).*$",
    "inputs": [
      {
        "prefix": [
          "close(0)\t= -0\tA"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\*\\s+([^@]*)\\s+",
    "inputs": [
      {
        "prefix": [
          "*\t",
          "a"
        ],
        "suffix": "*\ta",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a*\t",
          "a"
        ],
        "suffix": "*",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-execute=?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-executea"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(a|c).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "c"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "test\\/path3\\/.*--abc\\/files",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "file",
        "pump": [
          "test/path3/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t‌]*([:;,؛،.؟!]{1})[ \\t‌]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "All fields are classified correctly in (\\d+.\\d+)% forms",
    "inputs": [
      {
        "prefix": [
          "All fields are classified correctly in 0"
        ],
        "suffix": "l",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "aAll fields are classified correctly in 0"
        ],
        "suffix": "si",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_[A-Za-z0-9_]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^((?:\\d+\\.)*\\d+)([-_])?([a-zA-Z]*)([-_])?(\\d*)(?:([-_])?(.*?))?$",
    "inputs": [
      {
        "prefix": [
          "0.0",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      },
      {
        "prefix": [
          "dd"
        ],
        "suffix": "",
        "pump": [
          "ddd"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/(.*)\\/mkdir\\/(.*)",
    "inputs": [
      {
        "prefix": [
          "/a"
        ],
        "suffix": "a",
        "pump": [
          "/mkdir/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/",
          "/mkdir/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Sec-Websocket-Accept:\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "Sec-Websocket-Accept:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aSec-Websocket-Accept:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Edge\\/(\\d+).\\d+",
    "inputs": [
      {
        "prefix": [
          "Edge/0"
        ],
        "suffix": "e/0",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "aEdge/0"
        ],
        "suffix": "g",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\sxmlns:([a-z0-9\\-]+)=\".*?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "x",
        "pump": [
          "\txmlns:a=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "queued as (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "queued as a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(?:\\* )? *(\\S+) *([a-f0-9]+)(?: .*)?$",
    "inputs": [
      {
        "prefix": [
          "*  ",
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\d+[Ee][+-]?\\d+)|(?:\\d+\\.\\d*|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0E+",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)(\\d+)-R(.)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+\\d+.\\d+\\:.*(total|average)$",
    "inputs": [
      {
        "prefix": [
          "\t0"
        ],
        "suffix": "va",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\W\\d]+)\\.[$QUOTE\\)]*?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *\\n+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*[#/])(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'(.*\\.js)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s.",
        "pump": [
          "'a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\S+:\\d+:in `eval\\':divided by 0",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "di",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "The API key: .* is invalid",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ey:",
        "pump": [
          "The API key: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+\\n$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/\\*(.+?)\\*/",
    "inputs": [
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "/*a",
        "pump": [
          "/*a"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[(]([^\\)]+)[)]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^data:.+/(.+);base64,(?:.+)",
    "inputs": [
      {
        "prefix": [
          "data:a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/a",
          ";base64,a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " size-([^\\s\"]+)",
    "inputs": [
      {
        "prefix": [
          " size-\u0000\""
        ],
        "suffix": "s",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "iz\t s",
        "pump": [
          " size-a"
        ]
      },
      {
        "prefix": [
          " size-\u0000\""
        ],
        "suffix": "s",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\\\(.+?)Command$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "man",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "dC",
        "pump": [
          "a",
          "\\a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+ scenarios? \\(.*(\\d+) [failed|undefined].*\\)",
    "inputs": [
      {
        "prefix": [
          "0 scenarios (a"
        ],
        "suffix": "ea",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0 scenarios (a"
        ],
        "suffix": " ",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^0-9.].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<B><Z>(?:<[^>]*>)*<N pl=\"y\" gnt=\"n\" gnd=\"m\" h=\"y\".>(?:<[^>]*>)*<\\/Z>([^<]+)<\\/B>",
    "inputs": [
      {
        "prefix": [
          "<B><Z><a>"
        ],
        "suffix": "><N pl=\"y\"",
        "pump": [
          "<N pl=\"y\" gnt=\"n\" gnd=\"m\" h=\"y\"a>"
        ]
      },
      {
        "prefix": [
          "a",
          "<a>"
        ],
        "suffix": "n\" gn",
        "pump": [
          "<B><Z>",
          "<N pl=\"y\" gnt=\"n\" gnd=\"m\" h=\"y\"a>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*link/ether\\s+([a-f0-9:]+)\\s+.*",
    "inputs": [
      {
        "prefix": [
          "\tlink/ether\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\tlink/ether\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\\\\\/]?([^\\\\\\/]+)[\\\\\\/]?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "//",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<br\\s?\\/><br\\s?\\/>\\*\\*\\*.+\\*\\*\\*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/>",
        "pump": [
          "<br\t/><br\t/>***a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\d+?)((?:000)+)$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "0100",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(#)\\S+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#\t#",
        "pump": [
          "#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "GLAPI (void) APIENTRY gl(ShaderSource)\\s*\\((.*?)\\);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "our",
        "pump": [
          "GLAPI void APIENTRY glShaderSource("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div class=[\"\\']{1}message-content[\"\\']{1}>\\s+<p>(.*?)</p>\\s+</div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<div class=\"message-content\">\t<p>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)([a-z])?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0$",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Aa]s)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+([Aa])<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(ch\\x{e9}ile)<\\/[A-DF-Z]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e<>ca",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\.\\w+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https://(.*?).?facebook.com/events/(\\d+)/?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "kc",
        "pump": [
          "https://"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[.*\\]\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "There was an error listing the snapshots.+it blew up.+",
    "inputs": [
      {
        "prefix": [
          "There was an error listing the snapshotsa"
        ],
        "suffix": "a",
        "pump": [
          "it blew upa"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "There was an error listing the snapshotsa",
          "it blew upa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\d\\/,()\\w]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*:controller\\s*=>\\s*['\"](.+?)['\"]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          ":controller=>\"a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "r",
        "pump": [
          "a",
          ":controller=>\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__version__ = '.*?'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "__version__ = '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w*?\\n){2,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "undefined local variable or method `.*'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eu",
        "pump": [
          "undefined local variable or method `"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*>(?:<V[^>]*t=\"caite\"[^>]*>[Aa]rsa<\\/V>)<\\/E>)",
    "inputs": [
      {
        "prefix": [
          "<Ea><Va"
        ],
        "suffix": "E><Vt=\"caite\"t=\"c",
        "pump": [
          "t=\"caite\""
        ]
      },
      {
        "prefix": [
          "a",
          "a><Va"
        ],
        "suffix": "Art",
        "pump": [
          "<E",
          "t=\"caite\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z0-9_]+)\\.([a-z0-9_]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-----([^-]+) ECDSA ([^-]+)-----([^-]*)-----([^-]+) ECDSA ([^-]+)-----",
    "inputs": [
      {
        "prefix": [
          "-----a",
          "a-----a-----a"
        ],
        "suffix": "DSa----",
        "pump": [
          " ECDSA a",
          " ECDSA a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "function\\s*([^\\s]*)\\s*\\(",
    "inputs": [
      {
        "prefix": [
          "function\t"
        ],
        "suffix": "f\tn",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "afunction\t"
        ],
        "suffix": "ionf",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\-\\d+\\.png$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-0.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(([^,]|\\\\,)+)\\s*[,$]",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "\t,$",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t",
          "a"
        ],
        "suffix": "\\$\t,,",
        "pump": [
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<(.+?)\\>(.*)\\<(\\/.+?)\\>",
    "inputs": [
      {
        "prefix": [
          "<a",
          "a"
        ],
        "suffix": "/<",
        "pump": [
          ">",
          "</a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "/",
        "pump": [
          "<a",
          ">",
          "</a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*snow-report.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "snow-report"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "snow-report"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{(.+)\\/(\\d+)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "{a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-c [\\S]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-c\t-c",
        "pump": [
          "-c a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__version__ = \\'(.*)\\'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "__version__ = '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "withTableFixes\\((\\w+), .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "withTableFixes(a, "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^spell(ing)?\\s+(?:of |for )?\\s+",
    "inputs": [
      {
        "prefix": [
          "spelling\t"
        ],
        "suffix": "f",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Error at location while working on <\\/path>:.*The needed library 'test' is missing",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ror",
        "pump": [
          "Error at location while working on </path>:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "dir:\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "dir:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "adir:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "I, \\[(.*)\\] *INFO -- : TestClass : class method$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " Te",
        "pump": [
          "I, ["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "toc_data:[^\\n]+[\\n]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "atoc_\nt",
        "pump": [
          "toc_data:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "［＃（.*?）］",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "［＃a",
        "pump": [
          "［＃（"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<iframe[^>](.*?)https?://player.vimeo.com/video/([0-9]+)(.*?)</iframe>",
    "inputs": [
      {
        "prefix": [
          "<iframeaahttps://playeravimeoacom/video/0"
        ],
        "suffix": "o",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "ahttps://playeravimeoacom/video/0"
        ],
        "suffix": ":c",
        "pump": [
          "<iframea",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".* [.]*\\[[\\d]+[ ]?\\-[ ]?[\\d]+\\].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " [0 -0]"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " [0 -0]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "xmlns(\\:[^=]*)?=['\"]http\\:\\/\\/www\\.w3\\.org\\/2000\\/svg['\"]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m=\"http://www.w3.",
        "pump": [
          "xmlns:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "must be an.*iterable",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ust",
        "pump": [
          "must be an"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[\\S*\\s(\\S*)\\]\\W+INFO: (\\w*-?\\w*|.*)?\\s\\[(\\w*)?\\]",
    "inputs": [
      {
        "prefix": [
          "[a\ta",
          "$INFO: a"
        ],
        "suffix": "[I",
        "pump": [
          "]$",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n *at CommandContext\\.eval [\\s\\S]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\nat CommandContext.eval "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "chef-new_file.*\\.html\\.erb$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "fia",
        "pump": [
          "chef-new_file"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\/^\\\\]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<B><Z>(?:<[^>]*>)*<R.>(?:<[^>]*>)*<\\/Z>([^<]+)<\\/B>",
    "inputs": [
      {
        "prefix": [
          "<B><Z><a>"
        ],
        "suffix": "/B",
        "pump": [
          "<Ra>"
        ]
      },
      {
        "prefix": [
          "a",
          "<a>"
        ],
        "suffix": ">><a<B><Z",
        "pump": [
          "<B><Z>",
          "<Ra>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/(DE|de|cuffdiff|differential|differentialexpression)\\/.*genes\\.fpkm_tracking",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "/de/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(blackberry)\\w*\\/?([\\w\\.]*)",
    "inputs": [
      {
        "prefix": [
          "blackberrya"
        ],
        "suffix": "l./",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "r$blackbe",
        "pump": [
          "blackberry",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\#\\ ?\\=\\>\\s*(.*?)$",
    "inputs": [
      {
        "prefix": [
          "\t# =>\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t# =>\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+Rumor$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "umoaR",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<[\\s]*script[\\s\\S]*?\\<\\/[\\s]*script[\\s]*\\>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "<script"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "def version.*?:version\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "si",
        "pump": [
          "def version"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^:([^:]+):\\s*\"?(.+)\"?$",
    "inputs": [
      {
        "prefix": [
          ":a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\.\\d+)+\\.",
    "inputs": [
      {
        "prefix": [
          "\u0000d\u0000dd"
        ],
        "suffix": "",
        "pump": [
          "ddd"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "\u0000d\u0000d"
        ],
        "suffix": "",
        "pump": [
          "dd\u0000d"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z_]+)=",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^(]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\x1b\\[0;.*?m",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "\u001b[0;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[([^:]+)(.+)\\]",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "]a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "]a:][",
        "pump": [
          "[a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s{0,}\\+ {0,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " +a\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(_|-| |:)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":a",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":?--[\\w-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-:--",
        "pump": [
          ":--a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s)*<!--(\\s)*@doBody(\\s)*-->",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ratingValue\">(.*?)<\\/span>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "ratingValue\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[(]([^)]*)[)]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)::([^:]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a:a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Resolves: (.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Resolves: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "for `\\e.*Example\\e.*`",
    "inputs": [
      {
        "prefix": [
          "for `\u001ba"
        ],
        "suffix": "mEx$",
        "pump": [
          "Example\u001b"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "eEx$",
        "pump": [
          "for `\u001b",
          "Example\u001b"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\.|\\d+|[^\\.\\d]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(data-for-.*?\\.zip)\\]\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "[data-for-a"
        ],
        "suffix": "[",
        "pump": [
          ".zip]("
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "-f.",
        "pump": [
          "[data-for-",
          ".zip]("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "error:\\s+```\\s+StandardError: test message.+```",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "error:\t```\tStandardError: test messagea"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^user:\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "user:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "INSERT LOG FAIL: (\\S+) (\\S+) (\\S+) (\\S+) (\\S+)",
    "inputs": [
      {
        "prefix": [
          "INSERT LOG FAIL: a",
          "a",
          "a",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          " a",
          " a",
          " a",
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]*:[ \\t]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<xml(.*?)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m",
        "pump": [
          "<xml"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "&lt;!\\[CDATA\\[[\\w\\W]+?]]&gt;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "&lt;![CDATA[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^loadplugin\\s+(.*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "loadplugin\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "drawing r:id=\"(.*?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "awi",
        "pump": [
          "drawing r:id=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#url=([^&]+)&base=(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#url=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\s*).* do( \\|.*\\|)?$",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": " ",
        "pump": [
          "a",
          " do |"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[\\[(?:([^|\\]]*)\\|)?([^\\]]+)\\]\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "|[",
        "pump": [
          "[[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:(&[a-z]+;|<[^>]+>)|([^&<]+))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<a&",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\[)(#.+?) (.+?)(\\])",
    "inputs": [
      {
        "prefix": [
          "[#a"
        ],
        "suffix": "#",
        "pump": [
          " a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "#][",
        "pump": [
          "[#a",
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "free-date:\\s*(.+?)\\n",
    "inputs": [
      {
        "prefix": [
          "free-date:\t"
        ],
        "suffix": "r",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "afree-date:\t"
        ],
        "suffix": "ata",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{\\S+?}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}{",
        "pump": [
          "{a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*=~~?\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "max-([a-z-\\s]+):",
    "inputs": [
      {
        "prefix": [
          "max--s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "max-a"
        ]
      },
      {
        "prefix": [
          "max---"
        ],
        "suffix": "",
        "pump": [
          "s-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\:\\d+\\:\\d+\\.(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([a-zA-Z0-9][0-9a-zA-Z _-]*?):\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "aa:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ *\\W+",
    "inputs": [
      {
        "prefix": [
          " "
        ],
        "suffix": "A",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<pw>).*(</pw>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a</pw",
        "pump": [
          "<pw>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^!Alias\\s+(.+?)\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "!Alias\t",
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[szSZrlRL]+?[^aeiouytdfgkcpbmnslrv][rlsz]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "L"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+:.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".myshopify.com.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "amyshopifyacom"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\((.*),([0-9]*),([0-9]*),([0-9\\:\\.\\-]*),([0-9]*)\\)\\ (.*)",
    "inputs": [
      {
        "prefix": [
          "(a"
        ],
        "suffix": "a",
        "pump": [
          ",,,,) "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "(",
          ",,,,) "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(0|(-?[1-9]\\d*))(\\.\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "1.",
        "pump": [
          "-1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(No errors.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "No errorsa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([^=]+?)\\s*=\\s*(.*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a",
          "\t=\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(function)\\s*[A-Za-z0-9_]*\\s*(\\([\\s\\S]*)",
    "inputs": [
      {
        "prefix": [
          "function\t"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "afunction\t"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)-(dev|\\d.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\(.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)teach$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@mixin.*!default.*",
    "inputs": [
      {
        "prefix": [
          "@mixina"
        ],
        "suffix": "a",
        "pump": [
          "!default"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@mixin",
          "!default"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*):\\t(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ":\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "amqps?:\\/\\/([^@]+).+",
    "inputs": [
      {
        "prefix": [
          "amqps://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "amqps://a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*use\\sAcme::Bleach\\s*;[^\\n]*\\n)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\tA",
        "pump": [
          "use\tAcme::Bleach;"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "l",
        "pump": [
          "a",
          "use\tAcme::Bleach;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "it \"renders the edit (.*) form\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "it",
        "pump": [
          "it \"renders the edit "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\s{1}(.*)\\s{1}(.*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\ta",
          "\ta"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\ta",
          "\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^::\\d+.\\d+.\\d+.\\d+$",
    "inputs": [
      {
        "prefix": [
          "::0",
          "0",
          "0"
        ],
        "suffix": "::00",
        "pump": [
          "a0",
          "a0",
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+Subdisks:\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "\tSubdisks:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<!--\\[if\\s[^\\]]+]>)([\\s\\S]*?)(<!\\[endif]-->)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]-<![en",
        "pump": [
          "<!--[if\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "A branch named '.+' already exists",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "al",
        "pump": [
          "A branch named 'a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n\\s*([\\d]{1,})\\s*([\\w\\d]{1,})",
    "inputs": [
      {
        "prefix": [
          "\n\t0"
        ],
        "suffix": "\na\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t0"
        ],
        "suffix": "0\n",
        "pump": [
          "\n",
          "a"
        ]
      },
      {
        "prefix": [
          "\n\t0"
        ],
        "suffix": "\na\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\[\\]]+\\s+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!--¼õ¿®È¢°ìÍ÷-->.*?<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=553>(.+?)<\\/table>",
    "inputs": [
      {
        "prefix": [
          "<!--����Ȣ����-->a"
        ],
        "suffix": "--<tab",
        "pump": [
          "<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=553>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+(\\.\\w+)*)\\.(\\w*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".a$",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "S\u0000w"
        ],
        "suffix": "",
        "pump": [
          "ww\u0000w"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a",
          "."
        ]
      },
      {
        "prefix": [
          "S\u0000w"
        ],
        "suffix": "",
        "pump": [
          "ww\u0000w"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I run arver in test mode with user \"(.*)\" and arguments \"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "I run arver in test mode with user \"a"
        ],
        "suffix": "un",
        "pump": [
          "\" and arguments \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\![^\\r\\n]*[\\r\\n]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s\\(\\[\\'\\\"]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<([!?][A-Za-z-][^>\\r\\n]*|[A-Za-z][A-Za-z0-9_:.-]*([ ]+([A-Za-z][A-Za-z0-9_:.-]*|[A-Za-z][A-Za-z0-9_:.-]*[ ]*=[ ]*('[^'\\r\\n]*'|\\\"[^\\\"\\r\\n]*\\\"|[A-Za-z][A-Za-z0-9_:.-]*)))*[ ]*/?|/[A-Za-z][A-Za-z0-9_:.-]*)[ ]*>",
    "inputs": [
      {
        "prefix": [
          "<!aa"
        ],
        "suffix": "</>' /a\" /",
        "pump": [
          " "
        ]
      },
      {
        "prefix": [
          "<A A=\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\" A=\"\u0000"
        ]
      },
      {
        "prefix": [
          "<A A=\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\" A=\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<matplotlib\\..*?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i<",
        "pump": [
          "<matplotlib."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^MIE\\d*(-[a-z]+)?\\d*$",
    "inputs": [
      {
        "prefix": [
          "MIE0"
        ],
        "suffix": "MIE-a-",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "gpgpath = (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "gpgpath = "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "gardenAddr=(\\d+.\\d+.\\d+.\\d+:\\d+)",
    "inputs": [
      {
        "prefix": [
          "gardenAddr=0",
          "0",
          "0"
        ],
        "suffix": "Addr=00a0000",
        "pump": [
          "a0",
          "a0",
          "a0"
        ]
      },
      {
        "prefix": [
          "agardenAddr=0",
          "0",
          "0"
        ],
        "suffix": "Addr=",
        "pump": [
          "a0",
          "a0",
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*require \\s*([^\"^\\$]\\S+[^;]).*;",
    "inputs": [
      {
        "prefix": [
          "\trequire \taa"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<(\\w+)\\s*([^\\>]*)\\>([^\\>]*)\\<\\/(\\w+)\\>",
    "inputs": [
      {
        "prefix": [
          "<a\t"
        ],
        "suffix": "<a><",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<a\t"
        ],
        "suffix": "</",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*Fo+::.*Bar+::Baz.$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "rr",
        "pump": [
          "Fo::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(([-+]?)0[Bb]([01]+)([Ll]?)).*",
    "inputs": [
      {
        "prefix": [
          "+0B0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a+0B0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\/:]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\.par|[\\d.]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*/doi/(.*/[^?&%^$]*).*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/doi/a",
          "/",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/doi/a",
          "/",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\r\\n]+install_requires =[\\r\\n]+(.+?)[\\r\\n]+\\w",
    "inputs": [
      {
        "prefix": [
          "\ninstall_requires =\n",
          "a"
        ],
        "suffix": "all_re",
        "pump": [
          "a",
          "\n"
        ]
      },
      {
        "prefix": [
          "a",
          "\ninstall_requires =\n",
          "a"
        ],
        "suffix": "na",
        "pump": [
          "\n",
          "a",
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s@]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^do\\s+ssh\\s+keys?\\s+add\\s+.+$",
    "inputs": [
      {
        "prefix": [
          "do\tssh\tkeys\tadd\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "applying.*?minitest.*?test",
    "inputs": [
      {
        "prefix": [
          "applyinga"
        ],
        "suffix": "em",
        "pump": [
          "minitest"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "estes",
        "pump": [
          "applying",
          "minitest"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*package\\s+([^ ;]+)",
    "inputs": [
      {
        "prefix": [
          "\tpackage\t"
        ],
        "suffix": " ",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\tpackage\t"
        ],
        "suffix": "e p",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "GoogleGeoApiClientJava/[^\\s]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "en\tG",
        "pump": [
          "GoogleGeoApiClientJava/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^get (.*) (.*)=(.*)\\(int (.*),\\)$",
    "inputs": [
      {
        "prefix": [
          "get a",
          "a",
          "a"
        ],
        "suffix": "et",
        "pump": [
          " ",
          "=",
          "(int "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "MAXVAL( *?)\\(.*?\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A)a",
        "pump": [
          "MAXVAL("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\\d+\\\\s+\\\\d+ (\\\\w+) (\\\\d+.*)",
    "inputs": [
      {
        "prefix": [
          "\\d\\s\\d \\w \\d"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a\\d\\s\\d \\w \\d"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\p{ASCII}+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9-_]+(\\[\\d+\\])?)[ \\t](.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+wtf\\(\\?\\)\\s+\\?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@static\\(([^\\)]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a)@s",
        "pump": [
          "@static(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^blacklist_to\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "blacklist_to\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^:]+)(/[^\\/].+)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/aa"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+(\\S+)\\s+\\=\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "\ta\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<f(.*?)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<",
        "pump": [
          "<f"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?\\d+(?:\\.\\d*)?)[eE]([+\\-]?\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+\\.?\\d*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "0.\t.",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "0a",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:(.*)\\.)?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(index\\.php)?(\\?.*)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])",
    "inputs": [
      {
        "prefix": [
          "![a](a"
        ],
        "suffix": "\\\u000b",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^-?\\(?\\$[ \\d,.]+\\)?(?: *CR)?$",
    "inputs": [
      {
        "prefix": [
          "-($ "
        ],
        "suffix": "-($ CRR",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(\\.?)(\\d*)px",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "0..",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]*) ([\\d-]+) - ([a-z]*) ([\\d-]+)[\\s\\t]*([0-9:, -]+)",
    "inputs": [
      {
        "prefix": [
          "a - - a -"
        ],
        "suffix": " 0\ta",
        "pump": [
          " "
        ]
      },
      {
        "prefix": [
          "a",
          "a - - a -"
        ],
        "suffix": "a ",
        "pump": [
          "a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "challenge\\s*:\\s*'(.+)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "g",
        "pump": [
          "challenge:'a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([ptdf]\\.|system\\.|get\\_|is\\_|set\\_)+([^=]*)",
    "inputs": [
      {
        "prefix": [
          "d."
        ],
        "suffix": "=",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          ".d"
        ],
        "suffix": "e=isyst",
        "pump": [
          "d",
          ".a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[*]\\sEQUATIONS\\s\"(.+?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "IO",
        "pump": [
          "*\tEQUATIONS\t\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\s*(?:[+/*%-.]=|=|\\+\\+|--)\\s*)(.*)",
    "inputs": [
      {
        "prefix": [
          "\t%=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(.*?)\\](.*)",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "a",
        "pump": [
          "]"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[",
          "]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "test\\s*>\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "test\t>\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "atest\t>\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*class=\"MsoBodyText\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ex",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "~+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "~"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "GLSL_OUT [^;]*;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "OG;aGLSL_OU",
        "pump": [
          "GLSL_OUT "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^=+\\s*\\{*([^=\\[\\]\\{\\}]*)\\}*\\s*=+",
    "inputs": [
      {
        "prefix": [
          "=\t",
          "a"
        ],
        "suffix": "=a}a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-----BEGIN\\sPRIVATE\\sKEY-----\\s+([a-zA-Z0-9+\\/=\\r\\n]+)\\s+-----END\\sPRIVATE\\sKEY-----",
    "inputs": [
      {
        "prefix": [
          "-----BEGIN\tPRIVATE\tKEY-----\t",
          "a"
        ],
        "suffix": "N\nPRIV",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a-----BEGIN\tPRIVATE\tKEY-----\t",
          "a"
        ],
        "suffix": "N\nPRIVATE\n",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "S?[9Z]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "9a",
        "pump": [
          "9"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\@\\S*\\s\\@\\S*\\s\\@\\S*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "@\ta@\t",
        "pump": [
          "@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "unlock_token=(.*)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "unlock_token="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<([^>]+)=~([^>]+)>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "=~>>",
        "pump": [
          "=~a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "=",
        "pump": [
          "<a",
          "=~a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\d]+)/([\\d]+) objects degraded",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ob",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ *project *\\([ \\n]*(\\w+)[ \\n]*.*?\\)",
    "inputs": [
      {
        "prefix": [
          " project (\na\n"
        ],
        "suffix": "ecta",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div id=rate><div id=label>Compra</div><div id=value>(\\d*\\,?\\d+)</div>",
    "inputs": [
      {
        "prefix": [
          "<div id=rate><div id=label>Compra</div><div id=value>0"
        ],
        "suffix": "e>",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a<div id=rate><div id=label>Compra</div><div id=value>0"
        ],
        "suffix": "0</div",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n(\\$\\(INST.[^\\s]+)\\s*:(.+)",
    "inputs": [
      {
        "prefix": [
          "\n$(INSTaa"
        ],
        "suffix": "a",
        "pump": [
          ":a"
        ]
      },
      {
        "prefix": [
          "a\n$(INSTaa"
        ],
        "suffix": "a",
        "pump": [
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\Q$alta{'ienc_pre'}\\E([^\\\"]*)\\Q$alta{'ienc_pst'}\\E",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e'",
        "pump": [
          "$alta{'ienc_pre'}"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*[^\\\\],\\s*)(.*)",
    "inputs": [
      {
        "prefix": [
          "aa,\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "aa,\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^from .* by \\S+ \\(qmail-\\S+\\) with ",
    "inputs": [
      {
        "prefix": [
          "from a",
          "a"
        ],
        "suffix": " (q",
        "pump": [
          " by a",
          " (qmail-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "`GlobPostController.*post` requests",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "`post",
        "pump": [
          "`GlobPostController"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[=,; \\t\\r\\n\\013\\014]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<(?:code|pre).*>[^<]+</(?:code|pre)>)",
    "inputs": [
      {
        "prefix": [
          "<codea"
        ],
        "suffix": "<cod",
        "pump": [
          ">a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "p",
        "pump": [
          "<code",
          ">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*nonce=\"(.*?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "on\"n",
        "pump": [
          "nonce=\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a",
          "nonce=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(file: \\\")(.*)(\\\".*)",
    "inputs": [
      {
        "prefix": [
          "file: \"a"
        ],
        "suffix": "a",
        "pump": [
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "file: \"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Test2::Event::(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Test2::Event::a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S.*)\\s+(https?:\\/\\/)(\\S+)",
    "inputs": [
      {
        "prefix": [
          "aa"
        ],
        "suffix": "psa\t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "//\thttps:",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w*BSD)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "S$B",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^new row for relation \"(.+?)\" violates check constraint \"(.+?)\"",
    "inputs": [
      {
        "prefix": [
          "new row for relation \"a"
        ],
        "suffix": " fo",
        "pump": [
          "\" violates check constraint \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+::([^:]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a:a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ";[^\\/]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/",
        "pump": [
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*function\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ionf",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n[^ \\t]+:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\n",
        "pump": [
          "\na"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(ifdef|ifndef|if)[ ]*([^\\r\\n]+)\\r?\\n",
    "inputs": [
      {
        "prefix": [
          "ifdef "
        ],
        "suffix": "efa",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aifdef "
        ],
        "suffix": "n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "not_yet_defined_field_type.*?FieldWithLazies",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "etn",
        "pump": [
          "not_yet_defined_field_type"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\?]?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*gap\\-penalty:\\s*(\\-?\\d+)\\/(\\-?\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ap",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9\\-_\\.]+)\\s?\\(?([><=\\s\\d\\.,]+)?\\)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.\ta",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ")a.($",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<script[^>]*?>.*?</script[^>]*?>",
    "inputs": [
      {
        "prefix": [
          "<scripta>a"
        ],
        "suffix": "</s",
        "pump": [
          "</script"
        ]
      },
      {
        "prefix": [
          "a",
          "a>a"
        ],
        "suffix": "s><scri",
        "pump": [
          "<script",
          "</script"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<\\/?\\w[^\\n]*?>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a</",
        "pump": [
          "</a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Failed to update.*Explanation",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "Failed to update"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[^,\"]|\"(?:[^\\\\\"]|\\\\.)*\")+",
    "inputs": [
      {
        "prefix": [
          "\u0000\""
        ],
        "suffix": ",",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": ",",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "\u0000\"\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\S+)\\s*\\(\\*(\\w+)\\s*\\)\\s*Args\\(\\((.+)\\)\\);",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "\t",
        "pump": [
          "(*a)Args((a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?)(\\+?)([A-Z|a-z|\\W]?)([1-9][0-9]*)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Z\\d]+)([A-Z][a-z])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Aaa",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"context\":{.*\"action\":\"notify_airbrake_helper\".*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.([0-9\\.]+) ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".",
        "pump": [
          ".."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)@(\\$[0-9a-zA-Z_]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a@",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\*|[\\w\\.\\-\\:]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "X-Other-.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "X-Other-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]+)\\(([0-9]+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "The source file .* does not exist",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "The source file "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Author:\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "Author:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aAuthor:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Access.*Denied",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A",
        "pump": [
          "Access"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Invalid.*:type",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "Invalid"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+ passing",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "as",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\/README",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "EAD/a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "java .*-jar start.jar",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tar",
        "pump": [
          "java "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*def\\s*.*\\(.*\\):.*$",
    "inputs": [
      {
        "prefix": [
          "\tdef\t",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "(",
          "):"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Tcl_DeleteCommand\\s*\\(\\s*((\\w+->)*(\\w+\\.)?interp)\\s*,\\s*Tcl_GetCommandName\\s*\\([^,]+,\\s*([^\\)]+->(\\w+\\.style|image)Cmd)\\)",
    "inputs": [
      {
        "prefix": [
          "Tcl_DeleteCommand\t(\ta->a.interp\t,\tTcl_GetCommandName\t(a,\t"
        ],
        "suffix": "et",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "P\\(false positive\\)<\\/i><\\/td><td>(.+?)<\\/td>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</i",
        "pump": [
          "P(false positive)</i></td><td>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\S+\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%\ta",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*api/v2/offers/SAMPLE/shares.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "api/v2/offers/SAMPLE/shares"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "api/v2/offers/SAMPLE/shares"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<tr>[^\\n]*?<img src=[^ ]*?\\/mail_send.gif WIDTH=25 HEIGHT=28>(.*?)<\\/tr>",
    "inputs": [
      {
        "prefix": [
          "<tr>a"
        ],
        "suffix": "d\ngif WID",
        "pump": [
          "<img src=/mail_sendagif WIDTH=25 HEIGHT=28>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(cannot insert duplicate key .* with unique index) | (violation of unique key constraint)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c",
        "pump": [
          "cannot insert duplicate key "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ *([0-9a-f]+): *(( \\.+| [a-f\\d]{2})+) +(\\w+)\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          " a:  . a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "0: \u0000 "
        ],
        "suffix": "",
        "pump": [
          "da "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.[^\\/]*?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "n+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(===== VSCAN =====.*?)=====",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " V",
        "pump": [
          "===== VSCAN ====="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Selecting.+scriptrunner_spec.rb from override script path",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tru",
        "pump": [
          "Selectinga"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)(\\[(.+?)\\])?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\!DOCTYPE.+?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<!DOCTYPEa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w.@+-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*javascript:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ascj",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^p:\\s*(.+)",
    "inputs": [
      {
        "prefix": [
          "p:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\s*)([^:]+)(::)?(.*)",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^-?\\D+[\\d,]+\\.\\d{2}$",
    "inputs": [
      {
        "prefix": [
          "-a"
        ],
        "suffix": "0,a",
        "pump": [
          ","
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.(js|css|png|jpg|jpeg|gif|ico)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^_entity_poly\\.pdbx_seq_one_letter_code_can\\s+(\\S+)?\\s*$",
    "inputs": [
      {
        "prefix": [
          "_entity_poly.pdbx_seq_one_letter_code_can\t"
        ],
        "suffix": "e_\tr",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\".+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(attendance|attd)\\s+(\\d+\\S+\\d+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tattendance\t0",
          "a"
        ],
        "suffix": "da",
        "pump": [
          "a",
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "\tattendance\t0",
          "a"
        ],
        "suffix": "d\t",
        "pump": [
          "\t",
          "a",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(script|style).*?>.*?<\\/(script|style).*?>",
    "inputs": [
      {
        "prefix": [
          "<scripta",
          "a"
        ],
        "suffix": "i",
        "pump": [
          ">",
          "</script"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "yl</scrip",
        "pump": [
          "<script",
          ">",
          "</script"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(1*)(0*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(//)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*at\\s+.*$",
    "inputs": [
      {
        "prefix": [
          "\tat\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\tat\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\((.*):\\d+:\\d+\\)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*replace\\s*(?:low_priority|delayed)?\\s*(?:into\\s*)?(?:[`\\\"]*([a-zA-Z0-9_]+)[`\\\"]*\\.){0,1}[`\\\"]*([a-zA-Z0-9_]+)",
    "inputs": [
      {
        "prefix": [
          "\treplace\t"
        ],
        "suffix": "epl\"",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "\treplace\t"
        ],
        "suffix": "e\"",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "replace0\""
        ],
        "suffix": "",
        "pump": [
          "\"\"0\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^rc-tools(@\\d+\\.\\d+.\\d+)?$",
    "inputs": [
      {
        "prefix": [
          "rc-tools@0.0"
        ],
        "suffix": "@",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zёа-я]+)\\.{3,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a..",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\$\\@])(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(&.*?;|<.*?>|(\\w[\\w\\-]*))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a&",
        "pump": [
          "&"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(aa *= *)(.*)",
    "inputs": [
      {
        "prefix": [
          "aa = "
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aaa = "
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Comment",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mea",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*kontena-agent.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "kontena-agent"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "kontena-agent"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "CA file .*no-ca.crt not found\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "CA file "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " \\# [^\\n]* ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a #\n #",
        "pump": [
          " # "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+?)D",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "D0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.?0+ ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\W)\\-+(\\W)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-$$-",
        "pump": [
          "$-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*\\...).*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".aa"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ".aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+[\\-\\.]?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Ringtones</a>(.*?)<br><table align=\"right\" border=\"0\"><tr><td>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "g",
        "pump": [
          "Ringtones</a>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-?(?:0|[1-9]\\d*)\\.\\d+(?:e[+-]?\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e+",
        "pump": [
          "1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^removing the '(.+)' field '(.+)'$",
    "inputs": [
      {
        "prefix": [
          "removing the 'a"
        ],
        "suffix": " ",
        "pump": [
          "' field 'a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\/?body.*?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d</b",
        "pump": [
          "</body"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9]+[kMGTP]?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "G0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*from (\\S*)\\s?.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "from ",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "from ",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\|([\\w\\|\\-]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$|",
        "pump": [
          "|a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<token>(.*?)</token>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "to",
        "pump": [
          "<token>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"\"\"[\\W\\w]*?\"\"\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\"",
        "pump": [
          "\"\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w\\d\\+]+@[\\w\\d]+\\.(net|com)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+) from \\[((?:'[0-9]+'(?:, ){0,1})+)\\] to (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<cvParam.+name=\"(\\d\\d-bit)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "<cvParama"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DICTDIR=(.*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "DICTDIR=a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "DICTDIR=",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "strn?cmp\\s*\\(.*\"([a-z][a-z0-9]+)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mp\ts",
        "pump": [
          "strncmp("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-z]+\\/[a-z]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(#|.)(.*)\\[(.*)\\]$",
    "inputs": [
      {
        "prefix": [
          "#a"
        ],
        "suffix": "][",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--name\\s.+\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "--name\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(.+\\.(?:bw|bigwig))\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i[",
        "pump": [
          "[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+) groups",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\S.*)\\s+//\\s*(_._)\\s+//",
    "inputs": [
      {
        "prefix": [
          "\taa"
        ],
        "suffix": "_\t_\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*.*@preserve.*\\*\\/",
    "inputs": [
      {
        "prefix": [
          "/*a"
        ],
        "suffix": "e@pre",
        "pump": [
          "@preserve"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "p",
        "pump": [
          "/*",
          "@preserve"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#.+?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*)([^\\s>]+)(\\s*)(>?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t>>",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span class=\"amount\">(.*?) &euro;</span>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eu",
        "pump": [
          "<span class=\"amount\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+?):([0-9]{1,5})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9\\-\\.]+)\\s*:\\s*(.+)\\s*;",
    "inputs": [
      {
        "prefix": [
          "a\t:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a\t:\t",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " \\$ (\\S+) ; $",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ;\t $  ",
        "pump": [
          " $ a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}a",
        "pump": [
          "a${"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<br\\s*[^>]*>",
    "inputs": [
      {
        "prefix": [
          "<br\t"
        ],
        "suffix": "<b>>",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<br\t"
        ],
        "suffix": "<",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\[?)\\s*([^\\[\\]\\s=]+(\\[\\][^\\[\\]\\s=]+)?)\\s*(?:=[^\\]]+\\s*)?(\\]?).*",
    "inputs": [
      {
        "prefix": [
          "\t",
          "\ta[]a\t=a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "=* (.+) =*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a",
        "pump": [
          "="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+(sitemap_navigation\\(|sitemap\\()+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "io",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "compilation-.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "compilation-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)resources\\/sap\\/ui\\/qunit\\/qunit-redirect\\.js$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ce",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^T]+)(?:T([^-+Z]+)(.+)?)?$",
    "inputs": [
      {
        "prefix": [
          "aTa"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Unknown.*?target type",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ge",
        "pump": [
          "Unknown"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$(\\w+)\\['(.+?)'\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]$",
        "pump": [
          "$a['a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(===== SYSCONFIG-R =====.*?)=====",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "SC",
        "pump": [
          "===== SYSCONFIG-R ====="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$(helptxt|txt|editortxt)\\['(.+)'\\]\\s?=\\s?(.+);",
    "inputs": [
      {
        "prefix": [
          "$helptxt['a"
        ],
        "suffix": "[",
        "pump": [
          "']\t=a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ed'",
        "pump": [
          "$txt['a",
          "']\t=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w\\' ]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?[0-9]*)[\\.]?([0-9]*)?[Ee]?([\\+-]?[0-9]*)?",
    "inputs": [
      {
        "prefix": [
          "-0",
          "0"
        ],
        "suffix": "0..",
        "pump": [
          "0",
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A`a",
        "pump": [
          "A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "insert .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "insert "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*DNS::",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aDN",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Warning: Task \"(.*)\" not found.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " n",
        "pump": [
          "Warning: Task \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Version.+1",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "Versiona"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]*):([0-9]*):([0-9]*)\\.([0-9]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Expected .+ option to be an array, received",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pt",
        "pump": [
          "Expected a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ISES_(\\w*)=([^;]*);?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "S;ISES_IS",
        "pump": [
          "ISES_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\([^()]*?\\)(.*?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "()"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "()"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Eventual BG .*>.*, temp .* >~ req ",
    "inputs": [
      {
        "prefix": [
          "Eventual BG a",
          "a"
        ],
        "suffix": "t,",
        "pump": [
          ">",
          ", temp "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9!\\$&',\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tdata:a/a;a=a;base64,a"
        ],
        "suffix": "#",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "background-image: url\\([^\\)]+\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "background-image: url(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[0-9]*\\.[0-9]+|[0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":\\s*\\r\\n\\s+",
    "inputs": [
      {
        "prefix": [
          ":\t"
        ],
        "suffix": "::",
        "pump": [
          "\r\n\t"
        ]
      },
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "\r\na:",
        "pump": [
          "\r\n\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\n\\s+",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "#",
        "pump": [
          "\n\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^MODEL=\"(.*)\" MOUNTPOINT=\"(.*)\"$",
    "inputs": [
      {
        "prefix": [
          "MODEL=\"a"
        ],
        "suffix": "IN",
        "pump": [
          "\" MOUNTPOINT=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\s]+:\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*is not allowed.*such error",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "is not allowed"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ro",
        "pump": [
          "a",
          "is not allowed"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<Tab .* title='foo'\\/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f",
        "pump": [
          "<Tab "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(<geodata>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "0[0-7]+[lu]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "1l0",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\s+-\\s+(.*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "a\t-\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a\t-\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(.*?):(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ":"
        ]
      },
      {
        "prefix": [
          "a",
          "\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a",
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+Stack is empty!",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'(.+)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "'a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^<&]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "&",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/BaseFont /\\S+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eF\t",
        "pump": [
          "/BaseFont /a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\.\\d{3}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\\"\\']+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\"a",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ",\\s*[^\\s]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a,\t",
        "pump": [
          ",a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[:!#\\$\\%&*+.\\\\\\/<=>?@^\\|~-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(pub.*?&gt;)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ub",
        "pump": [
          "pub"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^format is (.+) and I send (.+) to (.+) with\\:$",
    "inputs": [
      {
        "prefix": [
          "format is a",
          "a"
        ],
        "suffix": " I ",
        "pump": [
          " and I send a",
          " to a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\.0*(\\d+)",
    "inputs": [
      {
        "prefix": [
          "0.0"
        ],
        "suffix": "01.",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0.0"
        ],
        "suffix": "0a0",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "m:([a-z-]+)(?:\\(([^)]*)\\))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m:",
        "pump": [
          "m:a("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[url=([^\\[\\]]*)\\]\\[img\\](.*)\\[\\/img\\]\\[\\/url\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l][/",
        "pump": [
          "[url=][img]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(ADR[A-Za-z0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "RAD$A",
        "pump": [
          "ADRa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9a-zA-Z]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(kf[A-z]+)\\sbuild\\/[\\w\\.]+.*silk\\/",
    "inputs": [
      {
        "prefix": [
          "kfa\tbuild/a"
        ],
        "suffix": "u[s",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a\tbuild/a"
        ],
        "suffix": "u[s",
        "pump": [
          "kfa",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><N pl=\"n\" gnt=\"n\" gnd=\"m\">g?[Cc]h?\\x{fa}igear<\\/N> <N pl=\"y\" gnt=\"y\" gnd=\"f\">ban<\\/N><\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<title>(.*?)\\s+-\\s+XVID",
    "inputs": [
      {
        "prefix": [
          "<title>a"
        ],
        "suffix": "XV",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "XVI",
        "pump": [
          "<title>",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\=\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(function *\\([^)]*\\) \\{)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nf",
        "pump": [
          "function("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?\\[(.*?)\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "[",
        "pump": [
          "["
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "a",
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ProcessInfoPlistFile\\s.*\\.plist\\s(.*\\/+(.*\\.plist))",
    "inputs": [
      {
        "prefix": [
          "ProcessInfoPlistFile\ta",
          "a",
          "/"
        ],
        "suffix": "ce",
        "pump": [
          ".plist\ta",
          "/",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(  \\( [^\\)]* \\)  | . )$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a",
        "pump": [
          "  ( "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "t.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([YMDdWwFHhmsfZzPCE])\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "C\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aC\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)[\\.|$]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "V(.+)__.+\\.sql",
    "inputs": [
      {
        "prefix": [
          "Va"
        ],
        "suffix": "sa",
        "pump": [
          "__a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ql_",
        "pump": [
          "Va",
          "__a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "redis\\.(.*?)\\.conf",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ia",
        "pump": [
          "redis."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-z&A-Z&\\\\.]+",
    "inputs": [
      {
        "prefix": [
          "&A"
        ],
        "suffix": "\u0000",
        "pump": [
          "&A"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "&a"
        ],
        "suffix": "\u0000",
        "pump": [
          "&a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><[A-DF-Z][^>]*>[Nn]\\x{ed}<\\/[A-DF-Z]> (?:<V[^>]*t=\"caite\"[^>]*>(?:bhfuai?r|d\\x{fa}i?r|rai?bh|fhac|dheach|dhearna)[^<]*<\\/V>)<\\/E>)",
    "inputs": [
      {
        "prefix": [
          "<Ea><Aa>Ní</A> <Va"
        ],
        "suffix": "> ",
        "pump": [
          "t=\"caite\""
        ]
      },
      {
        "prefix": [
          "a",
          "a><Aa>Ní</A> <Va"
        ],
        "suffix": "/A",
        "pump": [
          "<E",
          "t=\"caite\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'*([^=']+?)'*=([^a-zA-Z]+?)[a-zA-Z\\%]*?;",
    "inputs": [
      {
        "prefix": [
          "'a'=$"
        ],
        "suffix": "$a$';",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "'a'=$"
        ],
        "suffix": "=$a=a",
        "pump": [
          "'",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w \\-\\.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+) \\{.+\\:.+\\}",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "}:",
        "pump": [
          " {a",
          ":a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "}:",
        "pump": [
          "a",
          " {a",
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*registered to use namespace \\'(.+)\\'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "to",
        "pump": [
          "registered to use namespace 'a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " ",
        "pump": [
          "a",
          "registered to use namespace 'a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\;]\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t;",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "primary_key\\[(.+)_version_name\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "me",
        "pump": [
          "primary_key[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\||,).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ","
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^a-zA-Z0-9_]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"queryString\":.*?,",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "uer",
        "pump": [
          "\"queryString\":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_(.*?)_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\*\\s.*\\sFETCH\\s\\(FLAGS \\((.*)\\)\\sUID\\s(.*)\\)",
    "inputs": [
      {
        "prefix": [
          "*\ta",
          "a"
        ],
        "suffix": "C",
        "pump": [
          "\tFETCH\t(FLAGS (",
          ")\tUID\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "F",
        "pump": [
          "*\t",
          "\tFETCH\t(FLAGS (",
          ")\tUID\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\(iphonesimulator(.*)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "at",
        "pump": [
          "(iphonesimulator"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "p",
        "pump": [
          "a",
          "(iphonesimulator"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\![^ ]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a ",
        "pump": [
          "!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(a|b).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "b"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+\"cookieDomain\":\"auto\".+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\"cookieDomain\":\"auto\"a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\"cookieDomain\":\"auto\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "at f \\(.*?:11:12\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "11",
        "pump": [
          "at f ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ ]*([#]+) ([^#]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a#",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "inet[\\s]*([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)(.*netmask[\\s]*(0x[0-9a-fA-F]{8}))?",
    "inputs": [
      {
        "prefix": [
          "inet\t0.0.0.0"
        ],
        "suffix": "xa",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "ainet\t0.0.0.0"
        ],
        "suffix": "ma",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "expected .* to respond to :some_method",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " t",
        "pump": [
          "expected "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"\"\"(.*?)\"\"\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\"",
        "pump": [
          "\"\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"+([^\"]+)\"+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "fwrite\\(\\): .* is not a valid stream resource",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m re",
        "pump": [
          "fwrite(): "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "`+,?\\s?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "`,a",
        "pump": [
          "`"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^0+(\\d+)$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "#",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<%\\#.+?.-?%>\\n?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%#",
        "pump": [
          "<%#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "GNU Lesser Public License .*?version 2\\.1",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er ",
        "pump": [
          "GNU Lesser Public License "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-----+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a-",
        "pump": [
          "-----"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-z0-9+]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\\Adeclare \\\\-x ([a-zA-Z_]+[a-zA-Z0-9_]*)(=\\\")?(.+)?\\\\z",
    "inputs": [
      {
        "prefix": [
          "\\Adeclare \\-x a",
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a\\Adeclare \\-x a",
          "a"
        ],
        "suffix": "eca",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+?/.+?/.+?/",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/a",
          "/a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/a",
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w+)\\s+([^\\%\\@\\$].*)",
    "inputs": [
      {
        "prefix": [
          "\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div class=\"intro(?:text)?\">(.*?)</div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " c",
        "pump": [
          "<div class=\"intro\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\$(?:\\{(\\S+?)\\}|(\\S+?))\\s*\n\t      ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:['\\\"][^'\\\"\\\\]*(?:\\\\.[^'\\\"\\\\]*)*['\\\"])|([a-z0-9_][a-z0-9\\-_]*\\.[a-z0-9_][a-z0-9_\\-]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "\"\\"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*[\\s\\S]+?\\*\\/\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/*a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Drive State \\.+ (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Drive State . "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\#extension\\s+(.*)\\:",
    "inputs": [
      {
        "prefix": [
          "#extension\t"
        ],
        "suffix": "#",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a#extension\t"
        ],
        "suffix": "i",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n(\\s*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ChangeLog:\\s*(.*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "ChangeLog:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\/([^\\/]\\w*)\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "/aa\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*escape:\\s*(\\w+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e:",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+?(\\S+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+)\\+(.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "+a"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^:+(.*)$",
    "inputs": [
      {
        "prefix": [
          ":"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "I should receive a Resource error (.+?) saying",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ayi",
        "pump": [
          "I should receive a Resource error a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DirectorJobRunner: SENT: agent\\.([^ ]*) (.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "DirectorJobRunner: SENT: agent. a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?xGerritAuth=\\\"(.+?)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Au",
        "pump": [
          "xGerritAuth=\"a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "=",
        "pump": [
          "a",
          "xGerritAuth=\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*FROM\\s+@#D?([^@]+)@\\s*(.*)\\s+TO\\s+@#D?([^@]+)@\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\tFROM\t@#Da@\t",
          "a",
          "\tTO\t@#Da@\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(K|M) Active, (\\d+)(K|M) Inact, (\\d+)(K|M) Wired,.*?(\\d+)(K|M) Free",
    "inputs": [
      {
        "prefix": [
          "0K Active, 0K Inact, 0K Wired,a"
        ],
        "suffix": " A",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0K Active, 0K Inact, 0K Wired,a"
        ],
        "suffix": "ct, 0",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "selected=\"selected\" value=\"([0-9]{1,2})\">(.*?)</option>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "oselec",
        "pump": [
          "selected=\"selected\" value=\"0\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*&[ ,:]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " &",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NAAM: (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "NAAM: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(href=\"([^\"]*\\.(jpe?g|png)(:large)?)\"[^<]*<\\/a>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "png\"",
        "pump": [
          "href=\".jpeg\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "srcset=(\"(?:[^\"]+)\"|'(?:[^']+)'|(?:[^ >]+))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "et srcs",
        "pump": [
          "srcset=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Access Point Hostname\\s*(.+)$",
    "inputs": [
      {
        "prefix": [
          "Access Point Hostname\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*([^=]+)\\s*=\\s*\\[\\s*([^\\]]+)\\s*\\]",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a",
          "\t=\t[\t",
          "a"
        ],
        "suffix": "=]\t",
        "pump": [
          "a",
          "\t",
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t",
          "a",
          "\t=\t[\t",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "\t",
          "a",
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(ignore_(?:line|re|substring))\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "\tignore_line\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#\\s+.*\\s+?-\\n",
    "inputs": [
      {
        "prefix": [
          "#\t",
          "a"
        ],
        "suffix": "#\t",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a#\t",
          "a"
        ],
        "suffix": "-",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z\\$][a-zA-Z0-9\\$]*_+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "inet\\[[^\\/]*\\/([^\\/\\]]+)\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ei",
        "pump": [
          "inet["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'abc'.*exists",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aex",
        "pump": [
          "'abc'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "TypeError.*expecting c to be \"\" or false or null or 0.*got undefined",
    "inputs": [
      {
        "prefix": [
          "TypeErrora"
        ],
        "suffix": " b",
        "pump": [
          "expecting c to be \"\" or false or null or 0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<B><Z>(?:<[^>]*>)*<N pl=\"y\" gnt=\"n\" gnd=\"f\" h=\"y\".>(?:<[^>]*>)*<\\/Z>([^<]+)<\\/B>",
    "inputs": [
      {
        "prefix": [
          "<B><Z><a>"
        ],
        "suffix": "><N pl=\"y\"",
        "pump": [
          "<N pl=\"y\" gnt=\"n\" gnd=\"f\" h=\"y\"a>"
        ]
      },
      {
        "prefix": [
          "a",
          "<a>"
        ],
        "suffix": "n\" gn",
        "pump": [
          "<B><Z>",
          "<N pl=\"y\" gnt=\"n\" gnd=\"f\" h=\"y\"a>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "class=\"error\">error.*rack_web_console.rb:.*process_script",
    "inputs": [
      {
        "prefix": [
          "class=\"error\">errora"
        ],
        "suffix": "ea",
        "pump": [
          "rack_web_consolearb:"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "c",
        "pump": [
          "class=\"error\">error",
          "rack_web_consolearb:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\?xml[^>]+encoding=\"([^\">]+)\"|<meta [^>]*charset=['\"]?([^ '\">]+)['\"]",
    "inputs": [
      {
        "prefix": [
          "<meta a"
        ],
        "suffix": "me'\"aec",
        "pump": [
          "charset=a"
        ]
      },
      {
        "prefix": [
          "<meta charset=\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      },
      {
        "prefix": [
          "xml\u0000encoding=\"\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "tacacs-server[ ]host[ ]([^\\s]+)\n                       (?:[ ](single-connection))?\n                       (?:[ ]vrf[ ]([^\\s]+))?\n                       (?:[ ]port[ ](\\d+))?\n                       (?:[ ]timeout[ ](\\d+))?\n                       (?:[ ]key[ ](\\d+)[ ](\\w+))?\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c\ttacacs-server host",
        "pump": [
          "tacacs-server host a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\=]*)\\=[\\'\\\"]?(.*[^\\'\\\"])[\\'\\\"]?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=\"\"",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*DELETE TABLE( IF NOT EXISTS)? \\\\\"(.*?)\\\\\".*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "DELETE TABLE \\\"",
          "\\\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "DELETE TABLE \\\"",
          "\\\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s:]+([\\d\\.]+)[,\\s]+([\\d\\.]+)[,\\s]+([\\d\\.]+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".,",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$\\S+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$\t$",
        "pump": [
          "$a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "RJB_VERSION\\s+\"(.+?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ER",
        "pump": [
          "RJB_VERSION\t\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<style([^A-Za-z0-9>][^>]*)?>.*?<\\/style[^>]*>",
    "inputs": [
      {
        "prefix": [
          "<style$a>a"
        ],
        "suffix": "</st",
        "pump": [
          "</style"
        ]
      },
      {
        "prefix": [
          "a",
          "a>a"
        ],
        "suffix": "s></style<style",
        "pump": [
          "<style$",
          "</style"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<\\s*br([^>]*)>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "<br"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\*(.*?)\\*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^#<Proc:0x[0-9A-Fa-f]+@(.+):(\\d+).*?>$",
    "inputs": [
      {
        "prefix": [
          "#<Proc:0xa@a:0"
        ],
        "suffix": "o",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\+(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "+\t+",
        "pump": [
          "+a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*(.*?)\\*\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/*",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^git-pair\\.authors=.* <([^>]+)>$",
    "inputs": [
      {
        "prefix": [
          "git-pair.authors=a"
        ],
        "suffix": ".> a",
        "pump": [
          " <a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#?[\\w:]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Function\\([\\s\\S]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Function(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Aa])<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+([Nn]aoi)<\\/[A-DF-Z]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " <",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\'\\\"]?\\).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^()<>\\@,;:\\\\\"\\/\\[\\]?={} \\t]+):\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@(.*?)/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<a style=\"mso-comment-reference:[^>/]+)/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c",
        "pump": [
          "<a style=\"mso-comment-reference:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*#.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ok[-_]locales\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "ok-locales\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^origin\\s+(.*?)\\s+\\(fetch\\)",
    "inputs": [
      {
        "prefix": [
          "origin\t",
          "a"
        ],
        "suffix": "(f",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img.*src=\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=a",
        "pump": [
          "<img"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+) (((\\d+\\.\\d+)\\.\\d+).*)$",
    "inputs": [
      {
        "prefix": [
          "a 0.0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\:.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "LicenseRef-.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "LicenseRef-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-+]?\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "+",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]+in[ \\t]+(.*)$",
    "inputs": [
      {
        "prefix": [
          "\tin\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\tin\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+:(.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(( )*\\n){3,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "spec\\.metadata.+\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "meta",
        "pump": [
          "spec.metadataa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\S+).+?\\s(\\S+)\\s+(\\S+)\\s+(\\d+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "\ta\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\.bbs)?\\@.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^HTTP\\/1[.]1 413[\\s\\S]*The request field name is too large.*",
    "inputs": [
      {
        "prefix": [
          "HTTP/1.1 413a"
        ],
        "suffix": "a",
        "pump": [
          "The request field name is too large"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span class=\"label label-warning\">(.*)</span>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " cla",
        "pump": [
          "<span class=\"label label-warning\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*a.*ff*23335*4",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "3f23",
        "pump": [
          "a",
          "f"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a",
          "a",
          "f"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([~!@#$%^&*()_+=`{}\\[\\]\\-|\\\\:;'<>,.\\/? ])+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "QUOTA\\s(.*?)\\s\\(STORAGE\\s(\\d+)\\s(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\t",
        "pump": [
          "QUOTA\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "AC_INIT\\(.*?\\[(\\d+)\\.(\\d+)\\.(\\d+)\\].*?\\)",
    "inputs": [
      {
        "prefix": [
          "AC_INIT(a"
        ],
        "suffix": "A",
        "pump": [
          "[0.0.0]"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "IT",
        "pump": [
          "AC_INIT(",
          "[0.0.0]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+):(\\d+):\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "uid: (.*)\\,",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "uid: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "input .*?type=\"checkbox\"\n                                  .*?name=\"crud_test_model\\[human\\]\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ut",
        "pump": [
          "input "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Default domain.*is ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ef$",
        "pump": [
          "Default domain"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ma",
        "pump": [
          "a",
          "Default domain"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\.-]+@[\\da-z\\.-]+\\.[a-z]+)",
    "inputs": [
      {
        "prefix": [
          "-@-."
        ],
        "suffix": "",
        "pump": [
          "d."
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "-@-."
        ],
        "suffix": "",
        "pump": [
          "d."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*) SOMETHING_IN_BETWEEN\\|(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " SOMETHING_IN_BETWEEN|"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " SOMETHING_IN_BETWEEN|"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w+)\\s+(\\[?[:\\.\\w\\*\\+\\-\\(\\)]+\\]?)([^,]*(;.*)?)$",
    "inputs": [
      {
        "prefix": [
          "\ta\t[a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<title>[\\s\\S\\n\\r]*?<\\/title>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "<title>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(div|span|style|meta|link).*?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pa",
        "pump": [
          "<div"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<img [^>]* src=)(\"cid:[^>\"]*\")([^>]*>)",
    "inputs": [
      {
        "prefix": [
          "<img a"
        ],
        "suffix": "i",
        "pump": [
          " src=\"cid:\"a"
        ]
      },
      {
        "prefix": [
          "<img  src=\"cid:\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "= s><img < src=\"cid:<i",
        "pump": [
          "<img ",
          " src=\"cid:\"a"
        ]
      },
      {
        "prefix": [
          "<img  src=\"cid:\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<a .*?>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<",
        "pump": [
          "<a "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><V cop=\"y\">[Aa]n<\\/V> <A pl=\"n\" gnt=\"n\">[Dd]h\\x{e1}<\\/A><\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p=",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(testLinker1=.*){2}",
    "inputs": [
      {
        "prefix": [
          "testLinker1=a"
        ],
        "suffix": "a",
        "pump": [
          "testLinker1="
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "testLinker1=",
          "testLinker1="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http://.*label/{label}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*?([^.]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*@if\\s*\\([^\\)]*\\)|\\/\\*@[\\s\\w]*|@\\*\\/|\\/\\/@\\w+|@else[\\s\\w]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "//",
        "pump": [
          "/*@if("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*):([\\d]*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\$\\@\\%\\*])(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t$",
        "pump": [
          "$a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "who.*|(what.*name)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "who"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "pw-[^\\s'\"]+",
    "inputs": [
      {
        "prefix": [
          "pw-\u0000\u0000"
        ],
        "suffix": "'",
        "pump": [
          "\"\u0000"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "-p\tpw",
        "pump": [
          "pw-a"
        ]
      },
      {
        "prefix": [
          "pw-\u0000\""
        ],
        "suffix": "'",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([:\\w][\\w\\[\\]]*)[ ]+- ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " $",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<defs>(.+)<\\/defs>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e</d",
        "pump": [
          "<defs>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^1\\.\\.(\\d+)(.*)",
    "inputs": [
      {
        "prefix": [
          "1..0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(Chrome|CrMo)\\/([^\\s]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "r\tChrom",
        "pump": [
          "CrMo/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\s(\\w)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "oauth_token_secret=([^&]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "en&oauth_to",
        "pump": [
          "oauth_token_secret="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[@]+[A-Za-z0-9-_]+[:]?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "@a$",
        "pump": [
          "@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[\"']|```).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " at \\S+?\\.pm line \\d+\\.?\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " at",
        "pump": [
          " at a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "s \\{\\s+(.+?)\\s+\\}",
    "inputs": [
      {
        "prefix": [
          "s {\t",
          "a"
        ],
        "suffix": " {\t",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "as {\t",
          "a"
        ],
        "suffix": " {",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "to-.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "to-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "super\\.(.*?)\\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er",
        "pump": [
          "super."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((\\(\\w+(?:\\s+\\w+)+\\)\\s*)+?)",
    "inputs": [
      {
        "prefix": [
          "wswwswsw"
        ],
        "suffix": "\u0000",
        "pump": [
          "wswsw"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": ")(a\ta",
        "pump": [
          "("
        ]
      },
      {
        "prefix": [
          "wswwsw"
        ],
        "suffix": "\u0000",
        "pump": [
          "wwsw"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*%include\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "\t%include\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+<",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$",
    "inputs": [
      {
        "prefix": [
          " a (a",
          " "
        ],
        "suffix": " (",
        "pump": [
          " ",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\.\\.\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*database 'template1', does not exist.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "database 'template1', does not exist"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "database 'template1', does not exist"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+(\\S+)\\s*(.*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Non-U\\.S\\. Memb.*: (.*)",
    "inputs": [
      {
        "prefix": [
          "Non-U.S. Memba"
        ],
        "suffix": "a",
        "pump": [
          ": "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((X|Y|Z|E):[0-9\\.\\-]+)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-Z",
        "pump": [
          "E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-?\\d[\\d_]*(.[\\d_]*)?(e[+-]?\\d[\\d_]*)",
    "inputs": [
      {
        "prefix": [
          "-00"
        ],
        "suffix": "+_+",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "+0ae+",
        "pump": [
          "-0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":([-\\w]{2,})(?:\\[([^\\]]+)\\])?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "[",
        "pump": [
          ":aa[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([[:upper:]][[:lower:]]+)",
    "inputs": [
      {
        "prefix": [
          "::l"
        ],
        "suffix": "\u0000",
        "pump": [
          ":l"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "la",
        "pump": [
          "::"
        ]
      },
      {
        "prefix": [
          ":::"
        ],
        "suffix": "\u0000",
        "pump": [
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?Updated: ([a-zA-Z]+ \\d\\d?, \\d\\d\\d\\d).*?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Updated: a 00, 0000"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "Updated: a 00, 0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[+-]?(\\d+([.]\\d+)?|[.]\\d+)([eE][+-]?\\d+)?[Li]?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#!/.+\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "!/",
        "pump": [
          "#!/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\S+)\\s*->\\s*(\\S+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "-a\t>",
        "pump": [
          "->a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^A-Za-z0-9_,() ]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\(([-\\d]+)\\)\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t(-\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":plurals\\/(\\S+):",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ls:\t:plural",
        "pump": [
          ":plurals/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<input([^<>]*)src\\s*=\\s*\"?([^\\\"'> ]*)\"?([^>]*)>\n    ",
    "inputs": [
      {
        "prefix": [
          "<inputasrc\t=\t",
          "a"
        ],
        "suffix": "csr<\"",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a<inputasrc\t=\t",
          "a"
        ],
        "suffix": "i",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*,\\s*|\\s*,?\\s*and\\s*",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "ann",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "aa",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":\\d{2}\\] \\S+ \\S+ ",
    "inputs": [
      {
        "prefix": [
          ":00] a"
        ],
        "suffix": ":",
        "pump": [
          " a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "0a\t:00] a:",
        "pump": [
          ":00] a",
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "base\\s+href\\=\\\"(.*?)(&\\#47\\;&\\#47\\;|\\/\\/)((.*?)\\.mail\\.live\\.com)",
    "inputs": [
      {
        "prefix": [
          "base\thref=\"a"
        ],
        "suffix": "mail",
        "pump": [
          "//a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ".li",
        "pump": [
          "base\thref=\"",
          "//a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "TypeError[\\s\\S]*Set.*Number 4",
    "inputs": [
      {
        "prefix": [
          "TypeErrora"
        ],
        "suffix": "y",
        "pump": [
          "Set"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "Err",
        "pump": [
          "TypeError",
          "Set"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/(.+?)(\\?.*)?$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/a",
          "?"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/a",
          "?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\W]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "data:image\\/[a-zA-Z]*;base64,[^\"]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "b\"data:image/da",
        "pump": [
          "data:image/;base64,"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\+|\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\/\\/ Options:\\s*(.+)$",
    "inputs": [
      {
        "prefix": [
          "// Options:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-?\\d+/\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0/",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^:]*)\\s*:\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<head(\\s[^>]*?|)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ead<ha",
        "pump": [
          "<head\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/series/\\d+/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/series/0/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Nserver:\\s+(.+)\\n",
    "inputs": [
      {
        "prefix": [
          "Nserver:\t"
        ],
        "suffix": "ea",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aNserver:\t"
        ],
        "suffix": "er",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^material-ui\\/svg-icons\\/.+\\/(.+)$",
    "inputs": [
      {
        "prefix": [
          "material-ui/svg-icons/a"
        ],
        "suffix": "a",
        "pump": [
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/*",
        "pump": [
          "/*#sourceURL=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+): '([^\\\\']*(?:\\\\'[^\\\\']*)*)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\\\$\\/\\n]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img.*?src=\\\"(.*?)\\\".*?\\/>",
    "inputs": [
      {
        "prefix": [
          "<imga",
          "a"
        ],
        "suffix": "<",
        "pump": [
          "src=\"",
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "i",
        "pump": [
          "<img",
          "src=\"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "EXT4-fs \\([^)]+\\): Delayed block allocation failed for inode \\d+ at logical offset \\d+ with max blocks \\d+ with (error \\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n): Delayed block allocatio",
        "pump": [
          "EXT4-fs (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[?inline\\s+(\\S+)\\s*(\\S.+)?\\s*\\]?$",
    "inputs": [
      {
        "prefix": [
          "[inline\ta",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "aa",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " EJECT_BEFORE_UNLOAD=(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " EJECT_BEFORE_UNLOAD="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\S+?)\\s*=\\s*(\\S+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "\ta\ta",
        "pump": [
          "=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^the \"(.*)\" header should contain \"(.*)\"$",
    "inputs": [
      {
        "prefix": [
          "the \"a"
        ],
        "suffix": "er",
        "pump": [
          "\" header should contain \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\d+\\.?\\d*)\\s+(\\d+\\.?\\d*)\\s+(\\d+\\.?\\d*)",
    "inputs": [
      {
        "prefix": [
          "0",
          "0\t0",
          "0\t0"
        ],
        "suffix": "0.\t.",
        "pump": [
          "0",
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\x20\\t\\n\\r\\f]+",
    "inputs": [
      {
        "prefix": [
          "\t\t"
        ],
        "suffix": "\u0000",
        "pump": [
          "0\t"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "\t0"
        ],
        "suffix": "\u0000",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+a",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0$",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[&@]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "&a",
        "pump": [
          "&"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "arn:aws:iam::(.+):role/(.+)",
    "inputs": [
      {
        "prefix": [
          "arn:aws:iam::a"
        ],
        "suffix": "a",
        "pump": [
          ":role/a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "arn:aws:iam::a",
          ":role/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^https:\\/\\/api-ssl\\.bitly\\.com\\/info\\?.*hash=3j4ir4.*31IqMl.*$",
    "inputs": [
      {
        "prefix": [
          "https://api-ssl.bitly.com/info?a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "hash=3j4ir4",
          "31IqMl"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "data\\:image\\/png;base64.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "data:image/png;base64"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/(\\w*?)\\/\\.\\.\\/(.*?)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".",
        "pump": [
          "//../"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^link having partial text \"(.*?)\" should\\s*((?:not)?)\\s+be present$",
    "inputs": [
      {
        "prefix": [
          "link having partial text \"a\" should\t"
        ],
        "suffix": " p",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s{1,3}[0-9]{1,2}\\.\\s.*?\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "00\n0",
        "pump": [
          "\t0.\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'(.*)' should be a git repo",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\* (.+) locale definition",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "* a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*replace$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "epl$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-+]?[0-9]*\\.?[0-9]+([E|e][0-9]+)?[d|D]",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "0",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "|0E",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*search=(.*?%29)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e%",
        "pump": [
          "search=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "signature from \"(.+)\"$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "r",
        "pump": [
          "signature from \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\s+(\\w+)\\s*___P\\s*\\(\\(([^\\)]*)\\)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "P\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Content-[Ll]ength:.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Content-Length:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Location:[\\040](.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Location: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Available commands:\\n *.* *\\n",
    "inputs": [
      {
        "prefix": [
          "Available commands:\n ",
          "a"
        ],
        "suffix": "mm",
        "pump": [
          "a",
          " "
        ]
      },
      {
        "prefix": [
          "aAvailable commands:\n ",
          "a"
        ],
        "suffix": "nd",
        "pump": [
          "a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<svg class=\"icon icon-gear icon-outline\"(.+?)><path(.+?)>",
    "inputs": [
      {
        "prefix": [
          "<svg class=\"icon icon-gear icon-outline\"a"
        ],
        "suffix": "c",
        "pump": [
          "><patha"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " cla",
        "pump": [
          "<svg class=\"icon icon-gear icon-outline\"a",
          "><patha"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<[\\w-]+[^>]*>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "<>>",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*/([^/]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9]+[:.,]?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d\\d\\d\\d-\\d\\d-\\d\\d\\D\\d\\d:\\d\\d:\\d\\d.*\\[.*\\]",
    "inputs": [
      {
        "prefix": [
          "0000-00-00a00:00:00a"
        ],
        "suffix": "0:00:0",
        "pump": [
          "["
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "0:][000",
        "pump": [
          "0000-00-00a00:00:00",
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "usage: [\\S]+ remote",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eus\tusa",
        "pump": [
          "usage: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "def test_should_(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ef\tdef test_",
        "pump": [
          "def test_should_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "OK.*Modifying user.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "oM",
        "pump": [
          "OK"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)/.*.m3u8$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/m3",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Sa",
        "pump": [
          "D"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<div class=\\\"row marketing\\\">)(.*)(</div><!-- row marketing -->)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "--",
        "pump": [
          "<div class=\"row marketing\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9.]+)\\s*([kKMGTPE]?)(i?)B?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<nowiki>(=+[^=]+=+)<\\/nowiki>(.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<nowiki>=a=</nowiki>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)&(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "&"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+\\\"\\w+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\\\s*@(\\\\w+)\\\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "\\s@\\w\\s"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^This.+?message.+?MIME format",
    "inputs": [
      {
        "prefix": [
          "Thisa"
        ],
        "suffix": "ag",
        "pump": [
          "messagea"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^:\\s/]+)(?::(\\d+))?(/.*?)?\\s*$",
    "inputs": [
      {
        "prefix": [
          "a:0/a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<head(\\s|\\S)*\\/head>)|(<body(\\s|\\S)*\\/body>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o/b",
        "pump": [
          "<head"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.(Test[^(\\n]+)\\(.*\\n.*_test\\.go",
    "inputs": [
      {
        "prefix": [
          ".Testa(a"
        ],
        "suffix": "T\n_t",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "a",
          "a(a"
        ],
        "suffix": "t\n_.Tes",
        "pump": [
          ".Testa",
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "trigger *\\d* */ *(\\d{9}|\\d{6}\\.\\d{3})",
    "inputs": [
      {
        "prefix": [
          "trigger "
        ],
        "suffix": "r ",
        "pump": [
          " "
        ]
      },
      {
        "prefix": [
          "atrigger "
        ],
        "suffix": "0/0000",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "error_string\\ +:\\ (.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "error_string : "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\?([^#]*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a#",
        "pump": [
          "?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "input.*value=\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "input"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z_]+)\\s=\\s\"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<wf([^>]+)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f",
        "pump": [
          "<wfa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "b_akzeptieren.gif\"\\s.*alt=\"akzeptieren\"\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "b_akzeptierenagif\"\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[[:alnum:]]*\\s*[^[:alnum:]]?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          ":a"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          ":"
        ],
        "suffix": "\u0000",
        "pump": [
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "base58Prefixes.SECRET_KEY.*0x(..).;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f",
        "pump": [
          "base58PrefixesaSECRET_KEY"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(\\d+\\.\\d+) <\\.\\.\\. [\\a-zA-Z\\d]+ resumed>(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t0.0 <... a"
        ],
        "suffix": "a",
        "pump": [
          " resumed>"
        ]
      },
      {
        "prefix": [
          "d\u0000d <\u0000\u0000\u0000 AA"
        ],
        "suffix": "",
        "pump": [
          "dA"
        ]
      },
      {
        "prefix": [
          "a",
          "\t0.0 <... a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          " resumed>"
        ]
      },
      {
        "prefix": [
          "d\u0000d <\u0000\u0000\u0000 AA"
        ],
        "suffix": "",
        "pump": [
          "dA"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^;=]*)=([^;=]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=;",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(var|function)\\s*(\\w+)([\\s\\S]*)$",
    "inputs": [
      {
        "prefix": [
          "\tvar\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+:Body",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zA-Z_0-9\\$\\-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000a",
        "pump": [
          "\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "VMware ESXi (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "VMware ESXi "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?\\d+),\\s*(-?\\d+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Key: (.*), Value: (.*)\\n?$",
    "inputs": [
      {
        "prefix": [
          "Key: a"
        ],
        "suffix": "a",
        "pump": [
          ", Value: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\p{L}]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/(?:\\w*)\\/(?:[0-9]+[-\\w]*)([^\\?]*)\\??.*",
    "inputs": [
      {
        "prefix": [
          "/a/0a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a/a/0a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(https?://.*?)&",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "https://"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(at|\\@).*?(\\w.*)",
    "inputs": [
      {
        "prefix": [
          "ata"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "at",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^>(.*)\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          ">a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "router-id ([^\\s]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er\trouter-",
        "pump": [
          "router-id a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/stats(?:(/.*))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/stats/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9\\.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".a",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[+-]?\\d+.\\d+",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "+",
        "pump": [
          "0",
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I call \"(.*?)\" with \"(.*?)\" on the target \"(.*?)\"$",
    "inputs": [
      {
        "prefix": [
          "I call \"a",
          "a"
        ],
        "suffix": "ge",
        "pump": [
          "\" with \"",
          "\" on the target \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\x20-\\x7E]+",
    "inputs": [
      {
        "prefix": [
          "07"
        ],
        "suffix": "\u0000",
        "pump": [
          "27"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "0E"
        ],
        "suffix": "\u0000",
        "pump": [
          "2E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[\\d\\s\\+\\-\\(]+[\\d\\.\\s\\+\\-\\*\\/\\%\\(\\)]*$",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "#",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "url\\s*\\(\\s*[^#\\s][^)]+?\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ur)aurl(",
        "pump": [
          "url(aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[(.*)\\] (.*)  @  (.*)  @@  (.*)$",
    "inputs": [
      {
        "prefix": [
          "[a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "] ",
          "  @  ",
          "  @@  "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a href=\"#([^\"]+?)\">(.+?)</a>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a</a",
        "pump": [
          "<a href=\"#a\">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<(.+)?\\>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<a",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<success>(.+)<\\/success>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u<succ",
        "pump": [
          "<success>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^:/]*[:/]([^/:]*/[^.]*)\\.git",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "g",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*no such compose.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "no such compose"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "no such compose"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<<[ \\t]*\\n?(.*)\\n?[ \\t]*>>$",
    "inputs": [
      {
        "prefix": [
          "<<\t",
          "a"
        ],
        "suffix": "<",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+) = (\\[|\\{)(.*)(\\]|\\})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " $a ",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\,?\\s*",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": ",,",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\n\\r\\t\\f]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(:\\/*[^\\/]*)[\\s\\S]*",
    "inputs": [
      {
        "prefix": [
          ":/a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+?)(n+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "n"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z\\d]+::)+version(::[a-z]+)?",
    "inputs": [
      {
        "prefix": [
          "a::d"
        ],
        "suffix": "",
        "pump": [
          "d::d"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": ":",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a::ad"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^.\\s]+)\\s*<\\-\\s*(.*[^.\\s])",
    "inputs": [
      {
        "prefix": [
          "a\t<-\t"
        ],
        "suffix": "-\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "conf.*?contacts.*?(\\{.*\\}).*?groups",
    "inputs": [
      {
        "prefix": [
          "confa",
          "a",
          "a"
        ],
        "suffix": "og",
        "pump": [
          "contacts",
          "{",
          "}"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\!Platform_description\\s*=\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "!Platform_description\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a!Platform_description\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[?&]hl=([^&]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h?&hl",
        "pump": [
          "&hl="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "500.*content-type.*Server error",
    "inputs": [
      {
        "prefix": [
          "500a"
        ],
        "suffix": " con",
        "pump": [
          "content-type"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "nt",
        "pump": [
          "500",
          "content-type"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "path.*must be.*string",
    "inputs": [
      {
        "prefix": [
          "patha"
        ],
        "suffix": "mus",
        "pump": [
          "must be"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " b",
        "pump": [
          "path",
          "must be"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"address\\\": \\\"(\\S+?)\\\".*\\\"value\\\": (\\d+)",
    "inputs": [
      {
        "prefix": [
          "\"address\": \"a"
        ],
        "suffix": "\"a",
        "pump": [
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "s\t\"addre",
        "pump": [
          "\"address\": \"a",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?$",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "0x[a-z0-9]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "x0$0",
        "pump": [
          "0xa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)([:,](\\d+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",0$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([.a-z0-9_-]+/([.a-z0-9_-]+)) *[@#]?([^/:\\?\\[\\\\]*)$",
    "inputs": [
      {
        "prefix": [
          "a/a "
        ],
        "suffix": "//",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<title[^>]*>(.+?)</title>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "it></titl",
        "pump": [
          "<title"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(em|i)>(.*?)<(\\/(em|i))>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e<i",
        "pump": [
          "<em>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n ET            :\\s(.*)\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ET  ",
        "pump": [
          "\n ET            :\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z_]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[+-]?\\d+\\.?\\d*%$",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\'\\\"]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\"a",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span[^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<",
        "pump": [
          "<span"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "a statement with no error handler failed:.*constraint failure",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d",
        "pump": [
          "a statement with no error handler failed:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "q to stop.*q to stop",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "toa",
        "pump": [
          "q to stop"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<([^>]+)\\/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</>a",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<user>.*</user>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e</us",
        "pump": [
          "<user>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(([^\\) ]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a (",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "it\\(\"aa playback\", async \\(\\) => {some setup codeawait.*other teardown code.*}\\);",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "users:\\(\\((.+)\\)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "users:((a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "from[ \\t]([^ ]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ofr f",
        "pump": [
          "from\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "leave (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "av\tle",
        "pump": [
          "leave a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "{\"folder\":.*,\"item\":.*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": ".*rollback completed.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "rollback completed"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "rollback completed"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s]*%[^\\n]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%aa%",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*\\*[\\w\\W]*'use strict';\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "/**"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https?\\:\\/\\/[^'\"\\s]*",
    "inputs": [
      {
        "prefix": [
          "http://\""
        ],
        "suffix": "'",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "tp\tht",
        "pump": [
          "https://"
        ]
      },
      {
        "prefix": [
          "http://\u0000"
        ],
        "suffix": "'",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([,;]|\\s)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(.+\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'(?:[^']|'')*'|\"(?:[^\"]|\"\")*\"",
    "inputs": [
      {
        "prefix": [
          "\"\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\"a\"'a",
        "pump": [
          "'"
        ]
      },
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\\\+|\\/+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\a",
        "pump": [
          "\\"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\(GCC\\)|g?cc \\([^)]+\\)) ([0-9.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cg",
        "pump": [
          "gcc (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]+)_\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ",,,,,,,,,,(.+?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ",,,,,,,,,,a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(rgb.*?0,.*?255.*?0|#00ff00)",
    "inputs": [
      {
        "prefix": [
          "rgba",
          "a"
        ],
        "suffix": "r",
        "pump": [
          "0,",
          "255"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "55",
        "pump": [
          "rgb",
          "0,",
          "255"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\"((?:\\\\\"|[^\"])*)\"\\^\\^<([^>]+)>",
    "inputs": [
      {
        "prefix": [
          "\"\\\""
        ],
        "suffix": "^",
        "pump": [
          "\"^^<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.authors *= *(.*) *",
    "inputs": [
      {
        "prefix": [
          "a.authors = ",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " "
        ]
      },
      {
        "prefix": [
          "a",
          "a.authors = ",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a.+?href=\"(.*?)\".?>",
    "inputs": [
      {
        "prefix": [
          "<aa"
        ],
        "suffix": "f\">hr",
        "pump": [
          "href=\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "r\">h<a",
        "pump": [
          "<aa",
          "href=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^WHERE\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "WHERE\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "diff(.*)/diff/file_a(.*)/diff/file_b",
    "inputs": [
      {
        "prefix": [
          "diffa"
        ],
        "suffix": "e",
        "pump": [
          "/diff/file_a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "e_",
        "pump": [
          "diff",
          "/diff/file_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([<>]) (\\S+) ([.0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "< a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*test-package-with-one-dep@0\\.0\\.0",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p@0",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\[.*0.*\\.\\.\\..*9.*\\]",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": ".",
        "pump": [
          "[",
          "0",
          "...",
          "9"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "[].",
        "pump": [
          "a",
          "[",
          "0",
          "...",
          "9"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^( |\\t)*if +.*: *$",
    "inputs": [
      {
        "prefix": [
          " if "
        ],
        "suffix": " a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+(?:\\.\\d+)?)([hms])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^browser window is resized to width \"(.*?)\" and height \"(.*?)\"$",
    "inputs": [
      {
        "prefix": [
          "browser window is resized to width \"a"
        ],
        "suffix": "h",
        "pump": [
          "\" and height \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*::[sg]et(_\\w+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ga$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.+(?:pl|bat|sh)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "applying.*?mongomatic.*?orm",
    "inputs": [
      {
        "prefix": [
          "applyinga"
        ],
        "suffix": "y",
        "pump": [
          "mongomatic"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ma",
        "pump": [
          "applying",
          "mongomatic"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)@(\\d+)x\\.(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@0x."
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "@0x."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "indices\\/.+\\?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea",
        "pump": [
          "indices/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<[/]?img.*>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "im",
        "pump": [
          "</img"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<dt>.*?<a href=\"([^\"]+)\">(.+)$",
    "inputs": [
      {
        "prefix": [
          "<dt>a"
        ],
        "suffix": "a",
        "pump": [
          "<a href=\"a\">a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<dt>",
          "<a href=\"a\">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"statusText\\\":\\\"(.*?)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "at",
        "pump": [
          "\"statusText\":\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Illegal title type.*Expected String, got Boolean",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " Bo",
        "pump": [
          "Illegal title type"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div.+>Thirty<\\/div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Th",
        "pump": [
          "<diva"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zA-Z0-9_x7f-xff]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "( at 0x[^>]+)|__main__\\.|basetest_test\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s> at 0",
        "pump": [
          " at 0xa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<a[^\\>]+href=\"http:\\/\\/alphalemon\\.com[^\\>]+\\>powered by alphalemon cms\\<\\/a\\>",
    "inputs": [
      {
        "prefix": [
          "<aa"
        ],
        "suffix": "po",
        "pump": [
          "href=\"http://alphalemon.coma"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "mo>powered by alphalemon cm",
        "pump": [
          "<aa",
          "href=\"http://alphalemon.coma"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<AccountNum>).+(</AccountNum>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tNu",
        "pump": [
          "<AccountNum>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([0-9a-f]+)[ ]*(?:;(.+)=(.+))?(?:\\r\\n|\\n)",
    "inputs": [
      {
        "prefix": [
          "a ;a"
        ],
        "suffix": ";",
        "pump": [
          "=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(var )?\\w+\\s*?=\\s*?function\\s*?\\(_(React\\$)?Component\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<FromUserName><!\\[CDATA\\[(.*)\\]\\]><\\/FromUserName>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m",
        "pump": [
          "<FromUserName><![CDATA["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S)[ \\t]+\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a ",
        "pump": [
          "a\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\*\\s*\\@([a-z0-9-_]+)\\s+(.*).*\\s+",
    "inputs": [
      {
        "prefix": [
          "\t*\t@a\t",
          "a",
          "a"
        ],
        "suffix": "@a",
        "pump": [
          "a",
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t*\t@a\t",
          "a",
          "a"
        ],
        "suffix": "\t*",
        "pump": [
          "\t",
          "a",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\s<]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)@",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'(.*?)':([d.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<([^!?][^\\s/>]*).*?>",
    "inputs": [
      {
        "prefix": [
          "<aa"
        ],
        "suffix": "<!",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "<!",
        "pump": [
          "<a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<pre.*?data-footer.*?>",
    "inputs": [
      {
        "prefix": [
          "<prea"
        ],
        "suffix": "ot",
        "pump": [
          "data-footer"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[\\-\\*]\\s+([^:]+):\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "*\t",
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([\\w:]+)\\s*[:=]+(.+)$",
    "inputs": [
      {
        "prefix": [
          "a",
          ":"
        ],
        "suffix": "a",
        "pump": [
          ":",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*tokenizer_object_spec.rb:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^o(?:pen)?\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "open\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)?:(\\d+)?-(\\d+)?\\s*(\\S+)?",
    "inputs": [
      {
        "prefix": [
          "a:0-0"
        ],
        "suffix": "a\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a:0-0"
        ],
        "suffix": "0\t:a\t:",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^data:.+\\,.+$",
    "inputs": [
      {
        "prefix": [
          "data:a"
        ],
        "suffix": "a",
        "pump": [
          ",a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*[a-z]+)pes$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "e$",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)[MI]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0Ia",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<H3>(.+?)<\\/H3>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<H3>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-\\d+(\\.\\d+)*)*",
    "inputs": [
      {
        "prefix": [
          "-d\u0000dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "-d\u0000dd"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-"
        ]
      },
      {
        "prefix": [
          "-dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "-d-dd"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*boundary\\s*=\\s*(.*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tboundary\t=\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[\\w.+\\](.*?)\\(\\w+\\:\\w+\\)$",
    "inputs": [
      {
        "prefix": [
          "[aa"
        ],
        "suffix": "a:",
        "pump": [
          "]"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ")([",
        "pump": [
          "[aa",
          "]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "packages[/\\\\]node_modules[/\\\\]\\S*?[/\\\\].*",
    "inputs": [
      {
        "prefix": [
          "packages/node_modules/a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "packages/node_modules/",
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.+\\?.+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "?a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((?:[0-9]*\\.){3}[0-9]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a.0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([-+]?\\d*\\.?\\d+)",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "0+",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<tbody\\s[^>\\r\\n]+)(\\s+<)",
    "inputs": [
      {
        "prefix": [
          "<tbody\ta"
        ],
        "suffix": "d",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "y\n\t<tb\n",
        "pump": [
          "<tbody\ta",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NoListbox\\=([^\\;]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t;NoListb",
        "pump": [
          "NoListbox=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([A-z]{3}[0-7]?\\s+\\(?\\s*)([^,\\s\\)]+)(\\s*[,xXyY\\s]*\\)?[,xXyY\\s]*)$",
    "inputs": [
      {
        "prefix": [
          "aaa0\t",
          "\ta\t",
          "\t"
        ],
        "suffix": "$\t0",
        "pump": [
          "\t",
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<tr>(.*?)<\\/tr>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<tr>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Included with Safari (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Included with Safari "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Current time.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Current time"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z_]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+A: android:process\\(0x01010011\\)=\"([^\"]+).*\"",
    "inputs": [
      {
        "prefix": [
          "\tA: android:process(0x01010011)=\"a"
        ],
        "suffix": "00",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\tA: android:process(0x01010011)=\"a"
        ],
        "suffix": "pr",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-+BEGIN RSA PRIVATE KEY-+\\n[^-]*\\n-+END RSA PRIVATE KEY-+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "I",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "social.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "social"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)_([\\d\\-\\+~,]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "client_env\\((.*)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "client_env("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "sns\\.(.+map)\\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "map",
        "pump": [
          "sns.a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *[c\\xA2]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^:*([^\\s]+) ([^\\s]+) \\[([0-9]+):([0-9]+)\\]$",
    "inputs": [
      {
        "prefix": [
          ":",
          "a"
        ],
        "suffix": "::",
        "pump": [
          "a",
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<br/>\\s*([^>]+)\\s*</*div",
    "inputs": [
      {
        "prefix": [
          "<br/>\t",
          "a"
        ],
        "suffix": "iv>",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a<br/>\t",
          "a"
        ],
        "suffix": "iv><br",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_(.+)\\.[^\\.]+\\.erb_spec\\.rb$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_.+.less",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "_",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\:]+\\:k",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "k::",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.pw-([^:]+):before\\s*[^\"]+\"\\\\([0-9a-f]+)\"",
    "inputs": [
      {
        "prefix": [
          ".pw-a:before\t"
        ],
        "suffix": "efor\"\\a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a:before\t"
        ],
        "suffix": "$",
        "pump": [
          ".pw-a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)/(.+?):(.+)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/a",
          ":a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/a",
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "refs/(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "refs/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https?://([^/]+)(.*)",
    "inputs": [
      {
        "prefix": [
          "https://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "ahttps://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'\\\\>(.*?)\\\\",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ">",
        "pump": [
          "'\\>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^,]+(,[^,]+)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",,",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\".*\"|'.*'|\\S+)\\s?(:|=>)\\s([^$]*)$",
    "inputs": [
      {
        "prefix": [
          "\"a"
        ],
        "suffix": "=$=",
        "pump": [
          "\":\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^ ]*):((((\\(.*\\))))|([^ ])*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "( ",
        "pump": [
          ":("
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "( ",
        "pump": [
          "a",
          ":("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?a",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "WARN .*? \\[controller\\.home\\] warn",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e] [",
        "pump": [
          "WARN "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(http://[^/ ]+(?:/[^/]+)*/)(\\.\\./.+)",
    "inputs": [
      {
        "prefix": [
          "http://a/a"
        ],
        "suffix": "a",
        "pump": [
          "a/../a"
        ]
      },
      {
        "prefix": [
          "ahttp://a/a"
        ],
        "suffix": "a",
        "pump": [
          "a/../a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+)[ \\t]*\\n=+[ \\t]*\\n+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z0-9\\_]+)\\s*\\=\\s*[\\\"]{1}([^\\\"]+)[\\\"]{1}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a=$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(http:\\/\\/www.baidu.com\\/link\\?[\\w=-]+?)\"\\s*target=\"_blank\"\\s*>(.*?)<\\/a>\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nk\"ta",
        "pump": [
          "http://wwwabaiduacom/link?a\"target=\"_blank\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%(\\S+)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%a",
        "pump": [
          "%a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+(\\.\\d+)?)|(\\d*\\.\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[([^\\\\\\[]+?)\\]\\((http.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "t",
        "pump": [
          "](http"
        ]
      },
      {
        "prefix": [
          "a[a"
        ],
        "suffix": "](ht",
        "pump": [
          "](http"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/\\*\\*.*?\\*/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/*a",
        "pump": [
          "/**"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9-]+?)=\\\"([^\\\"]+)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<pre data-preload=\"([^\"]+)\".*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<pre data-preload=\"a\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<table class=\"ordersReportSummary\">.*?</table>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mar",
        "pump": [
          "<table class=\"ordersReportSummary\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*'.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "'"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__version__\\s=\\s'(.*)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "__version__\t=\t'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\s*@CFLintIgnore\\s+([\\w,_]+)\\s*.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t@CFLintIgnore\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\t@CFLintIgnore\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "identical[^\\s]+  doc/images/nslogo\\.gif",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "oi ",
        "pump": [
          "identicala"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "protobuf.rb.*warning: private attribute",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":",
        "pump": [
          "protobufarb"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.usage\\(\\) description must start with \\$0.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".usage() description must start with $0"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ".usage() description must start with $0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "##fileformat=VCFv(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "##fileformat=VCFva"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\}\\]]?\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "The PHAR failed the verification: .+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "The PHAR failed the verification: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*render_picture_gallery_editor.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "render_picture_gallery_editor"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "render_picture_gallery_editor"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http://.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "http://"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*color.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "color"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "color"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "const { replaceVars } = require\\(.*;",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*OutputSandbox\\s+\\=\\s+\\{(.*)\\}\\s?\\]?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ndO",
        "pump": [
          "OutputSandbox\t=\t{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/download.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/download"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "META-INF\\/services\\/\\S[^\\/]*\\.*",
    "inputs": [
      {
        "prefix": [
          "META-INF/services/aa"
        ],
        "suffix": "F/s",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "aMETA-INF/services/aa"
        ],
        "suffix": "F/ME",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ngInjectableDef.*return ..\\.inject\\(Existing\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "ngInjectableDef"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^!m\\s+(\\S+)(?:\\s+(.+))?",
    "inputs": [
      {
        "prefix": [
          "!m\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\x20-\\x7E]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000a",
        "pump": [
          "\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\|string$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ga",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^(]+)\\((\\d+(\\.\\d+)?)\\/(\\d+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")(",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "text-align:(.+?)[; \"]{1,1}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "text-align:a"
        ]
      },
      {
        "prefix": [
          "text-align:a"
        ],
        "suffix": "ig",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t,;]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "< *br */? *>",
    "inputs": [
      {
        "prefix": [
          "< br "
        ],
        "suffix": "<",
        "pump": [
          " "
        ]
      },
      {
        "prefix": [
          "a< br "
        ],
        "suffix": " b",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*Also in HD[\\.\\s]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<pre>)|(<\\/pre>)|(<h[\\d+]>)|(<\\/h[\\d+]>)|\\{@link\\s+([^}\\s]+)(?:\\s+([^\\}]*))?\\}|((?:\\r\\n|\\r|\\n)[ \\t]*(?:\\r\\n|\\r|\\n))",
    "inputs": [
      {
        "prefix": [
          "{@link\ta\t"
        ],
        "suffix": "\r\na",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "{@link\ta\t"
        ],
        "suffix": "<h",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\@TOPBOTTOMLINKS\\s*=\\s*(.*?[^\\\\]);",
    "inputs": [
      {
        "prefix": [
          "@TOPBOTTOMLINKS\t=\t"
        ],
        "suffix": "=",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a@TOPBOTTOMLINKS\t=\t"
        ],
        "suffix": "P@T",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><S>[^< ]+<\\/S> (?:<V[^>]*>at\\x{e1}(?:i[dm]|imid|thar)?<\\/V>)<\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "S> <",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "a.*c",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^FULLTEXT INDEX(.*)\\((.*)\\)",
    "inputs": [
      {
        "prefix": [
          "FULLTEXT INDEXa"
        ],
        "suffix": "E",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Powered by <a href=(\"|')[^>]+PrestaShop",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " h",
        "pump": [
          "Powered by <a href='a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Child.*Exiting",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "Child"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)[[\\s*{}\\[\\]#~@'`!\\\"?$?%^&*()_\\-+=\\/\\?.,<>|\\\\?|:;]](.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)testerror(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "testerror"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "testerror"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Skype/(.*)@(.*)",
    "inputs": [
      {
        "prefix": [
          "Skype/a"
        ],
        "suffix": "a",
        "pump": [
          "@"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Skype/",
          "@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(:\\w+:\\S+:`.+?`|:\\S+:`.+?`|`.+?`)",
    "inputs": [
      {
        "prefix": [
          ":a:a"
        ],
        "suffix": ":a",
        "pump": [
          ":`a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w']*u[\\w']*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "u"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a",
          "u"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "didFinishLaunching[^\\n]+?\\{",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "id",
        "pump": [
          "didFinishLaunchinga"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(&lt;|<)\\s*style.*?(&gt;|>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "<style"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#[^:]+:([^#]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#:#:",
        "pump": [
          "#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[a-z][a-zA-Z0-9_]*|'[^\\n']*[^\\\\]')",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\\",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^unix:(.*.sock)(/.*)$",
    "inputs": [
      {
        "prefix": [
          "unix:a"
        ],
        "suffix": "a",
        "pump": [
          "asock/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+): (\\w+) \\((\\d+)\\) \\/honey",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ho a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+\\@",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "@a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<code.*?>.*?<\\/code>)",
    "inputs": [
      {
        "prefix": [
          "<codea"
        ],
        "suffix": "e",
        "pump": [
          ">"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "e",
        "pump": [
          "<code",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z]+:+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "'exceptions\\.(.+)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "'exceptions.a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.m2.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m2",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<b>(?:\\s*)(.*?)(\\s*)?<\\/b>",
    "inputs": [
      {
        "prefix": [
          "<b>\t",
          "a"
        ],
        "suffix": "b<",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a<b>\t",
          "a"
        ],
        "suffix": "a<",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "test-testing-dummy.*missing",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "este",
        "pump": [
          "test-testing-dummy"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "2016-08-03.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "2016-08-03"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?::root\\s*{\\s*[^}]*})",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\.bytes\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          ".bytes\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/upload_presets$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[\\+\\-]?((\\.\\d+)|(\\d+\\.?\\d*))([eE][+-]?\\d+)?[fFdD]?$",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)@(\\w+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "@$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "</SUBJECT>(.*?)<QUOTE PREVIOUSPOST=",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "EV",
        "pump": [
          "</SUBJECT>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*[ml])ouse$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "usl",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Mozilla\\/5\\.0 \\(Windows NT.+?Trident.+?; rv:\\d\\d\\.\\d+\\)",
    "inputs": [
      {
        "prefix": [
          "Mozilla/5.0 (Windows NTa"
        ],
        "suffix": ".",
        "pump": [
          "Tridenta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[.*?\\][ \\t]*\\[.*?\\]",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "][",
        "pump": [
          "]["
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "]\t",
        "pump": [
          "[",
          "]["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/(#|@)\\s(sourceURL|sourceMappingURL)=\\s*(\\S*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "//#\tsourceURL=\t"
        ],
        "suffix": "#\tsou",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a//#\tsourceURL=\t"
        ],
        "suffix": "#\tsourceMapping",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*Usage:\\s*(.*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tUsage:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(?:!(?:--[\\s\\S]*?--\\s*)?(>))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "!",
        "pump": [
          "<!--"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(src=)(https?:\\/\\/video\\.google\\.com\\/googleplayer\\.swf\\?docid=)([0-9-]*)(&hl=[a-zA-Z]{2})(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "src=https://video.google.com/googleplayer.swf?docid=&hl=aaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\\\\{([\\s\\S]*?)\\\\\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}\\{",
        "pump": [
          "\\{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\s+(seed|example|test|scenario|step)s?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ex",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<p class=\"wordGroup\">(.*?)</p>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d</p",
        "pump": [
          "<p class=\"wordGroup\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^\\(\\s]+)(?:\\s*\\(\\s*([\\W\\w]+)\\s*\\))?",
    "inputs": [
      {
        "prefix": [
          "a\t(\t",
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Click to enter .+ title",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "Click to enter a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+ga\\(\"create\",\"TEST\",\"auto\"\\);.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "ga(\"create\",\"TEST\",\"auto\");a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "ga(\"create\",\"TEST\",\"auto\");a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?\\d+)/(\\d+)(?:/(-?\\d+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a0/",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?\\[(.*)\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "[",
        "pump": [
          "["
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "a",
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)AdminController$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Con",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "expected \\\"this is the text for this action\\\", got .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "expected \"this is the text for this action\", got "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^0-9%]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^@ ]*)@([^: ]*):([^ ]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " @",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*metadata$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ftp\\:\\/\\/(.*)\\:(.*)\\@([^\\/]*)(.*)",
    "inputs": [
      {
        "prefix": [
          "ftp://a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":",
          "@",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "ftp://",
          ":",
          "@",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Could not pull castle_repo, expected .* to exist and contain dotfiles",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ", e",
        "pump": [
          "Could not pull castle_repo, expected "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)serves$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "erv",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(.+?)\\]\\(\\S+\\)",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "[",
        "pump": [
          "](a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "[a",
          "](a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "User (.*)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "U",
        "pump": [
          "User "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+(\\.\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*.less$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ela",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\s+|\\s?=\\s?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%{\\S+?}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "<!--(.*)--\\>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "!<a",
        "pump": [
          "<!--"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(https?://[^;\"&]+/tumblr_[^;\"]+_\\d+\\.jpg)",
    "inputs": [
      {
        "prefix": [
          "https://a"
        ],
        "suffix": "u",
        "pump": [
          "/tumblr_a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "uhtt",
        "pump": [
          "https://a",
          "/tumblr_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w-]+)\\s+([a-zA-Z])\\s+(\\d+)\\s+(\\d+)\\s+\"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(_[\\w\\']+|[a-z][\\w\\']*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "'$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<[^->\\n][^>\\n]+>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<(\\w+|!\\[CDATA\\[)(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "![C",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_.+_initial$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "in",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "id/(.+?)</link>\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "la",
        "pump": [
          "id/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*LOG\\:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "LOG",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<dt>By:</dt>\\s*<dd>\\s*<[ai][^>]*>(.+?)</[ai]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Ba",
        "pump": [
          "<dt>By:</dt><dd><a>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\'\\\"]*\\]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d\\d_\\S+\\.cf$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cf0",
        "pump": [
          "00_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "COMMANDS.*\\n.*help.*show help",
    "inputs": [
      {
        "prefix": [
          "COMMANDSa",
          "a"
        ],
        "suffix": "how",
        "pump": [
          "\n",
          "help"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "MM",
        "pump": [
          "COMMANDS",
          "\n",
          "help"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\\\*)`",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "\\"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(X+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Xa",
        "pump": [
          "X"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\s+Bit\\s+Units",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Uni",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\d+)([A-Z%]+)(\\d*)(.*)$",
    "inputs": [
      {
        "prefix": [
          "0%0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^\\<]*)(\\<([^\\>]*)\\>)?(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "request_id.+<html>some_result<\\/html>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "me",
        "pump": [
          "request_ida"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((?:\\w+\\.){3}\\w+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a.a.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "int main \\(\\) {.*?}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "([^#]*)(?:#(.*))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w\\d.-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+)=(\\S+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "SUBSUBSECTION: (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "SUBSUBSECTION: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<dc:date.*?>.*?</dc:date>",
    "inputs": [
      {
        "prefix": [
          "<dc:datea"
        ],
        "suffix": "<dc:d",
        "pump": [
          ">"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "at<dc:dat",
        "pump": [
          "<dc:date",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s:]+[\\s]*",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "#",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\s\\):;,]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DISCARD ALL .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "DISCARD ALL "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{sentence\\}(.+?)\\{\\/sentence\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t{se",
        "pump": [
          "{sentence}a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "assets\\/(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "assets/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.[A-Z].*Test",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eaT",
        "pump": [
          ".A"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a",
          ".A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "session\\.([\\w.\\d_]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s$se",
        "pump": [
          "session.a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span[^>]+></span>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ana<sp",
        "pump": [
          "<spana"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*def_API.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "def_API"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "def_API"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(bufferoverflow.*?\\.lib)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f",
        "pump": [
          "bufferoverflow"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*_test\\.rb",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^IsFixedPitch\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "IsFixedPitch\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)?\\s*(?:\\((.*)\\))?\\s*(#.*)?$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t(a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          ")#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([.!?]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "!a",
        "pump": [
          "!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "href=\"(.*)\">click here",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c",
        "pump": [
          "href=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(script|iframe|frame|audio|video|object)\\s*[\\s\\S]*?>[\\s\\S]*?<\\/(script|iframe|frame|audio|video|object)>",
    "inputs": [
      {
        "prefix": [
          "<script\t",
          "a"
        ],
        "suffix": "d",
        "pump": [
          "a",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http://.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "http://a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w+)\\s*:\\s*([\\w\\.]+)(\\s+at\\s+([^']+))?(\\s+as\\s+'(.+)')?\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta\t:\ta\tat\t",
          "a"
        ],
        "suffix": "at'a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "```(js|html|css|shell)([\\s\\S]*)```",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "`sh",
        "pump": [
          "```js"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\/\n",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s]+<(tr|td|th|ul|ol|li|dl|dt|dd|br)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^RUBY_EXTCONF_H[ \\t]*=[ \\t]*(\\S+)",
    "inputs": [
      {
        "prefix": [
          "RUBY_EXTCONF_H\t=\t"
        ],
        "suffix": " \t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s+)(\\e\\[\\d[^m]*?m)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u001b",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "msie\\s([\\d\\.]+[\\d])|trident\\/\\d+\\.\\d+;.*[rv:]+(\\d+\\.\\d)",
    "inputs": [
      {
        "prefix": [
          "trident/0.0;a"
        ],
        "suffix": "tri",
        "pump": [
          ":"
        ]
      },
      {
        "prefix": [
          "trident/0.0;a"
        ],
        "suffix": "t/0",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^@header\\s+([\\w\\.]+(\\[\\s*\\])?)\\s*?(.*)$",
    "inputs": [
      {
        "prefix": [
          "@header\ta[\t]\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.(png|jpe?g|gif|svg|js|css)(\\?.*)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".svg?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{common\\.([^}\\(]*)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "on",
        "pump": [
          "{common."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*\\!important)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(listening at port) .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "listening at port "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)/(mw-)?config.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/config"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " ([^/\\s]*) $",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \t",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$(.*?\\S)\\$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$\t",
        "pump": [
          "$a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+ succeeded), 0 failed",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ee",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#define SAMBA_VERSION_STRING \"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "IN",
        "pump": [
          "#define SAMBA_VERSION_STRING \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*self.recruiter = (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+\\.?\\w+)\\s+(=|!=|LIKE|IN)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "IKa.a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^cn=.*ou=.*o=.*",
    "inputs": [
      {
        "prefix": [
          "cn=a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "ou=",
          "o="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*[,\\s]\\s*",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": ",,",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\n\\r ]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[enum|set]\\((.+?)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(",
        "pump": [
          "e(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([\\w\\.\\-\\_]+)\\s*=\\s*(.*?)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta\t=\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Touch; WPDesktop;\\s*([^;\\)]*)(?:;\\s*([^;\\)]*))?(?:;\\s*([^;\\)]*))?\\)",
    "inputs": [
      {
        "prefix": [
          "Touch; WPDesktop;\t",
          "a;\t",
          "a;\t"
        ],
        "suffix": "kto",
        "pump": [
          "a",
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "aTouch; WPDesktop;\t",
          "a;\t",
          "a;\t"
        ],
        "suffix": "h;T;Tou",
        "pump": [
          "a",
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<key>Total Time</key><integer>(.*?)</integer>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "><intege",
        "pump": [
          "<key>Total Time</key><integer>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "initializing cache.*reusing cache",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "initializing cache"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https:\\/\\/developers.podio.com\\/doc\\/(.+)-([0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "https://developersapodioacom/doc/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "RS\\s+([^\\n]+)",
    "inputs": [
      {
        "prefix": [
          "RS\t"
        ],
        "suffix": "S\t\na\n",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aRS\t"
        ],
        "suffix": "S\t\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-・]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Permanently Redirected to \\[(.*)\\?.*\\]",
    "inputs": [
      {
        "prefix": [
          "Permanently Redirected to [a"
        ],
        "suffix": "n",
        "pump": [
          "?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\s+COURT$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "CO\t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "UR",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)\\s*<-",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<$a\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img[^>]+data-thumb=\"(.*?)\"[^>]*",
    "inputs": [
      {
        "prefix": [
          "<imga",
          "a"
        ],
        "suffix": "h>",
        "pump": [
          "data-thumb=\"",
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "h><img<ida",
        "pump": [
          "<imga",
          "data-thumb=\"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<b>Local Forecast for (.*?)<\\/b>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "st",
        "pump": [
          "<b>Local Forecast for "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "p xmlns[^>]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mln>p ",
        "pump": [
          "p xmlns"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "audio/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "audio/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<strong>(.+?)\\</strong>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<strong>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\S+)\\s+(\\S+.*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta\ta",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "TRANSCODER_PATH:(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "TRANSCODER_PATH:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$link-color: .* !default;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-c",
        "pump": [
          "$link-color: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(.*?)\\]\\^\\[(.*?)\\]",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "]a",
        "pump": [
          "]^["
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "][",
        "pump": [
          "[",
          "]^["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:~)([^;]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ";",
        "pump": [
          "~"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[(.?)\\]\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "[a]\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<li>)(\\s*)(<a .+)(\\s*)(<\\/li>)",
    "inputs": [
      {
        "prefix": [
          "<li>\t<a a"
        ],
        "suffix": "l",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "</l",
        "pump": [
          "<li><a a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$bundles = array\\((.*)\\);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a)",
        "pump": [
          "$bundles = array("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s\\n\\r]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*js[hl]int.*?\\*\\/\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "in",
        "pump": [
          "/*jshint"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^gdome_(\\w+)_(.+)",
    "inputs": [
      {
        "prefix": [
          "gdome_a"
        ],
        "suffix": "a",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\d-]+)\\s*T?\\s*([\\d:]+)",
    "inputs": [
      {
        "prefix": [
          "-\t"
        ],
        "suffix": "-0\t0\t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "-\t"
        ],
        "suffix": "-T0\t",
        "pump": [
          "-",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?--)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a-",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Z]*[a-z0-9]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#<Concurrent::Atom.+value:7",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ent::",
        "pump": [
          "#<Concurrent::Atoma"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*/x-empty",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*<(.*)>(.*)",
    "inputs": [
      {
        "prefix": [
          "\t<a"
        ],
        "suffix": "a",
        "pump": [
          ">"
        ]
      },
      {
        "prefix": [
          "a",
          "\t<a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DEBUG.+Response from https:.+ was 200",
    "inputs": [
      {
        "prefix": [
          "DEBUGa"
        ],
        "suffix": "U",
        "pump": [
          "Response from https:a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "p",
        "pump": [
          "DEBUGa",
          "Response from https:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*[\\{\\[].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(_+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^./]+[-_])?thumb[^.]*\\.(gif|jpg|png)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p.",
        "pump": [
          "-thumb"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "h",
        "pump": [
          "a",
          "-thumb"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s+)(\\/[^:\\s]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(get|is)[A-Z][a-zA-Z0-9]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ei$",
        "pump": [
          "getAa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "groupId=\"?([^&]+)\"?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Idgr&groupId",
        "pump": [
          "groupId=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Could not find partial 'does-not-exist' in any of .*fixture_dir[^/]*/partials:.*/partials",
    "inputs": [
      {
        "prefix": [
          "Could not find partial 'does-not-exist' in any of a"
        ],
        "suffix": "e_",
        "pump": [
          "fixture_dir"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\.\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([-+]?\\d+\\.?\\d*)",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "0+",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(\\/*)(\\w+)([^>]*)>",
    "inputs": [
      {
        "prefix": [
          "</a"
        ],
        "suffix": "/a>>",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a</a"
        ],
        "suffix": "/$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z_]\\w*(\\.[a-zA-Z_]\\w*)+",
    "inputs": [
      {
        "prefix": [
          "A\u0000A\u0000Aw"
        ],
        "suffix": "\u0000",
        "pump": [
          "www"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "A\u0000A\u0000Aw"
        ],
        "suffix": "\u0000",
        "pump": [
          "www"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\?js~([\\s\\S]+?)\\?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "<?js~a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\-\\.]+@(\\w[\\w\\-]+\\.)+[\\w\\-]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a@a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "someone@(.*).com",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea",
        "pump": [
          "someone@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)CALL[.]([a-zA-Z_][a-zA-Z0-9_]*(?:[.][a-zA-Z_][a-zA-Z0-9_]*)*)[(]([^()]+)[)]\\s*?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "L.",
        "pump": [
          "CALL.a."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/slackin\\.js.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/slackin.js"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\r?\\n\\s+local \\[command\\].*\\r?\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cal",
        "pump": [
          "\r\n\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "lrf:\\/\\/spectator [0-9a-zA-Z.:]+ (.*) ([0-9]+) ([A-Z0-9]+) [0-9\\.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "to",
        "pump": [
          "lrf://spectator a "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\e[^a-z]*?[a-z]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aa",
        "pump": [
          "\u001b"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*(\\w\\:.*?)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I set (.*) header to (.*)$",
    "inputs": [
      {
        "prefix": [
          "I set a"
        ],
        "suffix": "a",
        "pump": [
          " header to "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*?\\(\\[(.*)\\]\\)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]",
        "pump": [
          "(["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(-?\\d+)?(\\.\\.)?(-?\\d+)?([>V<])?$",
    "inputs": [
      {
        "prefix": [
          "-0"
        ],
        "suffix": "<.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)((?:\\:\\d+)+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "SELECT.*\\{.*\\}.*",
    "inputs": [
      {
        "prefix": [
          "SELECTa",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "{",
          "}"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "SELECT",
          "{",
          "}"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n+([^\\n\\S]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "p",
        "pump": [
          "@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@(.+)-(debug|inspectorServer)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "@a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w]+@example.com",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*xmlns=",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mln",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "a",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Location:\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "Location:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aLocation:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^\\s;]+)\\s*(?:\\((.+?)\\))?(?:; (.*))?;*?$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "(a",
          "); ",
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)(\\[(.*?)\\])?(\\{(.*?)\\})?$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[",
          "]{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[.*?\\]|\\(.*?\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")[",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "  Parameters:\\s+(\\{.*\\})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er",
        "pump": [
          "  Parameters:\t{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)\\.t$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ta.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\.]+)\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a..",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*/cbb/players/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(_)?.+(a)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "_",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)=\"(.*[^\\\\])\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=\"a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\/(\\d+)\\/(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/0/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/0/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.git",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\"'\\#\\\\]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\"",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{\\{\\s*([^{}]+?)\\s*\\}\\}",
    "inputs": [
      {
        "prefix": [
          "{{\t",
          "a"
        ],
        "suffix": "{\t{",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a{{\t",
          "a"
        ],
        "suffix": "{\t}",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "dvdbackup (.)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "dvdbackup "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-\\+]?\\d+(\\.)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0+",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/resources\\/image\\/tags\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Windows(.*)arm(.*)Tablet PC",
    "inputs": [
      {
        "prefix": [
          "Windowsa"
        ],
        "suffix": "$",
        "pump": [
          "arm"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " P",
        "pump": [
          "Windows",
          "arm"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[ \\\"].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)uses$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[^@]*[a-z0-9][^@]*@[^@]*[a-z0-9][^@]*$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a@a"
        ],
        "suffix": "@@",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(?:--(.*)|{(.*)}|U\\+([\\dA-F]{4}))\\s*$",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[ALERT\\] Alert @ .* Finish update deployment for 'simple'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "AL",
        "pump": [
          "[ALERT] Alert @ "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"result\":\"(\\/.*\\/)\\d+\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\"r\"",
        "pump": [
          "\"result\":\"/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(-?\\d*(?:\\.?\\d+))\\^(-?\\d*(?:\\.?\\d+))$",
    "inputs": [
      {
        "prefix": [
          "-0",
          "0^-0"
        ],
        "suffix": "-0^^",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Content-Type:\\s*(image\\/|application\\/octet-stream).*name=\\\"*(.*)(\\.[^\\\"\\r\\n]*)\\\"*",
    "inputs": [
      {
        "prefix": [
          "Content-Type:\timage/aname=\"",
          "a"
        ],
        "suffix": "\na",
        "pump": [
          "a",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^0-9A-Za-z_]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]+\\n|\\s+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\..*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[?.*@.*\\]?[\\$#]\\s",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "a",
        "pump": [
          "@"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a",
          "@"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w\\.\\-\\:\\/]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\r\\n]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "sha256-([^ ]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a sh",
        "pump": [
          "sha256-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ *DEFINE_(\\w+)\\(([^,]+), *([^,]+), *(\"[^\"]+\" *)+\\)",
    "inputs": [
      {
        "prefix": [
          " DEFINE_a(a, "
        ],
        "suffix": " \"",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(gnueabihf|armhf).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "armhf"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "armhf"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w+)\\s*:\\s*(.+)",
    "inputs": [
      {
        "prefix": [
          "\ta\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[ \\t]*ErrorLog[ \\t]+(.+)[ \\t]*$",
    "inputs": [
      {
        "prefix": [
          "\tErrorLog\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d*:\\d*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^MIDI\\s+(\\w+).*",
    "inputs": [
      {
        "prefix": [
          "MIDI\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "VC-(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "VC-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^group_(.*_.*)",
    "inputs": [
      {
        "prefix": [
          "group_a"
        ],
        "suffix": "a",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*)version ('|\")(\\S*)('|\")([\\s\\S]*)",
    "inputs": [
      {
        "prefix": [
          "\tversion 'a"
        ],
        "suffix": "a",
        "pump": [
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "\tversion 'a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--dataprovider=(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "--dataprovider="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<FONT.+?>(.*?)</FONT>.*?$",
    "inputs": [
      {
        "prefix": [
          "<FONTa",
          "a"
        ],
        "suffix": "a",
        "pump": [
          ">",
          "</FONT>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[CQ:.*?]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Q",
        "pump": [
          "[CQ:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*'PREREQ_PM'\\s*=>([^}]*}).*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "'PREREQ_PM'=>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([\\w\\-\\d]+)\\s?([<=>]+)\\s?(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a\t<"
        ],
        "suffix": "<\t\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^cd\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "cd\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "url\\((?:'|\")?([^\\)'\"]*)(?:'|\")?\\)",
    "inputs": [
      {
        "prefix": [
          "url\""
        ],
        "suffix": ")",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "ur\"",
        "pump": [
          "url(a"
        ]
      },
      {
        "prefix": [
          "url\u0000"
        ],
        "suffix": ")",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Repository Root: ([^\\s]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s\tRepo",
        "pump": [
          "Repository Root: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "reg.*\\s+",
    "inputs": [
      {
        "prefix": [
          "rega"
        ],
        "suffix": "e",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "eg",
        "pump": [
          "reg",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "tbi_1000.*_2$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "tbi_1000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\n\\r\\t,\\!`\\(\\)\\[\\]:;\\\"\\?\\/\\\\\\<\\+\\=>]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Revision: (.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Revision: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)_(\\d+)_(\\d+)_(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_0_0_a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "_0_0_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Handlebars\\.template\\(function\\s*\\(.*?\\)\\s*\\{.*\\}\\);",
    "inputs": [
      {
        "prefix": [
          "Handlebars.template(function\t(a"
        ],
        "suffix": "at",
        "pump": [
          "){"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ar)",
        "pump": [
          "Handlebars.template(function(",
          "){"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "github\\.com[:/]([^/]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ub/",
        "pump": [
          "github.com/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"([^\\\"]+)\\\": ([^,]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",\": ",
        "pump": [
          "\"a\": a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+as",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aa",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^METHOD .*#test_app_frame\\(\\) in file .*test-app-frame.rb at line \\d+",
    "inputs": [
      {
        "prefix": [
          "METHOD a"
        ],
        "suffix": "-fra",
        "pump": [
          "#test_app_frame() in file "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "&lt;span class=&quot;remove&quot;&gt;(.+?)&lt;/span&gt;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ";sp",
        "pump": [
          "&lt;span class=&quot;remove&quot;&gt;a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[a-zA-Z0-9].*[^a-zA-Z0-9])|(?:[^a-zA-Z0-9].*[a-zA-Z0-9])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "CREATE +INDEX .* ON .* \\(.*\\) TABLESPACE bogus",
    "inputs": [
      {
        "prefix": [
          "CREATE INDEX a",
          "a"
        ],
        "suffix": "C",
        "pump": [
          " ON ",
          " ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><V cop=\"y\">[Mm]\\x{e1}s<\\/V> <A pl=\"n\" gnt=\"n\">[Dd]h\\x{e1}<\\/A><\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "> <A pl=\"n",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+)\\t+(.*)",
    "inputs": [
      {
        "prefix": [
          "a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[\\/\\\\](\\w+)Controller\\.php$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ol",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Mozilla\\/5.0.*?rv:(\\d+).*? Gecko",
    "inputs": [
      {
        "prefix": [
          "Mozilla/5a0arv:0"
        ],
        "suffix": "5r",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "arv:0"
        ],
        "suffix": "z0M rv",
        "pump": [
          "Mozilla/5a0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Document weights:\\n((?:.)*?)\\n+",
    "inputs": [
      {
        "prefix": [
          "Document weights:\na"
        ],
        "suffix": " w",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "c",
        "pump": [
          "Document weights:\n",
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":global\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          ":global("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "; *(Advent )?(Vega(?:Bean|Comb)?).* Build",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "en",
        "pump": [
          ";Vegaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(.*?:)?(.*?)>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "<:",
        "pump": [
          ":"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "<",
        "pump": [
          "<a",
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--openssl-dir=(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "--openssl-dir=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "=.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<svg[^>]*(length|width)=",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "idt",
        "pump": [
          "<svg"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+\\()\\s*([^;)]*?)\\s*\\)(.*)",
    "inputs": [
      {
        "prefix": [
          "a(\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a(\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\s+(\\(\\s*(.+)\\s*\\))",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t(\t",
          "a"
        ],
        "suffix": "(a",
        "pump": [
          "\t",
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\t(\t",
          "a"
        ],
        "suffix": "(\t",
        "pump": [
          "a",
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I long tap on element having (.+) \"(.*?)\" for \"(.*?)\" sec$",
    "inputs": [
      {
        "prefix": [
          "I long tap on element having a",
          "a"
        ],
        "suffix": "ele",
        "pump": [
          " \"",
          "\" for \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s([\\w-]+)=(\\\".*?\\\"|'.*?')",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\"a",
        "pump": [
          "\ta=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-:.]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<!(?:begin|end>):.+?>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "!e",
        "pump": [
          "<!begin:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+):\\s+(.+)?$",
    "inputs": [
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "name=\\\"(.*)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "name=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "> <PUBCHEM_.+_NAME>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ME",
        "pump": [
          "> <PUBCHEM_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^ ]*) *!(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[/|\\\\][^/\\\\]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^sequence (\\d+) has (\\w.*?) :(\\S+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "sequence 0 has aa"
        ],
        "suffix": "en\ta ",
        "pump": [
          " :a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "attach:(.*)\\.(.*)",
    "inputs": [
      {
        "prefix": [
          "attach:a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "attach:",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w]+)\\.extinfo\\ .*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "alias\\.([a-zA-Z0-9\\-_]+)\\=(.)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "alias.a="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "src\\/.*\\.js$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "src/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I should see the (.*) of user number (.*)$",
    "inputs": [
      {
        "prefix": [
          "I should see the a"
        ],
        "suffix": "a",
        "pump": [
          " of user number "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\((.*):\\d+\\).*$",
    "inputs": [
      {
        "prefix": [
          "(a"
        ],
        "suffix": "a",
        "pump": [
          ":0)"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "(",
          ":0)"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^-_a-zA-Z0-9]+(.?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$aa",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+of\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "returning value for mod_a::b.*returning value for mod_a::b",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " fore",
        "pump": [
          "returning value for mod_a::b"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\[]+\\[(\\d+)\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$100,000-.+?>&nbsp;([\\d\\.]+)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "100",
        "pump": [
          "$100,000-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+(-?\\d+)(?:px)?\\s+(-?\\d+)(?:px)?\\s+(\\d+)(?:px)?\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http:\\/\\/test\\.com\\/test\\.svc\\/Products(?:.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "http://test.com/test.svc/Products"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "OS\\s+([^\\n]+)",
    "inputs": [
      {
        "prefix": [
          "OS\t"
        ],
        "suffix": "OS\t\na\n",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aOS\t"
        ],
        "suffix": "OS\t\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^-a-z0-9\\.\\(\\),_\\*]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n PV            :\\s(.*)\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " PV  ",
        "pump": [
          "\n PV            :\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "file size of (.*) exceeds 10 bytes",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ize ",
        "pump": [
          "file size of "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ï¼([\\dãã]+)ä¸ç®ï¼$",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "NetSuite::Records::CustomRecord with OPTIONS=(.*) could not be found",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Suit",
        "pump": [
          "NetSuite::Records::CustomRecord with OPTIONS="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(['\"]imported-component['\"],[ '\"](.*),",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-c",
        "pump": [
          "(\"imported-component\", "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\e+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\u001b"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\?xml\\s+(.*?)\\?>",
    "inputs": [
      {
        "prefix": [
          "<?xml\t"
        ],
        "suffix": "x",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<?xml\t"
        ],
        "suffix": "x<",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\.\\d+?[A-Z]?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Aa0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(ee-tawebsheet.php\\?[=0-9a-zA-Z&_-]*cmdshowaddpunch=1[=0-9a-zA-Z&_-]*)",
    "inputs": [
      {
        "prefix": [
          "ee-tawebsheetaphp?a"
        ],
        "suffix": "?pcmdshowad",
        "pump": [
          "cmdshowaddpunch=1"
        ]
      },
      {
        "prefix": [
          "aee-tawebsheetaphp?a"
        ],
        "suffix": "?pcmdshowaddpun",
        "pump": [
          "cmdshowaddpunch=1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)",
    "inputs": [
      {
        "prefix": [
          "versionapplewebkit a"
        ],
        "suffix": "it asafa",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aversionapplewebkit a"
        ],
        "suffix": "it as",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(.*\\w)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "pugs-path: (.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "pugs-path: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)/(\\d+)/(\\d+) \\s* (\\d+):(\\d+):(\\d+) (?:\\s+ [+-](\\d{2})(\\d{2}))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0/0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "error callback did not return false.*SQLite3 step error result code: 1",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d",
        "pump": [
          "error callback did not return false"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^,]\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(iPod).+Version/(\\d+)\\.(\\d+)\\.(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Po",
        "pump": [
          "iPoda"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "old\\({([^}]*)},{([^}]*)}\\)",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\"(.*?) ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \"",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/{1,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(etc)\\.\\.\\.$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "etc..",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "announcement([0-9]+).*$",
    "inputs": [
      {
        "prefix": [
          "announcement0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aannouncement0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^ssh-rsa (.+) .*$",
    "inputs": [
      {
        "prefix": [
          "ssh-rsa a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Variable \".*\" is not valid",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " val",
        "pump": [
          "Variable \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<published>(.*)\\+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "<published>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+(\\.\\w+)+:\\w+",
    "inputs": [
      {
        "prefix": [
          "w\u0000w\u0000w"
        ],
        "suffix": "",
        "pump": [
          "ww\u0000w"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a:",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "w\u0000w\u0000w"
        ],
        "suffix": "",
        "pump": [
          "ww\u0000w"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<[A-DF-Z][^>]*>Sh?inn<\\/[A-DF-Z]> <E[^>]*><A pl=\"n\" gnt=\"n\">F\\x{e9}ineach<\\/A><\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</",
        "pump": [
          "<A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(D|S|\\r\\n|\\n|\\r|[^DS\\r\\n]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[^\\s]\\.\\.\\.$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a..",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zA-Z0-9 |]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Za-z0-9-_]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<meta[^>]*?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "me<",
        "pump": [
          "<meta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)\\((.*?)\\)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+?)\\|(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "|a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "|a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[|,;].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ","
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ","
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*\\d+_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^#define (GL_.*?)\\s+(0x[\\da-fA-F]+)",
    "inputs": [
      {
        "prefix": [
          "#define GL_a"
        ],
        "suffix": "efi",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "#define GL_s0xAA"
        ],
        "suffix": "\u0000",
        "pump": [
          "dA"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "opy.*table",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ab",
        "pump": [
          "opy"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*directive\\:\\s*([\\w\\-]+)\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "\tdirective:\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span style=\\\"text-decoration: ?underline;\\\">(.*?)<\\/span>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "spa",
        "pump": [
          "<span style=\"text-decoration: underline;\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "office:value-type=\"float\" office:value=\".*?\" ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "pe=",
        "pump": [
          "office:value-type=\"float\" office:value=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<pre.*?>)(.*?)</pre>",
    "inputs": [
      {
        "prefix": [
          "<prea"
        ],
        "suffix": "</pr",
        "pump": [
          ">"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "p<",
        "pump": [
          "<pre",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<head>.+</head>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eaa</h",
        "pump": [
          "<head>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w|\\.)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<pre(.*?)><code>(\\$\\$CODE(\\d+)\\$\\$)<\\/code>\\<\\/pre>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "<pre"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "</div>\\s*<div.+id=\"container\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "v><d",
        "pump": [
          "</div><diva"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Tcp port:.* Unix socket:.*",
    "inputs": [
      {
        "prefix": [
          "Tcp port:a"
        ],
        "suffix": "a",
        "pump": [
          " Unix socket:"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Tcp port:",
          " Unix socket:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\n\\r]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+)(::|->)?(\\w+)?(?:\\(\\))?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "::>",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "; *(Fly|FLY)[ _](IQ[^;]+|F[34]\\d+[^;]*);? Build",
    "inputs": [
      {
        "prefix": [
          "; Fly F30"
        ],
        "suffix": "; Fly IQ",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a; Fly F30"
        ],
        "suffix": " ; ;FLY F",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<style[\\S\\s]*?>([\\S\\s]*?)<\\/style>",
    "inputs": [
      {
        "prefix": [
          "<stylea"
        ],
        "suffix": "<styl",
        "pump": [
          ">"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "e<s",
        "pump": [
          "<style",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http://localhost(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "http://localhost"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^data:([a-z]+\\/[a-z0-9-+.]+)?;name=(.*);base64,(.*)$",
    "inputs": [
      {
        "prefix": [
          "data:a/a;name=a"
        ],
        "suffix": "a",
        "pump": [
          ";base64,"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\015?\\012?_\\w+?_\\015?\\012?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(010|101)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-z]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\/.*)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+\\s)*\\w+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)Analyzer$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\t+[\\/\"a-zA-Z0-9]+.*)",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\ta"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[&?]output=json(?:&.*)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "&output=json&"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(?:[^\\n\\r\\t >{][^\\n\\r\\t >{/]*)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</\t",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "background-color:(.+?);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "kgb",
        "pump": [
          "background-color:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "L<([^>]*)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "La>La",
        "pump": [
          "L<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "FAILED \\(.*errors=(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "FAILED ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<Content><!\\[CDATA\\[(.*)\\]\\]><\\/Content>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "></Content",
        "pump": [
          "<Content><![CDATA["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div id=\"new_id_value\".*>([0-9]+)<\\/div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ue<di",
        "pump": [
          "<div id=\"new_id_value\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Za-z_0-9]*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@Test fun (\\w+)\\(\\) \\{.+?}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "@Test fun a() {a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(src\\s*:\\s*[^(]+\\(([^)]*)\\)[\\s,]*)",
    "inputs": [
      {
        "prefix": [
          "src\t:\t"
        ],
        "suffix": "a():",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "asrc\t:\t"
        ],
        "suffix": "a(",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "site_key = .*(?:\\r\\n|\\r|\\n)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ite",
        "pump": [
          "site_key = "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)feed$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Will store (.*?) according to default.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cc",
        "pump": [
          "Will store "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)(?:\\.([0-9]+))?(?:\\.([0-9]+))?(?:\\.([0-9]+))?(?:([ab])([0-9]+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*user\\s*=\\s*(.+)",
    "inputs": [
      {
        "prefix": [
          "\tuser\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\s=:]+)(\\s*)(=|:)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":a\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?-----BEGIN CERTIFICATE-----",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "E----",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<merchantKey>).+?(</merchantKey>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "<merchantKey>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+[.,]\\d{1,2})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "000",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\s*).*$",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[^\\n\\w]*(slinky_product)\\((\".*\"|'.+'|)\\)[^\\n\\w]*$",
    "inputs": [
      {
        "prefix": [
          "$slinky_product(\"a"
        ],
        "suffix": "pr\"",
        "pump": [
          "\")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "data-api-endpoint=\\\"(.*?)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nad",
        "pump": [
          "data-api-endpoint=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([\\w-]+):?(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "xmlns\\:(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "xmlns:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w\\d]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d*h)|(\\d*m)|(\\d*s)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "url\\s*\\(\\s*[^\\s)]+?\\s*\\)\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ur",
        "pump": [
          "url(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\ *?\\|$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\{+)(.*?)(\\}+)",
    "inputs": [
      {
        "prefix": [
          "{",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "}"
        ]
      },
      {
        "prefix": [
          "a",
          "{",
          "a"
        ],
        "suffix": "a}{",
        "pump": [
          "{",
          "a",
          "}"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<E[^>]*><S>(?:[Dd][eo]n|[Ss]an?|[Ff]aoin|[\\x{d3}\\x{f3}]n)<\\/S> <A pl=\"n\" gnt=\"n\">(?:g?[Cc]h?\\x{e9}ad|[Dd]\\x{e1}|[Dd]ara|[Uu]ile|[Mm]\\x{ed}le)<\\/A><\\/E>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/A",
        "pump": [
          "<E"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)[=:](.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Notice:.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Notice:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[translate|translateX|translateY]\\\\(([\\\\d,\\\\s]+)\\\\)",
    "inputs": [
      {
        "prefix": [
          "X(\t\t"
        ],
        "suffix": "",
        "pump": [
          "0\t"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\s",
        "pump": [
          "a\\,"
        ]
      },
      {
        "prefix": [
          "X(\t\r"
        ],
        "suffix": "",
        "pump": [
          "0\r"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "charset=([^ ;]+);?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sc;char",
        "pump": [
          "charset=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(?:\\\\[\\x01-\\x09\\x0B-\\x0c\\x0e-\\x7f]|[\\x21-\\x5a\\x5e-\\x7e])*\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "[",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*(.+?)\\*\\/\\n(.+)",
    "inputs": [
      {
        "prefix": [
          "/*a"
        ],
        "suffix": "a",
        "pump": [
          "*/\na"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/*a",
          "*/\na"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(add|remove|drop)_.*_(?:to|from)_(.*)",
    "inputs": [
      {
        "prefix": [
          "add_a"
        ],
        "suffix": "a",
        "pump": [
          "_to_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<a[^>]*>)(<img[^>]+alt=\")([^\"]*)(\"[^>]*>)(<\\/a>)",
    "inputs": [
      {
        "prefix": [
          "<aa><imga"
        ],
        "suffix": "al$a><imga\"alt=\"al",
        "pump": [
          "alt=\"\""
        ]
      },
      {
        "prefix": [
          "a",
          "a><imga"
        ],
        "suffix": "al$a<\"a",
        "pump": [
          "<a",
          "alt=\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^function\\s*\\w*\\s*\\([\\w\\s,]*\\)\\s*{([\\w\\W]*?)}$",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)-(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-z]+[0-9]+):?([A-z]+[0-9]+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Z]*[a-z]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\w+)\\s+([\\s\\S]+)$",
    "inputs": [
      {
        "prefix": [
          "a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "var chapters = ([^;]+);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " c;avar chapt",
        "pump": [
          "var chapters = a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((http(s)?:)?\\/\\/[^\\s]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tps:\tht",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+(\\.\\d+)+)",
    "inputs": [
      {
        "prefix": [
          "d\u0000d\u0000dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "ddd"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "d\u0000d\u0000dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "ddd"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "the \"(.*?)\" object should contained the chunks joined",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "obje",
        "pump": [
          "the \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*select\\s+\\*\\s+from\\s+.*",
    "inputs": [
      {
        "prefix": [
          "\tselect\t*\tfrom\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "node_modules\\/rn-packager\\/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "node_modules/rn-packager/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\-\\d+(\\.\\d+){1,3}.+",
    "inputs": [
      {
        "prefix": [
          "-0.0.0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a-0.0.0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "-0.0"
        ],
        "suffix": "a",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          "-d\u0000d\u0000d"
        ],
        "suffix": "",
        "pump": [
          "dd\u0000d"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "THERMISTOR_ID\\s+==\\s+(-?\\d*).*\\n.*THERMISTOR_NAME\\s+\"([^\"]+)",
    "inputs": [
      {
        "prefix": [
          "THERMISTOR_ID\t==\t-0",
          "a"
        ],
        "suffix": "MET\"THERMIST",
        "pump": [
          "a",
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/?Release.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/Release"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*api.gocardless.com/subscriptions",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#define\\s+STRING_CONFIG_H_AUTHOR\\s+\"(.*)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "O",
        "pump": [
          "#define\tSTRING_CONFIG_H_AUTHOR\t\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+(\\.\\d+)*)",
    "inputs": [
      {
        "prefix": [
          "d\u0000dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "ddd"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "d\u0000dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "ddd"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Added\\s+.*$",
    "inputs": [
      {
        "prefix": [
          "Added\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+(Given|When|Then) (.+)\\s+$",
    "inputs": [
      {
        "prefix": [
          "\tGiven a"
        ],
        "suffix": "he",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Apple.*Mobile.*Safari",
    "inputs": [
      {
        "prefix": [
          "Applea"
        ],
        "suffix": "pS",
        "pump": [
          "Mobile"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "f",
        "pump": [
          "Apple",
          "Mobile"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[[ \\t]*(.*)$",
    "inputs": [
      {
        "prefix": [
          "[\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a[\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^/]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".[\\x80-\\xBF]*",
    "inputs": [
      {
        "prefix": [
          "\u0000F"
        ],
        "suffix": "\u0000",
        "pump": [
          "0F"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "\u00000"
        ],
        "suffix": "\u0000",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(http:\\/\\/[^\\/]+).*$",
    "inputs": [
      {
        "prefix": [
          "http://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "ahttp://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Trigger number*.* */ *GRB *(\\d{9}|\\d{6}\\.\\d{3})",
    "inputs": [
      {
        "prefix": [
          "Trigger number",
          "a"
        ],
        "suffix": "  00000",
        "pump": [
          "a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*=(\\\".*\\\")|(\\'.*\\')$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=\"a",
        "pump": [
          "=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a href=(\"|')[^>]+minibb.+\\s+<!--End of copyright link",
    "inputs": [
      {
        "prefix": [
          "<a href=\"a",
          "a"
        ],
        "suffix": "-",
        "pump": [
          "minibba",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "c><\t<!--End of c",
        "pump": [
          "<a href='a",
          "minibba",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s\\,]+?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+):(.+):(.+)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":a",
          ":a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ":a",
          ":a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(put|post|get|delete)_(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "get_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "［＃[^］]+（([^）]+.png).*?）[^］]+］",
    "inputs": [
      {
        "prefix": [
          "［＃a",
          "a",
          "a"
        ],
        "suffix": "［",
        "pump": [
          "（a",
          "apng",
          "）a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "pn］ap［）pn",
        "pump": [
          "［＃a",
          "（a",
          "apng",
          "）a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%%|%(\\d+\\$)?([-+#0&\\' ]*)(\\*\\d+\\$|\\*|\\d+)?(\\.(\\*\\d+\\$|\\*|\\d+))?([nAscboxXuidfegpEGP])",
    "inputs": [
      {
        "prefix": [
          "%0$ "
        ],
        "suffix": "*.*0",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "%0$ "
        ],
        "suffix": "%0*",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(#+)(\\s)(.+)\\w+",
    "inputs": [
      {
        "prefix": [
          "#\ta"
        ],
        "suffix": "#",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "java.*lang.*boolean",
    "inputs": [
      {
        "prefix": [
          "javaa"
        ],
        "suffix": "a",
        "pump": [
          "lang"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "anblan",
        "pump": [
          "java",
          "lang"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.*\\s*?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "h4.*{.*color: #008000;.*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "dns_tr_(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "dns_tr_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(\\w+):?.*?>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "<$",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<a"
        ],
        "suffix": "<$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\-*\\+*\\d+\\.*\\d*$",
    "inputs": [
      {
        "prefix": [
          "-+0"
        ],
        "suffix": "-0.+",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#(?:end|{end})(.*)",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\.([0-9a-fA-F]{8})(\\.\\w+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.aa0",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "debug\\s+-\\s+\\^.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "debug\t-\t^"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\([^)]*\\/(.*)\\)",
    "inputs": [
      {
        "prefix": [
          "(a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ")(",
        "pump": [
          "(",
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#### \\[(.*?)]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ##",
        "pump": [
          "#### ["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Sending.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Sending"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^function\\s+[a-zA-Z0-9]*\\s*\\((deps|dependencies)\\)",
    "inputs": [
      {
        "prefix": [
          "function\t"
        ],
        "suffix": "e(de",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[\\[\\s*foreach:\\s*(.+?)\\s*\\]\\](\\r?\\n)?",
    "inputs": [
      {
        "prefix": [
          "[[\tforeach:\t",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a[[\tforeach:\t",
          "a"
        ],
        "suffix": "h:",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?(/objects/info/[^/]*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ts/ob",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "file:\\/[A-Za-z]:\\/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "file:/a:/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\w+\\s(version\\s)?(\\d+)\\.(\\d+)\\.(\\d+).*",
    "inputs": [
      {
        "prefix": [
          "a\tversion\t0.0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*<pre>(.*)<\\/pre>.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<pre>",
          "</pre>"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "<pre>",
          "</pre>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\.]+)(\\(.*\\))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "//#sourceMappingURL=\u0000\u0000"
        ],
        "suffix": "'",
        "pump": [
          "\"\u0000"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "ng\"",
        "pump": [
          "//# sourceMappingURL=a"
        ]
      },
      {
        "prefix": [
          "//#sourceMappingURL=\u0000\""
        ],
        "suffix": "'",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\\".*\\\"|\\d{3,3}|null)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "users.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "users"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?\\d+\\.?\\d+)",
    "inputs": [
      {
        "prefix": [
          "-0"
        ],
        "suffix": "0..",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "0.",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(.+\\/.+\\)",
    "inputs": [
      {
        "prefix": [
          "(a"
        ],
        "suffix": ")/",
        "pump": [
          "/a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "(a",
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d\\d+)-(\\d+)-(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a00",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?(\\?.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "?"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "?"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[-+] *[0-9]* *$",
    "inputs": [
      {
        "prefix": [
          "+ "
        ],
        "suffix": "+0+",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Validate(.*)\\/Xcode\\/DerivedData\\/(.*)-(.*)",
    "inputs": [
      {
        "prefix": [
          "Validatea",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/Xcode/DerivedData/",
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "storage:(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "storage:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*([\\w:]+)\\s*\\{",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/default\\/(.*)\\/(.*)\\.(.*)$",
    "inputs": [
      {
        "prefix": [
          "/default/a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/",
          "."
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/default/",
          "/",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "result source_location: \\[\"(unknown|.+?\\.rb)\", -?\\d+\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ", ",
        "pump": [
          "result source_location: [\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "output\\-folder: \\$\\(node\\-sdks\\-folder\\)\\/(lib\\/services\\/\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-f\toutput-folder: $(node-sdks-folder)/lib/se",
        "pump": [
          "output-folder: $(node-sdks-folder)/lib/services/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<ref-marker>.*</ref-marker>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "<ref-marker>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "FLOAT.*|DECIMAL.*|INT.*|DOUBLE.*|FIXED.*|SHORT.*|NUMBER.*|NUMERIC.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "FLOAT"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Adding 1 editor to domain .*The server does not support adding or removing members",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " 1 ",
        "pump": [
          "Adding 1 editor to domain "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(.*?tag: (.+?)(\\)|,)",
    "inputs": [
      {
        "prefix": [
          "(a"
        ],
        "suffix": "ag",
        "pump": [
          "tag: a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a,a",
        "pump": [
          "(",
          "tag: a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{\\{\\s*(?:template:)?\\s*(?:wikify(?:-date)?|wfy|wiki)(\\s*\\|\\s*section)?\\s*\\}\\}",
    "inputs": [
      {
        "prefix": [
          "{{\t"
        ],
        "suffix": "f",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a{{\t"
        ],
        "suffix": "fy}{",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(%?)%\\{([^\\}]+)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}%{",
        "pump": [
          "%%{a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.([^\\s]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".\t.",
        "pump": [
          ".a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "module.*is\\sinvalid",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nva",
        "pump": [
          "module"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\,]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",a",
        "pump": [
          ","
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<h1 id=\"NAME\">NAME</h1>.*?<p>(.*?)</p>",
    "inputs": [
      {
        "prefix": [
          "<h1 id=\"NAME\">NAME</h1>a"
        ],
        "suffix": "=",
        "pump": [
          "<p>"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ">NAM",
        "pump": [
          "<h1 id=\"NAME\">NAME</h1>",
          "<p>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?\"(.*)\".*\"OK\"}",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "}a",
        "pump": [
          "\"",
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "O",
        "pump": [
          "a",
          "\"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "dist\\/.*\\.html",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "dist/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<meta\\s*([^>]*)http-equiv=['\"]?content-type['\"]?([^>]*))",
    "inputs": [
      {
        "prefix": [
          "<meta\t",
          "a"
        ],
        "suffix": ">",
        "pump": [
          "a",
          "http-equiv=\"content-typea"
        ]
      },
      {
        "prefix": [
          "a<meta\t",
          "a"
        ],
        "suffix": "=ca><metaa<http-",
        "pump": [
          "a",
          "http-equiv=\"content-typea"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "because they are not accepting mail from (\\S+?):?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "us\tbecause they are not accepting ma",
        "pump": [
          "because they are not accepting mail from a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<div id=\"topic\">.*?</div>.*?<td class=\"authorname\">.*?</tr>)",
    "inputs": [
      {
        "prefix": [
          "<div id=\"topic\">a",
          "a"
        ],
        "suffix": "d",
        "pump": [
          "</div>",
          "<td class=\"authorname\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s\\.\\-_]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<td\\s+class=\"credit\"\\s*>\\s*(.+?)\\s*</td>",
    "inputs": [
      {
        "prefix": [
          "<td\tclass=\"credit\"\t>\t",
          "a"
        ],
        "suffix": "cr",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a<td\tclass=\"credit\"\t>\t",
          "a"
        ],
        "suffix": "=",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ ]*([0-9]*)[ ]*([0-9]*)[ ]*([0-9\\.]*)",
    "inputs": [
      {
        "prefix": [
          " 0",
          "0"
        ],
        "suffix": " 0. ",
        "pump": [
          "0",
          "."
        ]
      },
      {
        "prefix": [
          "a",
          " 0",
          "0"
        ],
        "suffix": "a",
        "pump": [
          " ",
          "0",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)::(.*?)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(:(\\d+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span.*?class=\"emoji emoji(.*?)\"><\\/span>",
    "inputs": [
      {
        "prefix": [
          "<spana"
        ],
        "suffix": "</",
        "pump": [
          "class=\"emoji emoji"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "p",
        "pump": [
          "<span",
          "class=\"emoji emoji"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+?)\\!:*(.*)$",
    "inputs": [
      {
        "prefix": [
          "a!:"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a!:"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(http|https)://(.+):(.+)@(.+):(\\d+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "http://a",
          "a",
          "a:0"
        ],
        "suffix": "a",
        "pump": [
          ":a",
          "@a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\.]+)\\.([^ #]+)(?: ?\\(([^\\#)]+)(?:#([^\\)]+)?)?)?",
    "inputs": [
      {
        "prefix": [
          "a.a"
        ],
        "suffix": ") (",
        "pump": [
          " (a"
        ]
      },
      {
        "prefix": [
          "a",
          "a.a"
        ],
        "suffix": ") (",
        "pump": [
          "a",
          " (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "The locale file .*messages\\.json is missing key: extensionName",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cale ",
        "pump": [
          "The locale file "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*contains an invalid JSON:.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "contains an invalid JSON:"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "contains an invalid JSON:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "line\\ (\\d+?),\\ column\\ (\\d+?)\\ in\\ (?:.*?)\\ in\\ (.*?):[^\\/]",
    "inputs": [
      {
        "prefix": [
          "line 0, column 0 in a"
        ],
        "suffix": "00 ",
        "pump": [
          " in "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "um l",
        "pump": [
          "line 0, column 0 in ",
          " in "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#feature-css-inclusion\\{background:.+;color:.+}",
    "inputs": [
      {
        "prefix": [
          "#feature-css-inclusion{background:a"
        ],
        "suffix": "clu",
        "pump": [
          ";color:a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "u",
        "pump": [
          "#feature-css-inclusion{background:a",
          ";color:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*order\\s+by\\s+.*",
    "inputs": [
      {
        "prefix": [
          "aorder\tby\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "aorder\tby\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\\\)*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\\"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:([\\w\\.\\$]+)|([\"'][^\"']+[\"']))\\s*[:=].*function\\s?\\(([^\\)]*)",
    "inputs": [
      {
        "prefix": [
          "a\t:a"
        ],
        "suffix": "io\"a)funct",
        "pump": [
          "function\t("
        ]
      },
      {
        "prefix": [
          "a",
          "a\t:a"
        ],
        "suffix": "i)a\"funct",
        "pump": [
          "a",
          "function\t("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\"?([^\"<]+)\"?\\s+<",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "\ta<",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "setTimeout\\(function\\(\\)\\{\\s+(var s,t,o,p,b,r,e,a,k,i,n,g,f.+?\\r?\\n[\\s\\S]+?a\\.value =.+?)\\r?\\n",
    "inputs": [
      {
        "prefix": [
          "setTimeout(function(){\tvar s,t,o,p,b,r,e,a,k,i,n,g,fa",
          "a"
        ],
        "suffix": "un",
        "pump": [
          "\r\na",
          "a.value =a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "View\\s(.*)\\ not found.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "und",
        "pump": [
          "View\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<\\%(.*?)\\%\\>\n            ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%",
        "pump": [
          "<%"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\,?\\s+no\\s+inv\\.?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<token t_id=\\\"(.*?)\\\" sentence=\\\"(.*?)\\\" number=\\\"(.*?)\\\">(.*?)</token>",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+[eE][+-]?[0-9]+j?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0E",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^ ]+) ([A-Z,_]+) ?([^ ]+)?$",
    "inputs": [
      {
        "prefix": [
          "a ,"
        ],
        "suffix": ",a ",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^DE\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "DE\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^_]+)-(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\\\w[\\\\w\\\\-]{0,}(\\\\.[a-zA-Z0-9]+)*$",
    "inputs": [
      {
        "prefix": [
          "\\w-"
        ],
        "suffix": "\\$$",
        "pump": [
          "\\"
        ]
      },
      {
        "prefix": [
          "\\w-"
        ],
        "suffix": "\\$$",
        "pump": [
          "\\"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\? .* \\(Use arrow keys\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "? "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "src=\\\"(.*?)\\/bootstrap\\/js\\/dist\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "src=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9.]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([aeiouy].*)ing$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(EXTERN|extern)\\s*(.*?)\\s*(\\w+)\\s*;",
    "inputs": [
      {
        "prefix": [
          "\tEXTERN\t",
          "a"
        ],
        "suffix": "exa;\t",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "danger-results:\\/\\/*.+json",
    "inputs": [
      {
        "prefix": [
          "danger-results://"
        ],
        "suffix": "u",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "adanger-results://"
        ],
        "suffix": "ult",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "QUERY_AUTH_CODE:(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "QUERY_AUTH_CODE:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\.1\\.3\\.6\\.1\\.2\\.1\\.43\\.11\\.1\\.1\\.8\\.1\\.(.*) = INTEGER:\\s(.*)",
    "inputs": [
      {
        "prefix": [
          ".1.3.6.1.2.1.43.11.1.1.8.1.a"
        ],
        "suffix": "a",
        "pump": [
          " = INTEGER:\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)=['\"]?([^\\r\\n\"]+)['\"]?,?\\n",
    "inputs": [
      {
        "prefix": [
          "w=\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "=\"",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "w=\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<content[ >]([^\\>]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n><c",
        "pump": [
          "<content a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(\\(([^\\)]+?)\\)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "((a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(f5[\\-_].+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "f5-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+\\?(\\[\\d+\\])?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "?[",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "this.\\$t\\('?(.*?)'?\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "')'t",
        "pump": [
          "thisa$t(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^<]+)\\s+<([^>]+)>$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "<>\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[A-Za-z0-9\\.\\+_-]+@[A-Za-z0-9\\._-]+(?:\\.[a-zA-Z]+)+",
    "inputs": [
      {
        "prefix": [
          "a@a"
        ],
        "suffix": "a@",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "+@-\u0000A\u0000a"
        ],
        "suffix": "\u0000",
        "pump": [
          "aA\u0000a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "executedon(.*)RulePreset",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ed",
        "pump": [
          "executedon"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(/?)code(.*?)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d</c",
        "pump": [
          "</code"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)\\/(tcp|udp)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ud0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*V\\d((alpha|beta)\\d)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[+-]?\\d+.?\\d*$",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "stddev= *(\\d+\\.?\\d*) μs$",
    "inputs": [
      {
        "prefix": [
          "stddev= 0"
        ],
        "suffix": " ",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "astddev= 0"
        ],
        "suffix": "d",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Mem:\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "Mem:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aMem:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\-\\-|\\-)(.*)=(.*)$",
    "inputs": [
      {
        "prefix": [
          "--a"
        ],
        "suffix": "a",
        "pump": [
          "="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\'(\\S+)\\'\\=\\=\\'(\\+|\\-)(\\S+)\\'\\s+\n\t       \\((\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\)\\s+\n\t       (\\d+)",
    "inputs": [
      {
        "prefix": [
          "'a"
        ],
        "suffix": "='\ta",
        "pump": [
          "'=='-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9\\.ba]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Scope=(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Scope="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "WP-CLI test suite: Sent email to.+\\n?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "WP-CLI test suite: Sent email toa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":?\\s+.*$",
    "inputs": [
      {
        "prefix": [
          ":\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9]+)(_\\w+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a_$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "MAC Address      : (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "MAC Address      : a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<input(.*?)data-alt-datepicker=('|\"|)true('|\"|)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<input"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[\\!(.*)\\!\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "!",
        "pump": [
          "[!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<img[^>]+)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ia<><im",
        "pump": [
          "<imga"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".* use of closed network connection",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"((?:\\\\[\"nrbt\\\\\\\\\\\\$]|[^\"\\\\])*)\"(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "arm.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "arm"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^\\s]+)\\s+from\\s+(.+)\\s+(to|through)\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "a\tfrom\t",
          "a",
          "\tto\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^HELLO (\\S+) (\\S+)",
    "inputs": [
      {
        "prefix": [
          "HELLO a"
        ],
        "suffix": "\t",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "node_modules(\\/|\\\\)candela(\\/|\\\\).*.js$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "od",
        "pump": [
          "node_modules\\candela\\"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+\\S+)\\s*(?:\\(checkbox\\))$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*/\\*.*\\*/$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/*",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\?php echo erLhcoreClassDesign::designJS\\((.*?)\\)(.*?)\\?\\>",
    "inputs": [
      {
        "prefix": [
          "<?php echo erLhcoreClassDesign::designJS(a"
        ],
        "suffix": "s",
        "pump": [
          ")"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "n",
        "pump": [
          "<?php echo erLhcoreClassDesign::designJS(",
          ")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "//go:generate[^\\n]*\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/g",
        "pump": [
          "//go:generate"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "at\\s+(.*)\\s+\\((.*):(\\d*):(\\d*)\\)",
    "inputs": [
      {
        "prefix": [
          "at\t",
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "aat\t",
          "a"
        ],
        "suffix": ":",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--([a-zA-Z0-9_-]+)=(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "--a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Files\\s+.+\\s+and\\s+(.+)\\s+differ",
    "inputs": [
      {
        "prefix": [
          "Files\t",
          "a",
          "\tand\t",
          "a"
        ],
        "suffix": "and",
        "pump": [
          "a",
          "\t",
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "aFiles\t",
          "a",
          "\tand\t",
          "a"
        ],
        "suffix": "d",
        "pump": [
          "a",
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "panic.*aaaah!!",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "an",
        "pump": [
          "panic"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "error \\([0-9]+.[0-9]+ ms\\)",
    "inputs": [
      {
        "prefix": [
          "error (0"
        ],
        "suffix": " (",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "aerror (0"
        ],
        "suffix": " (00",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[^#]*(?:qx.|`)figlet.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "`figlet"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^You are in (.*\\S)\\s+\\[(.+)\\]",
    "inputs": [
      {
        "prefix": [
          "You are in a"
        ],
        "suffix": " $\t",
        "pump": [
          "a\t[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.+ INFO .+ \\[Dummy\\] Setup on .+$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          " INFO a",
          " [Dummy] Setup on a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Z]|[0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<inputbox>.*?<\\/inputbox>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "<inputbox>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.(eot|woff|woff2|svg|ttf)([\\?]?.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".ttfa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http:\\/\\/icanhascheezburger\\.files\\.wordpress\\.com\\/.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "http://icanhascheezburger.files.wordpress.com/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "create_table \"foo\\$.+\\$bar\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f",
        "pump": [
          "create_table \"foo$a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "user/.*/m/.*",
    "inputs": [
      {
        "prefix": [
          "user/a"
        ],
        "suffix": "a",
        "pump": [
          "/m/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "user/",
          "/m/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w-:\\/.]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z]+\\s[0-9A-Za-z\\.]+[-][0-9]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\t.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(\\s*([^\\?].*?)\\s*\\)",
    "inputs": [
      {
        "prefix": [
          "(\t",
          "a"
        ],
        "suffix": "?",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a(\t",
          "a"
        ],
        "suffix": "?)(",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DirectorJobRunner: (?:\\[external-(cpi)\\] \\[cpi-(\\d+)\\] request: ({.*}) with command:.*|SENT: (agent)\\.([^ ]*) (.+))$",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([^ \\t:]+):?\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(must|wont)_(.*_of|nil|silent|empty)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "owam_",
        "pump": [
          "wont_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\"ratioVersion\"\\s*>)([^<]+)(<\\/)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "r\"r",
        "pump": [
          "\"ratioVersion\">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "beta.*?gamma.*?alpha",
    "inputs": [
      {
        "prefix": [
          "betaa"
        ],
        "suffix": "amm",
        "pump": [
          "gamma"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "alph",
        "pump": [
          "beta",
          "gamma"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(\\d+)>.*(%([A-Z0-9_-]+)):? (.*)",
    "inputs": [
      {
        "prefix": [
          "<0>a"
        ],
        "suffix": "a",
        "pump": [
          "%-: "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<0>",
          "%-: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z\\s]+[a-z])\\s?([><=!]+)?\\s?([0-9]+)?",
    "inputs": [
      {
        "prefix": [
          "aa"
        ],
        "suffix": "",
        "pump": [
          "sa"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a!$a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "",
        "pump": [
          "sa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^#, +(.*) *$",
    "inputs": [
      {
        "prefix": [
          "#, ",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\.\\d*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\[\\w+\\]\\[([^\\]]+)\\]$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$[][a]",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)([\\-\\_])(v?\\d.*)(\\.(?:tar\\.(?:gz|bz2)|tgz|zip))$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".b-.z",
        "pump": [
          "-v0"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ".",
        "pump": [
          "a",
          "-v0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[share(.*?)\\]\\s?(.*?)\\s?\\[\\/share\\]\\s?",
    "inputs": [
      {
        "prefix": [
          "[sharea"
        ],
        "suffix": "s",
        "pump": [
          "]a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "s[sha",
        "pump": [
          "[share",
          "]a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ID=([^;]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ID;ID",
        "pump": [
          "ID=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*filename=\\\"(.*)\\\".*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "filename=\"",
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "filename=\"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^a-zA-Z0-9_.\\-]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Unseal Key 2: (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Unseal Key 2: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<td ALIGN=right BGCOLOR=#EED6B5>.*?<a href=([^<>]*?list_news_category.pl[^<>]*?)>([^<>]*?)<\\/a><\\/td>",
    "inputs": [
      {
        "prefix": [
          "<td ALIGN=right BGCOLOR=#EED6B5>a<a href=a"
        ],
        "suffix": "f",
        "pump": [
          "list_news_categoryapl"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)\\#(\\w+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<ca>.(.*)</ca>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<ca>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^/]+/.+(?:#egg=(.*))$",
    "inputs": [
      {
        "prefix": [
          "a/a"
        ],
        "suffix": "a",
        "pump": [
          "#egg="
        ]
      },
      {
        "prefix": [
          "a",
          "a/a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "#egg="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^0-9.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "VALUES\\s*\\(__ENTITY__, \\s*(\\d+)\\s*,(\\s*'[^',]*'\\s*,\\s*'[^',]*'\\s*,\\s*'[^',]*'\\s*,\\s*'[^',]*'\\s*),\\s*'?([^',]*)'?",
    "inputs": [
      {
        "prefix": [
          "VALUES\t(__ENTITY__, \t0\t,\t'a'\t,\t'a'\t,\t'a'\t,\t'a'\t,\t"
        ],
        "suffix": "_, 0",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^the (\\S+) in the (\\S+) should( not)? contain an? (\\S+)$",
    "inputs": [
      {
        "prefix": [
          "the a",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          " in the a",
          " should contain an a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$[^\\s]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$\t$",
        "pump": [
          "$a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "vimeo.com\\/([^&]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o&c",
        "pump": [
          "vimeoacom/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+=",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "at (?:\\(eval \\d*\\)|\\S+) line (\\d+)\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "evat ",
        "pump": [
          "at a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(((http|ftp|https):\\/\\/)|www\\.)[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?\\^=%&:\\/~\\+#!]*[\\w\\-\\@?\\^=%&\\/~\\+#])?",
    "inputs": [
      {
        "prefix": [
          "http://a.a"
        ],
        "suffix": "tps:",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/heartbeat$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ear",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^!\\s*(\\w+)\\s+(\\S+)[^\\n]*?\\n",
    "inputs": [
      {
        "prefix": [
          "!\ta\ta"
        ],
        "suffix": "!\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\d,]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",a",
        "pump": [
          ","
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^:([^:\\n]+): *(.*)",
    "inputs": [
      {
        "prefix": [
          ":a: "
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ss+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "as",
        "pump": [
          "ss"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "aa{3,}?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$a",
        "pump": [
          "aaaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\r*login:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "\r"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[([0-9]+):([0-9]+)\\] -A ([^\\s]+) (.*)$",
    "inputs": [
      {
        "prefix": [
          "[0:0] -A a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+):\\/\\/([^\\/]+){1}(\\/.*)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "://a/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "multiple.*statements",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ult",
        "pump": [
          "multiple"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "href\\s*=\\s*['\"]?([^'\"> ]+)",
    "inputs": [
      {
        "prefix": [
          "href\t=\t"
        ],
        "suffix": "ef\"",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "href=\u0000\""
        ],
        "suffix": " ",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "ahref\t=\t"
        ],
        "suffix": "eha hr",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "href=\u0000\""
        ],
        "suffix": " ",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "file://(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "file://"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(:\\d\\d) \\S+ (\\d{4})$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a\t",
        "pump": [
          ":00 a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-([a-z0-9])\\s*,\\s*)?--([a-z0-9-]*)\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "-a\t,\t--a\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a\t"
        ],
        "suffix": "a",
        "pump": [
          "--",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(?:\\{([\\w-_]+)\\}\\s*)?(.*)",
    "inputs": [
      {
        "prefix": [
          "\t{a}\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t{a}\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)(?:\\: ([\\x00-\\xff]+))?",
    "inputs": [
      {
        "prefix": [
          "w: 0f"
        ],
        "suffix": "\u0000",
        "pump": [
          "0f"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$Āa:",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "w: 0f"
        ],
        "suffix": "\u0000",
        "pump": [
          "0f"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\t+\\s*",
    "inputs": [
      {
        "prefix": [
          "\t",
          "\t"
        ],
        "suffix": "#",
        "pump": [
          "\t",
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t",
          "\t"
        ],
        "suffix": "\t\na",
        "pump": [
          "\t",
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Record expires on ([^ ]+) .+\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "Record expires on a a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<img[^\\>]+\\>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ia",
        "pump": [
          "<imga"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "StartEvent_3_di.*?BPMNLabel.*?width=\"(\\d*).*?height=\"(\\d*)",
    "inputs": [
      {
        "prefix": [
          "StartEvent_3_dia",
          "awidth=\"0"
        ],
        "suffix": "MN",
        "pump": [
          "BPMNLabel",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *[\\|:] *",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<meta name=\"description\" content=\"(.*)\" />",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m",
        "pump": [
          "<meta name=\"description\" content=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[LCBI]<([^>]+)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "B<>a",
        "pump": [
          "B<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*i=(\\d+).*$",
    "inputs": [
      {
        "prefix": [
          "ai=0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "ai=0"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "script\\_summary\\s*\\(.*english\\:\\s*\\\"([^\\\"]*)\\\"\\s*,?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ue",
        "pump": [
          "script_summary("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ERROR.*error processing message.*",
    "inputs": [
      {
        "prefix": [
          "ERRORa"
        ],
        "suffix": "a",
        "pump": [
          "error processing message"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "ERROR",
          "error processing message"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s+[-+]?\\d*\\.?\\d+)(,?)$",
    "inputs": [
      {
        "prefix": [
          "\t+0"
        ],
        "suffix": "\t++",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "\t+0"
        ],
        "suffix": "0a\t",
        "pump": [
          "\t",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:([\\r\\n][ \\t]*)(#+[^\\r\\n]*)|([^\\r\\n\\#\\$])(#+[^\\r\\n]*))",
    "inputs": [
      {
        "prefix": [
          "\n\t#"
        ],
        "suffix": "\t\n",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a\n\t#"
        ],
        "suffix": "a\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a href=\"(.*?[^>]?)®(.*?[^>]?)\">",
    "inputs": [
      {
        "prefix": [
          "<a href=\"a"
        ],
        "suffix": "a ",
        "pump": [
          "a�a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ef>�\"",
        "pump": [
          "<a href=\"a",
          "a�a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "&([^-]*)-",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a",
        "pump": [
          "&"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<style.*?>.*?</style>)",
    "inputs": [
      {
        "prefix": [
          "<stylea"
        ],
        "suffix": "<styl",
        "pump": [
          ">"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "t<",
        "pump": [
          "<style",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "1970-01-01T00:00:00.*Z",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:Z1",
        "pump": [
          "1970-01-01T00:00:00"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\*{2,}.*",
    "inputs": [
      {
        "prefix": [
          "**"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "*"
        ],
        "suffix": "a",
        "pump": [
          "**",
          "a"
        ]
      },
      {
        "prefix": [
          "*"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^radio button having (.+) \"(.*?)\" should be (selected|unselected)$",
    "inputs": [
      {
        "prefix": [
          "radio button having a"
        ],
        "suffix": "u",
        "pump": [
          " \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?):(.*?):(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":",
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "issue state (open|closed) (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "issue state open a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]*,[ \\t]*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t,\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t,\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Available actions are:.*show.*run",
    "inputs": [
      {
        "prefix": [
          "Available actions are:a"
        ],
        "suffix": "l$",
        "pump": [
          "show"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "u",
        "pump": [
          "Available actions are:",
          "show"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "{:process (\\d+), :type :ok, :f :put, :key \".*\", :value \".*\"}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(.+)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Require *:[^\\r]*100rel",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ui",
        "pump": [
          "Require:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z0-9_:]+\\s+for\\s+[a-zA-Z0-9_,]+\\s+in\\s+.+",
    "inputs": [
      {
        "prefix": [
          "a\tfor\ta\tin\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a\tfor\ta\tin\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<[\\s]*meta[\\s]*name=\"robots\"?[\\s]*content=\"?([^>\"]*)\"?[\\s]*[\\/]?[\\s]*>",
    "inputs": [
      {
        "prefix": [
          "<\tmeta\tname=\"robots\"\tcontent=\"a",
          "\t"
        ],
        "suffix": "eta",
        "pump": [
          "\t",
          "\t"
        ]
      },
      {
        "prefix": [
          "<metaname=\"robotscontent=\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a<\tmeta\tname=\"robots\"\tcontent=\"a",
          "\t"
        ],
        "suffix": "\"r",
        "pump": [
          "\t",
          "\t"
        ]
      },
      {
        "prefix": [
          "<metaname=\"robotscontent=\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "system_profiler.*iPhone",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "f",
        "pump": [
          "system_profiler"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "unable to create directory '.+':.+some message",
    "inputs": [
      {
        "prefix": [
          "unable to create directory 'a"
        ],
        "suffix": "un",
        "pump": [
          "':a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ecsom",
        "pump": [
          "unable to create directory 'a",
          "':a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w_*.*\\.pl",
    "inputs": [
      {
        "prefix": [
          "a_"
        ],
        "suffix": "l_",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "_"
        ],
        "suffix": "p",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "test_expect_success ('[^']+') 'cmp ([^\\s]+) ([^\\s]+)'",
    "inputs": [
      {
        "prefix": [
          "test_expect_success 'a' 'cmp a"
        ],
        "suffix": "ces",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "5\\\\.3.*~dev",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "v5",
        "pump": [
          "5\\a3"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "TS3 Client\\n(.*)\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " TS",
        "pump": [
          "TS3 Client\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<meta content='.+/([\\w_-]+).+' property='og:video'>",
    "inputs": [
      {
        "prefix": [
          "<meta content='a/a"
        ],
        "suffix": "vi",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a/a"
        ],
        "suffix": " pro",
        "pump": [
          "<meta content='a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a class=\\\"cur_exp\\\".+?>(\\\\d+)</a>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "_",
        "pump": [
          "<a class=\"cur_exp\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "get(\\S+)Service",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ic\tget",
        "pump": [
          "geta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<font.*?color=\\\"(.*?)\\\".*?>(.*?)<\\/font>",
    "inputs": [
      {
        "prefix": [
          "<fonta",
          "a",
          "a"
        ],
        "suffix": "<fon",
        "pump": [
          "color=\"",
          "\"",
          ">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(HMM +A +C +D.+//)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "M",
        "pump": [
          "HMM A C Da"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[ERROR\\] reporter\\.coverage-istanbul - Coverage for functions \\(66\\.67%\\) in file \\/.+test\\/fixtures\\/typescript\\/src\\/example\\.ts does not meet per file threshold \\(60%\\)",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "Short Name.*mock_standalone_cart-2",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " S",
        "pump": [
          "Short Name"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "---(.*)---\\s<!-- START_INFO -->",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "---"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(.*?)>$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "class=\\\"(.*?)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sc",
        "pump": [
          "class=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\(\\s*eval\\s*\\d*\\s*\\)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t(\teval\t"
        ],
        "suffix": "evv",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\d+)\\.(\\d+)(\\.?)(\\d+)?$",
    "inputs": [
      {
        "prefix": [
          "0.0"
        ],
        "suffix": "0..",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^%%([^:]*):[ \\t]*(.*)[ \\t]*$",
    "inputs": [
      {
        "prefix": [
          "%%a:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *([=~!<>\\/]+) *",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "! a",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*coffee-rails.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "coffee-rails"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(\\S.+\\S)\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-z\\d\\-_.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([-a-z]+)(;q=([0-9.]+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "q=.a;",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^:]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*/\\*.*?\\*/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/*",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "hh:mm.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "hh:mm"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^AuthorDate:\\s*(.+)$",
    "inputs": [
      {
        "prefix": [
          "AuthorDate:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(?:(readonly|inherit|stringifier)\\s+)?attribute\\s+(.*?)\\s+(\\S+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\treadonly\tattribute\t",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^WebPower Pro II Card|v[0-9]+.[0-9]+|(SN [0-9]+)",
    "inputs": [
      {
        "prefix": [
          "v0"
        ],
        "suffix": "e",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/paths-(.+?)/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h",
        "pump": [
          "/paths-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\-._0-9a-zA-Z]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\!\\[\\]\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]",
        "pump": [
          "![]("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<5>([^\\n]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "5<a\n<5",
        "pump": [
          "<5>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\Q$my_nick\\E[\\:\\,\\;\\.]?\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t$my_nick,\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Za-z0-9=\\\"]+>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9,]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",a",
        "pump": [
          ","
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w\\w\\w_.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "aaa_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w]{3,}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "aaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_+(.)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aa",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<h2>(.*)<\\/h2>(.*)<\\/b",
    "inputs": [
      {
        "prefix": [
          "<h2>a"
        ],
        "suffix": "<h",
        "pump": [
          "</h2>"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "><",
        "pump": [
          "<h2>",
          "</h2>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^FullName[ ]+(.*)",
    "inputs": [
      {
        "prefix": [
          "FullName "
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*([-_a-zA-Z0-9?.*]+)\\s*:\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\ta\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[+-]?\\d*n(?:[+-]\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zа-яё\\d_-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*::process_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w*\\.?\\w*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a..",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\&([^;]+)?;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "&a",
        "pump": [
          "&a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[^.]+\\.(.+\\..+)$",
    "inputs": [
      {
        "prefix": [
          "a.a"
        ],
        "suffix": "a",
        "pump": [
          ".a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<body([^\\>]+)\\>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<b><b",
        "pump": [
          "<bodya"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)\\s*:\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^=]+)\\s*=\\s*\"?(.*?)\"?\\s*$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t=\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\n  \\n+\\s*",
    "inputs": [
      {
        "prefix": [
          "  \n"
        ],
        "suffix": " \n ",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\\\csvin(?:\\[(.*)\\])?\\s*\\((.*?)\\)\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "\\csvin[a",
          "a)\t"
        ],
        "suffix": "a",
        "pump": [
          "](",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " where (.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " where "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\S+@\\S+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "@a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "@\t",
        "pump": [
          "a",
          "@a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.[0-9a-fA-F]{40} (.+?)( \\(.+\\))?$",
    "inputs": [
      {
        "prefix": [
          "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa a"
        ],
        "suffix": "a",
        "pump": [
          " (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Za-zÃ¡Ã©Ã­Ã³ÃºÃªÃ£ÃÃÃÃÃÃ0-9\\),-][\\Â»\\\"\\'Â´>]*\\s*\\)*\\s*$",
    "inputs": [
      {
        "prefix": [
          "a\"\t"
        ],
        "suffix": "a\ta",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "aa\"\t"
        ],
        "suffix": "$",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)(#[^/]+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\([^\\)]+\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$(\\w+)\\s*\\=\\s*.+\\$args\\[(\\d)\\];",
    "inputs": [
      {
        "prefix": [
          "$a\t=\t"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a$a\t=\t"
        ],
        "suffix": "s",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\W+(.*)",
    "inputs": [
      {
        "prefix": [
          "$"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^0-9\\.\\-\\,]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a,",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+),(\\d+),(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<iframe.*?\\/iframe>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i<a/ifram",
        "pump": [
          "<iframe"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n\\d TITL (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n0 TITL a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "aa\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DATADOG_API_KEY=(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "DATADOG_API_KEY="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?) \\((.+)\\) - Latest: (.+) .*$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          " (a",
          ") - Latest: a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\x00-\\x1f\\x7F]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "snapshot=([^&]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "apsn&snap",
        "pump": [
          "snapshot="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\n|\\t|\\s{2,})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na",
        "pump": [
          "\t\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^: \\t]+):\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<Code>(.*)</Code>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d</Co",
        "pump": [
          "<Code>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+(\\w+)\\s=\\s(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^.]+)-custom.definition.json",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "efin",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:(:[^\\s]+) )?([^\\s]+) (.+)",
    "inputs": [
      {
        "prefix": [
          ":a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          " a",
          " a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":a",
          " a",
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "div.+data-blueprint=\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "uepa",
        "pump": [
          "diva"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " \\(+.+",
    "inputs": [
      {
        "prefix": [
          " ("
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a ("
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "src=\\\"data:image\\/([a-zA-Z]*);base64,(.*?)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d",
        "pump": [
          "src=\"data:image/;base64,"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+\\)\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "title=(.*?)&action=raw",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "title="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(border-\\w+-\\w+-radius:\\S+)\\s+\\/\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ob-ra",
        "pump": [
          "border-a-a-radius:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^%]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^=]+)=([^.]+\\\\.)?([^.:@]+)(@[^.:]+)?(:[0-9]+)?$",
    "inputs": [
      {
        "prefix": [
          "a=a"
        ],
        "suffix": "@\\.",
        "pump": [
          "\\aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(iPhone).*Version/(\\d+)\\.(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sion",
        "pump": [
          "iPhone"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "__REGEXP \\/(.*)\\/(.*)?",
    "inputs": [
      {
        "prefix": [
          "__REGEXP /a"
        ],
        "suffix": "a",
        "pump": [
          "/a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "__REGEXP /",
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^the (.+) cartridge should be (.*)$",
    "inputs": [
      {
        "prefix": [
          "the a"
        ],
        "suffix": "a",
        "pump": [
          " cartridge should be "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+expires=",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([\\s\\t]*\\S*)passphrase \\S+",
    "inputs": [
      {
        "prefix": [
          "\ta"
        ],
        "suffix": "\tapassphrase",
        "pump": [
          "passphrase a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\[%]%(.*?)%[%\\]]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%]a",
        "pump": [
          "%%"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^block +(?:(prepend|append) +)?([^\\n]+)",
    "inputs": [
      {
        "prefix": [
          "block prepend "
        ],
        "suffix": "\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\s*-\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t-\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\t-\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\W-]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Mozilla\\/.*Safari\\/.*",
    "inputs": [
      {
        "prefix": [
          "Mozilla/a"
        ],
        "suffix": "a",
        "pump": [
          "Safari/"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Mozilla/",
          "Safari/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<.*?>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-4(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-4"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "not-supported\\s*[:]?\\s*",
    "inputs": [
      {
        "prefix": [
          "not-supported\t"
        ],
        "suffix": "t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "anot-supported\t"
        ],
        "suffix": "-sno",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Pathname:\\s*(.*?)\\n.*Referenced\\sby\\sthe\\sfollowing\\spackages:\\s+([A-Za-z0-9]+)",
    "inputs": [
      {
        "prefix": [
          "Pathname:\t",
          "a"
        ],
        "suffix": "he\nf",
        "pump": [
          "a",
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(iteratee|predicate|callback): *ObjectIteratee<(.+)>$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "j",
        "pump": [
          "callback:ObjectIteratee<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n=over.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n=over"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w(?:\\.|[-.'\\w]+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "0\t0\t0\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0\t0\t0\t"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\-?\\d*\\.?\\d*\\s?\\%$",
    "inputs": [
      {
        "prefix": [
          "-0"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*([\\w]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\n\\r][\\n\\r]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na\n",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "CMSSW_7_.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "CMSSW_7_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^/\\*\\*[\\S\\s]+cellular-automata-voxel-shader ([0-9.]+)[\\S\\s]+\\*/",
    "inputs": [
      {
        "prefix": [
          "/**acellular-automata-voxel-shader ."
        ],
        "suffix": "ut",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "{!(.*)}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": ".*401_nobody$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "1_n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[.*\\] open on .*",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "a",
        "pump": [
          "] open on "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[",
          "] open on "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Under license from\\s+([^<]+)<",
    "inputs": [
      {
        "prefix": [
          "Under license from\t"
        ],
        "suffix": "nd",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aUnder license from\t"
        ],
        "suffix": " l",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "import\\s.*['|\"|`](.*)['|\"|`]|require\\((.*)\\)|import\\((.*)\\)",
    "inputs": [
      {
        "prefix": [
          "import\ta"
        ],
        "suffix": "mpor",
        "pump": [
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "e",
        "pump": [
          "import\t",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\.map\\s*\\(.*?\\)\\s*=>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "(",
        "pump": [
          ".map("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "call (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "call "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "a+?a*?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\S\\r\\n]*\\/(?:\\*{2})([\\W\\w]+?)\\*\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "//*",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<form\\s[^>]*method=[\"']?POST[\"']?[^>]*>)",
    "inputs": [
      {
        "prefix": [
          "<form\ta"
        ],
        "suffix": "ho",
        "pump": [
          "method=\"POSTa"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "S><form\tmethod=",
        "pump": [
          "<form\t",
          "method=\"POSTa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Operator '\\*' is not applicable.*when right side is a Timestamp",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c",
        "pump": [
          "Operator '*' is not applicable"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(CREATE|REPLACE).*?VIEW\\s+(.*?)\\s+AS",
    "inputs": [
      {
        "prefix": [
          "CREATEaVIEW\t",
          "a"
        ],
        "suffix": "EPLA",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NSString\\s+\\*const\\s+ProductionURL\\s+=\\s+@\"(.*)\";",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "uc",
        "pump": [
          "NSString\t*const\tProductionURL\t=\t@\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<S>(?:[Dd][eo]n|[Ss]an?|[Ff]aoin|[\\x{d3}\\x{f3}]n)<\\/S> <E[^>]*>(?:<N[^>]*pl=\"n\" gnt=\"n\" gnd=\"f\"[^>]*>[^<]+<\\/N>)<\\/E>)",
    "inputs": [
      {
        "prefix": [
          "<S>Den</S> <Ea><Na"
        ],
        "suffix": "S>Ón",
        "pump": [
          "pl=\"n\" gnt=\"n\" gnd=\"f\""
        ]
      },
      {
        "prefix": [
          "a<S>Den</S> <Ea><Na"
        ],
        "suffix": "/E><N<p",
        "pump": [
          "pl=\"n\" gnt=\"n\" gnd=\"f\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*route.* ",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "or",
        "pump": [
          "route"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "or",
        "pump": [
          "a",
          "route"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/(\\d+)_.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/0_"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/0_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*beat\\.yml|apm-server\\.yml",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(?:\\w:)?autoFilter[^>]*([\\/]|>([\\s\\S]*)<\\/(?:\\w:)?autoFilter)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "au",
        "pump": [
          "<autoFilter"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*[aeiou])ys$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ya",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "expected given block to perform slower than comparison block, but performed faster by \\d+.\\d+ times",
    "inputs": [
      {
        "prefix": [
          "expected given block to perform slower than comparison block, but performed faster by 0"
        ],
        "suffix": "k",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "aexpected given block to perform slower than comparison block, but performed faster by 0"
        ],
        "suffix": "ive",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*((-?\\d*\\.{0,1}\\d+)\\s+){2,3}(-?\\d*\\.{0,1}\\d+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t-0",
          "0\t-0",
          "0\t-0",
          "0\t-0"
        ],
        "suffix": "-0\t-0\t-0\t-0.",
        "pump": [
          "0",
          "0",
          "0",
          "0"
        ]
      },
      {
        "prefix": [
          "-0\\x09"
        ],
        "suffix": "\\x00",
        "pump": [
          "00\\x09"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t.\t",
        "pump": [
          "-00\t"
        ]
      },
      {
        "prefix": [
          "dsds"
        ],
        "suffix": "",
        "pump": [
          "-ds"
        ]
      },
      {
        "prefix": [
          "399"
        ],
        "suffix": "73780780399\t73780780399\t  \n  \t939207053 \t\r\n\t \t\r\n \t 9378078-",
        "pump": [
          "73780780399\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)\\s+(==|eq|!=|ne|<>|<|<=|>|>=)\\s+(.*?)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t==\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\.(WC+)(?:\\[(.+)\\])?)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".WC[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Template parse errors:\\nNo provider for SimpleDirective \\(\"\\[ERROR ->\\]<div needsDirectiveFromHost><\\/div>\"\\): .*SimpleComponent.html@0:0",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\[\\]=]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^sending\\s+request\\s+to\\s+(.+)...$",
    "inputs": [
      {
        "prefix": [
          "sending\trequest\tto\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\r\\n]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "not.*storable",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ab",
        "pump": [
          "not"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]+).*?([\\d\\.]+)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "."
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+([,)\\].;:])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\sPRIMARY\\s+KEY\\s+\\((.*?,+.*?)\\).*",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": ".+\\.(.{3})$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aaaa.a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Graduate/Professional.+?>([\\d\\.]+)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "si",
        "pump": [
          "Graduate/Professionala"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(.*?)\\s+(.*?)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t0\t0\t0\t",
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Apache.*Phusion_Passenger",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "na",
        "pump": [
          "Apache"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/\\*p:(.*?)\\*/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ":",
        "pump": [
          "/*p:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<h4[^>]*>Distributors</h4>\\s*<ul[^>]*>(.*?)</ul>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ut<>Distr",
        "pump": [
          "<h4"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\s+)(context|describe)\\s+['\"]?(.*?)['\"]?\\s+do\\s*(?:#.*)?$",
    "inputs": [
      {
        "prefix": [
          "\tcontext\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+,(\\d+),(\\d+),\"(https?://[^.]+\\.googleusercontent\\.com.*?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+\\.[0-9]+)(?:\\.[0-9]+){1,2}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "0\u00000\u00000\u000000"
        ],
        "suffix": "\u0000",
        "pump": [
          "000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "VERSION (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "VERSION a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\{.+\\}.*$",
    "inputs": [
      {
        "prefix": [
          "{a"
        ],
        "suffix": "a",
        "pump": [
          "}"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^@.*@.*丁丁.*$",
    "inputs": [
      {
        "prefix": [
          "@a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "@",
          "丁丁"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s]*[\\d]+[ \\t]+[\\d]+[ \\t]*[\\n\\r]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \n0",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<svg[^>]*height\\s*=\\s*\\\"?(\\d+)\\\"?[^>]*>",
    "inputs": [
      {
        "prefix": [
          "<svgaheight\t=\t\"0"
        ],
        "suffix": "\t\"",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "tcpdump\\sversion\\s([0-9]+\\.[0-9]+)?.*",
    "inputs": [
      {
        "prefix": [
          "tcpdump\tversion\t0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "atcpdump\tversion\t0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "wplc_nonce\\s=\\s\"(.+?)\";",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "wplc_nonce\t=\t\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.xlarge",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "xl$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)[:=]\\s*([-+]*[0-9]+(\\.[0-9]+)?)\\s+(\\w+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.0",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([\\-+])=\\s*(\\d+\\.?\\d*)",
    "inputs": [
      {
        "prefix": [
          "+=\t0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "GMT (.*?)\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "MT",
        "pump": [
          "GMT "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*) on (.*) type (.*) \\((.*)\\)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "t",
        "pump": [
          " on ",
          " type ",
          " ("
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "y",
        "pump": [
          "a",
          " on ",
          " type ",
          " ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@media screen and \\(orientation: portrait\\) \\{.*?a \\{.*?color: green;.*?\\}.*?\\}",
    "inputs": [
      {
        "prefix": [
          "@media screen and (orientation: portrait) {a",
          "a",
          "a"
        ],
        "suffix": " an",
        "pump": [
          "a {",
          "color: green;",
          "}"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(_.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[AEIOUaeiou]+.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+\\@\\S+\\.\\S+)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "@a",
          ".a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "XPATH syntax error: '(.*?)'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "XPATH syntax error: '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!--\\s*?TYPO3SEARCH_begin\\s*?-->.*?<!--\\s*?TYPO3SEARCH_end\\s*?-->",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nda",
        "pump": [
          "<!--TYPO3SEARCH_begin-->"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^0-9a-z\\-_,]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\*|\\d*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ngInjectableDef.*return CONST_SERVICE",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ST",
        "pump": [
          "ngInjectableDef"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "gem 'pg'.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "gem 'pg'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]*: ?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z_]\\w*)=",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=a$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Content-Location:\\s+(.*?)$",
    "inputs": [
      {
        "prefix": [
          "Content-Location:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d.\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*at [\\/\\\\]\\S+ line \\d+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Feedfetcher-Google.*\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "fe",
        "pump": [
          "Feedfetcher-Google"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+)[\\s_]+(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\\\*)(`|\\$\\{)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "\\"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*>?\\Q$bar\\E\\s*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\s*(\\S+)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "0\ta\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "0\ta\t",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\{[^\\}]+\\})",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "{",
        "pump": [
          "{a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)-- ?\\{(.*?)\\}[ \\t]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "- -",
        "pump": [
          "-- {"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/\\s*\\*.*\\*/\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[1-35\\s5]+",
    "inputs": [
      {
        "prefix": [
          "15"
        ],
        "suffix": "\u0000",
        "pump": [
          "55"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "1s"
        ],
        "suffix": "\u0000",
        "pump": [
          "5s"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<style[^>]?>.+?<Rstyle>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y",
        "pump": [
          "<stylea>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "add_index \"demography.citizens\", \\[\"country_id\", \"user_id\"\\].*:where => \"active\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y_",
        "pump": [
          "add_index \"demographyacitizens\", [\"country_id\", \"user_id\"]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)says$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ay",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "OAuth oauth_body_hash=\"\\S+\", oauth_consumer_key=\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "k\tOAuth ",
        "pump": [
          "OAuth oauth_body_hash=\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Allowed 'instance_method' to be called 0 times instead of 1 time on <InstanceDouble of <class 'doubles.testing.User'> object at .+> with any args, but was not. \\(.*doubles/test/allow_test.py:\\d+\\)",
    "inputs": [
      {
        "prefix": [
          "Allowed 'instance_method' to be called 0 times instead of 1 time on <InstanceDouble of <class 'doublesatestingaUser'> object at a"
        ],
        "suffix": "je",
        "pump": [
          "> with any args, but was nota ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(class=\"close\").*(dismiss=\"alert\")",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ma",
        "pump": [
          "class=\"close\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "miss=",
        "pump": [
          "a",
          "class=\"close\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<a) [^>]+>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "<a a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\[\\]|\\[(.*)\\]\\+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "][",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*?\\/\\*\\s*yaspeller\\s+ignore\\s*\\*\\/.*?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/*yaspeller\tignore*/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Set-Cookie: (.*?)=(.*?)(?:; (.*?))?$",
    "inputs": [
      {
        "prefix": [
          "Set-Cookie: a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "=",
          "; "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<\\!(.*?)\\>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<",
        "pump": [
          "<!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[([^\\]]+)\\]\\s*\\[([^\\]]+)\\]\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "[a]\t[a]\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a]\t[a]\t"
        ],
        "suffix": "a",
        "pump": [
          "[a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+:\\d+\\.0 Ethernet",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "00",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Dr\\.Web anti\\-virus Light Version: ([0-9\\.]+) Device model: (.*) Firmware version: ([0-9\\.]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " Fir",
        "pump": [
          "Dr.Web anti-virus Light Version: . Device model: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "UNMET PEER DEPENDENCY ([a-z\\-0-9.]+)@(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "UNMET PEER DEPENDENCY a@a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\s]+)(?:\\((.+?)\\))?(\\sunsigned)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\p{Lu}?[\\p{Ll}0-9]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\:\\s+self_referential_line_number = __LINE__",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "= _",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*ç´¹ä»æï¼\\s*(.+)",
    "inputs": [
      {
        "prefix": [
          "a紹介文：\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a紹介文：\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Unable to query .*, please check that it is valid.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " i",
        "pump": [
          "Unable to query "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "var _rollbarConfig = (.*);<\\/script>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "C;<",
        "pump": [
          "var _rollbarConfig = "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*port=(\\d+).*$",
    "inputs": [
      {
        "prefix": [
          "aport=0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\"(.+)\"|(.+))=(?:\"(.*)\"|(.*))",
    "inputs": [
      {
        "prefix": [
          "\"a"
        ],
        "suffix": "a",
        "pump": [
          "\"=\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\"a",
          "\"=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+)(?:_job)?_(time|count)(?::(queue|job):(.*))?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_time:job:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I have a Gemfile with (.*) plugin set to (.*)$",
    "inputs": [
      {
        "prefix": [
          "I have a Gemfile with a"
        ],
        "suffix": "a",
        "pump": [
          " plugin set to "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(All)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "All"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<(\\w+) id=\"(\\w+)\"\\s*\\/?>\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "<a id=\"a\"\t/>\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "package\\s+(.*?)\\s*;",
    "inputs": [
      {
        "prefix": [
          "package\t",
          "a"
        ],
        "suffix": "pa",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "apackage\t",
          "a"
        ],
        "suffix": "ac",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Parameter checksum failed.* MD5 is not supported in FIPS mode",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "M",
        "pump": [
          "Parameter checksum failed"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^'.+?':.+?$",
    "inputs": [
      {
        "prefix": [
          "'a"
        ],
        "suffix": "a",
        "pump": [
          "':a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([ \\t]|\\r\\n)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ra",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+) of (\\d+) tests passed",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "import\\s{render\\sas\\s__vue_render__,\\sstaticRenderFns\\sas\\s__vue_static_render_fns__}\\sfrom\\s\"(.*?)\"",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<pre\\>\\s*(.*?)\\</pre\\>\\n*",
    "inputs": [
      {
        "prefix": [
          "<pre>\t"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<pre>\t"
        ],
        "suffix": "e<",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "patch.*blead",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h",
        "pump": [
          "patch"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "{%widget\\s.*?position=\"(.*?)\".*?%}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": ".*Duration=(.*),SCTE35=(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Duration=",
          ",SCTE35="
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "Duration=",
          ",SCTE35="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[[bui]\\](.*?)\\[\\/[bui]\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "b[/",
        "pump": [
          "[b]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\,\\,+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",a,",
        "pump": [
          ",,"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\/\\\\](node_modules|global|src)[\\/\\\\].*\\.css$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/",
        "pump": [
          "/src/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{\\{latinx\\|(.*?)\\}\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "xa",
        "pump": [
          "{{latinx|"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*button.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "button"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "button"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*[\\w-]+\\s*:\\s*.*\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta\t:\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^-+\\d.EX]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "+",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(&?merchantpin=)[^&]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c&merchantpin",
        "pump": [
          "&merchantpin="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[, |\\(](id|author|date|version|repository|sections):(.*?)[,|\\)]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "v ,s",
        "pump": [
          " id:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^user '(.*?)' given (.*?) cups of coffee is '(.*?)'$",
    "inputs": [
      {
        "prefix": [
          "user 'a",
          "a"
        ],
        "suffix": "s ",
        "pump": [
          "' given ",
          " cups of coffee is '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)被[^\\d]*(\\d+).*关注[^\\d]*(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a0",
          "a"
        ],
        "suffix": "a0a被",
        "pump": [
          "被",
          "a",
          "关注"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a0",
          "a"
        ],
        "suffix": "a0a被",
        "pump": [
          "a",
          "被",
          "a",
          "关注"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I am signed up in user group \"(\\d+)% off\" as \"(.+)\\/(.+)\"$",
    "inputs": [
      {
        "prefix": [
          "I am signed up in user group \"0% off\" as \"a"
        ],
        "suffix": "ff\" a",
        "pump": [
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "db version (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "db version "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*#+\\s*ENCODING:\\s*(.+)$",
    "inputs": [
      {
        "prefix": [
          "\t#\tENCODING:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<link rel='stylesheet'\\s?(id='[^']+')?\\s+href='(.*)' type='text/css' media='(.*)' />",
    "inputs": [
      {
        "prefix": [
          "<link rel='stylesheet'\tid='a'\thref='a"
        ],
        "suffix": "id=",
        "pump": [
          "' type='text/css' media='"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_m_h5[^;]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m_;_",
        "pump": [
          "_m_h5a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*%(include|include_end)%(.*?)%\\*\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "*a%/*",
        "pump": [
          "/*%include%"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Expected '__call__' to be called 1 time instead of 0 times on <InstanceDouble of <class 'doubles.testing.User'> object at .+> with any args, but was not. \\(.*doubles/test/expect_test.py:\\d+\\)",
    "inputs": [
      {
        "prefix": [
          "Expected '__call__' to be called 1 time instead of 0 times on <InstanceDouble of <class 'doublesatestingaUser'> object at a"
        ],
        "suffix": "h",
        "pump": [
          "> with any args, but was nota ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "command.*?failed",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aila",
        "pump": [
          "command"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " +\\} +|\\} +| +\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a }",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  }
]
