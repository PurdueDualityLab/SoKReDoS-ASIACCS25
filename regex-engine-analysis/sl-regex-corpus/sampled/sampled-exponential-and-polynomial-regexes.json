[
  {
    "regex": "</?[a-zA-z]+[^>]*/?>?",
    "inputs": [
      {
        "prefix": [
          "</a"
        ],
        "suffix": "</>>",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "<AA"
        ],
        "suffix": ">\u0000",
        "pump": [
          "aA"
        ]
      },
      {
        "prefix": [
          "a</a"
        ],
        "suffix": "a</><",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "<Aa"
        ],
        "suffix": ">\u0000",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?[0-9]*)[\\.]?([0-9]*)?[Ee]?([\\+-]?[0-9]*)?",
    "inputs": [
      {
        "prefix": [
          "-0",
          "0"
        ],
        "suffix": "0..",
        "pump": [
          "0",
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^__([a-z_]+)__\\s*=\\s*u?[\\'\"](.+?)[\\'\"]\\s*(#.+)?$",
    "inputs": [
      {
        "prefix": [
          "__a__\t=\tu\"a"
        ],
        "suffix": "a",
        "pump": [
          "\"#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{\\{\\s*(?:template:)?\\s*(?:wikify(?:-date)?|wfy|wiki)(\\s*\\|\\s*section)?\\s*\\}\\}",
    "inputs": [
      {
        "prefix": [
          "{{\t"
        ],
        "suffix": "f",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a{{\t"
        ],
        "suffix": "fy}{",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I set (.*) header to (.*)$",
    "inputs": [
      {
        "prefix": [
          "I set a"
        ],
        "suffix": "a",
        "pump": [
          " header to "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "EXT4-fs \\([^)]+\\): Delayed block allocation failed for inode \\d+ at logical offset \\d+ with max blocks \\d+ with (error \\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n): Delayed block allocatio",
        "pump": [
          "EXT4-fs (a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "5\\\\.3.*~dev",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "v5",
        "pump": [
          "5\\a3"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "`+,?\\s?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "`,a",
        "pump": [
          "`"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http:\\/\\/localhost:5984\\/test\\/with_time%2F.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "http://localhost:5984/test/with_time%2Fa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "dictionary id:* ?([^;]+)",
    "inputs": [
      {
        "prefix": [
          "dictionary id:"
        ],
        "suffix": ";",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "adictionary id:"
        ],
        "suffix": "c;di",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-・]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "{\"folder\":.*,\"item\":.*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(<br>)*\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "<br>>",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "h4.*{.*color: #008000;.*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+-\\d+-\\d+T\\d+[\\+\\-]\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "T",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(([^:]+):)?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"(.*)\\\" {.*}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+) ([kKmMgG][bB])/s wr",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "unlock_token=(.*)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l",
        "pump": [
          "unlock_token="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\-0-9]+)[\\s]*([a-z]*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a-\t$",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*order\\s+by\\s+.*",
    "inputs": [
      {
        "prefix": [
          "aorder\tby\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "aorder\tby\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Will store (.*?) according to default.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cc",
        "pump": [
          "Will store "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "not_yet_defined_field_type.*?FieldWithLazies",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "etn",
        "pump": [
          "not_yet_defined_field_type"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "cache size\\s+:\\s(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "cache size\t:\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@import\\s+['\"](.+?\\.scss)['\"]\\s*;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "@import\t\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s+)(\\e\\[\\d[^m]*?m)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u001b",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\r*login:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "\r"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([a-z0-9]+)(.*?)(/?)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "P\\(false positive\\)<\\/i><\\/td><td>(.+?)<\\/td>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</i",
        "pump": [
          "P(false positive)</i></td><td>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "set[A-Z].*:$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "et",
        "pump": [
          "setA"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)[\\.|$]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Drive State \\.+ (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Drive State . "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\s*)([^:]+)(::)?(.*)",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "::"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+.*)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\n]+?)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(etc)\\.\\.\\.$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "etc..",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "for `\\e.*Example\\e.*`",
    "inputs": [
      {
        "prefix": [
          "for `\u001ba"
        ],
        "suffix": "mEx$",
        "pump": [
          "Example\u001b"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "eEx$",
        "pump": [
          "for `\u001b",
          "Example\u001b"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/\\s*#\\s*sourceMappingURL=(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "//#sourceMappingURL="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^gdome_(\\w+)_(.+)",
    "inputs": [
      {
        "prefix": [
          "gdome_a"
        ],
        "suffix": "a",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "expected given block to perform slower than comparison block, but performed faster by \\d+.\\d+ times",
    "inputs": [
      {
        "prefix": [
          "expected given block to perform slower than comparison block, but performed faster by 0"
        ],
        "suffix": "k",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "aexpected given block to perform slower than comparison block, but performed faster by 0"
        ],
        "suffix": "ive",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w']*u[\\w']*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "u"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "a",
          "u"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*\\\\l\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t\\l\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Content-Type:(\\V*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ypCo\u000bConte",
        "pump": [
          "Content-Type:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-_.a-zA-Z0-9]\\\\: Attribute '.*' expected .*, got .*",
    "inputs": [
      {
        "prefix": [
          "a\\: Attribute 'a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "' expected ",
          ", got "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<group id=\"\\d+\" status=\"active\">\\s*<name>\\s*([^<]+)\\s*</nam",
    "inputs": [
      {
        "prefix": [
          "<group id=\"0\" status=\"active\">\t<name>\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a<group id=\"0\" status=\"active\">\t<name>\t",
          "a"
        ],
        "suffix": "us=",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "2016-08-03.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "2016-08-03"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "OAuth oauth_body_hash=\"\\S+\", oauth_consumer_key=\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "k\tOAuth ",
        "pump": [
          "OAuth oauth_body_hash=\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Non-U\\.S\\. Memb.*: (.*)",
    "inputs": [
      {
        "prefix": [
          "Non-U.S. Memba"
        ],
        "suffix": "a",
        "pump": [
          ": "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\.0*(\\d+)",
    "inputs": [
      {
        "prefix": [
          "0.0"
        ],
        "suffix": "01.",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0.0"
        ],
        "suffix": "0a0",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^WebPower Pro II Card|v[0-9]+.[0-9]+|(SN [0-9]+)",
    "inputs": [
      {
        "prefix": [
          "v0"
        ],
        "suffix": "e",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span[^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<",
        "pump": [
          "<span"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Unseal Key 2: (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Unseal Key 2: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[epsf\\s+(\\S+)(.*)\\]$",
    "inputs": [
      {
        "prefix": [
          "[epsf\ta"
        ],
        "suffix": "epsf",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--opt_a.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "--opt_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+a",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0$",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*test-package-with-one-dep@0\\.0\\.0",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p@0",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "v2.Validator\\.add\\(\\{.*\\\"format-with\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".",
        "pump": [
          "v2aValidator.add({"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\x20]?scale)([XY]?)\\(([^\\)]+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a) scal",
        "pump": [
          " scaleX(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "var _rollbarConfig = (.*);<\\/script>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "C;<",
        "pump": [
          "var _rollbarConfig = "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "assets\\/(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "assets/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*);\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[ \\t]*,[ \\t]*(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t,\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\t,\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "validate_augeas.*?matched less than it should",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ida",
        "pump": [
          "validate_augeas"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "indices\\/.+\\?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea",
        "pump": [
          "indices/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "NoListbox\\=([^\\;]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t;NoListb",
        "pump": [
          "NoListbox=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "   ([a-zA-Z0-9\\\\-]{36}) - ([^\\n]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \n   aaaaaaaaaaaaaaaaaaaaaa",
        "pump": [
          "   aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<table class=\"ordersReportSummary\">.*?</table>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mar",
        "pump": [
          "<table class=\"ordersReportSummary\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(.*?)\\]\\^\\[(.*?)\\]",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "]a",
        "pump": [
          "]^["
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "][",
        "pump": [
          "[",
          "]^["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "gulp\\.watch\\(.*\\*\\.js'",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s'*.",
        "pump": [
          "gulp.watch("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "https://(.*?).?facebook.com/events/(\\d+)/?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "kc",
        "pump": [
          "https://"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*gap\\-penalty:\\s*(\\-?\\d+)\\/(\\-?\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ap",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "leave (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "av\tle",
        "pump": [
          "leave a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:~.*|escape\\s+.*)u",
    "inputs": [
      {
        "prefix": [
          "escape\t"
        ],
        "suffix": "esc",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aescape\t"
        ],
        "suffix": "e~",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http_([^_]+).+_gbgff_.+_t_(.+)_s_",
    "inputs": [
      {
        "prefix": [
          "http_a",
          "a",
          "a"
        ],
        "suffix": "p_g",
        "pump": [
          "a",
          "_gbgff_a",
          "_t_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([0-9]+)(.+)(Scenario|Feature).js$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "i",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "vd([a-z]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d$v",
        "pump": [
          "vda"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<published>(.*)\\+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "<published>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Warning: Task \"(.*)\" not found.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " n",
        "pump": [
          "Warning: Task \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(jmp|call)\\s+([^:]+)\\s*:\\s*([^:]+)",
    "inputs": [
      {
        "prefix": [
          "\tjmp\t",
          "a",
          "\t:\t"
        ],
        "suffix": "c:",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)@",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Tcp port:.* Unix socket:.*",
    "inputs": [
      {
        "prefix": [
          "Tcp port:a"
        ],
        "suffix": "a",
        "pump": [
          " Unix socket:"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Tcp port:",
          " Unix socket:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?xGerritAuth=\\\"(.+?)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Au",
        "pump": [
          "xGerritAuth=\"a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "=",
        "pump": [
          "a",
          "xGerritAuth=\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "at f \\(.*?:11:12\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "11",
        "pump": [
          "at f ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Warning.*Malicious Host.*not defined in the observable dictionary",
    "inputs": [
      {
        "prefix": [
          "Warninga"
        ],
        "suffix": "o",
        "pump": [
          "Malicious Host"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<img[^>]+)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ia<><im",
        "pump": [
          "<imga"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\*(.*?)\\*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?):(.*?):(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":",
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^\\(\\s]+)(?:\\s*\\(\\s*([\\W\\w]+)\\s*\\))?",
    "inputs": [
      {
        "prefix": [
          "a\t(\t",
          "a"
        ],
        "suffix": "a\t",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":?--[\\w-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-:--",
        "pump": [
          ":--a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "&thumbnail_url=(.+?)&",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "&thumbnail_url=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "charset=([^ ;]+);?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sc;char",
        "pump": [
          "charset=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*/cbb/players/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "uninitialized constant (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n\tu",
        "pump": [
          "uninitialized constant a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?) \\((\\d+)\\): (.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " (0): a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d\\d+)-(\\d+)-(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a00",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--([a-zA-Z0-9_-]+)=(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "--a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w+)\\s+(\\[?[:\\.\\w\\*\\+\\-\\(\\)]+\\]?)([^,]*(;.*)?)$",
    "inputs": [
      {
        "prefix": [
          "\ta\t[a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\S+\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%\ta",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "super\\.(.*?)\\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er",
        "pump": [
          "super."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([,;]|\\s)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " \\!ruby\\/(object|struct):SM::(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ca\t !ruby/object:SM::",
        "pump": [
          " !ruby/struct:SM::a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "node_modules\\/rn-packager\\/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "node_modules/rn-packager/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\s]+\\s+as\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "as",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[url=.*\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "l[",
        "pump": [
          "[url="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img.+src=\\\"(http.*)\\\"",
    "inputs": [
      {
        "prefix": [
          "<imga"
        ],
        "suffix": "=",
        "pump": [
          "src=\"http"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "m",
        "pump": [
          "<imga",
          "src=\"http"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*[aeiou])ys$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ya",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*:\\/+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w]+)(?:\\((.*)\\))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div class=\"yt-alert-message\"[^>]*>([^<]+)</div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a</><div class=\"yt-alert-mess",
        "pump": [
          "<div class=\"yt-alert-message\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I call \"(.*?)\" and then I call \"(.*?)\"$",
    "inputs": [
      {
        "prefix": [
          "I call \"a"
        ],
        "suffix": " I call ",
        "pump": [
          "\" and then I call \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]+",
    "inputs": [
      {
        "prefix": [
          "00"
        ],
        "suffix": "\u0000",
        "pump": [
          "70"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000a",
        "pump": [
          "\u0000"
        ]
      },
      {
        "prefix": [
          "00"
        ],
        "suffix": "\u0000",
        "pump": [
          "70"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "q\\w+?t",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "qa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?-----BEGIN CERTIFICATE-----",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "E----",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@(.+)-(debug|inspectorServer)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "@a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*\\s.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)-(m|r)-(\\d+)(\\.\\w+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-ra-",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w\\._]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<<[-~](@heredelim).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<<-@heredelim"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+)[ \\t]*\\n=+[ \\t]*\\n+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\sxmlns:([a-z0-9\\-]+)=\".*?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "x",
        "pump": [
          "\txmlns:a=\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "/series/\\d+/.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/series/0/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$bundles = array\\((.*)\\);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a)",
        "pump": [
          "$bundles = array("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(.+?)( .*?)>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\s]+<(tr|td|th|ul|ol|li|dl|dt|dd|br)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "u",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\.abproject",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ea",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*[\\\"|\\']([^\\\"\\']+)[\\\"|\\']\\s*([^\\[]*)(\\[.*\\]\\s*)*",
    "inputs": [
      {
        "prefix": [
          "\"a\""
        ],
        "suffix": "a]|[",
        "pump": [
          "[][]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Parameters:\\*\\*((.|[\\n\\r])+?)\\*\\*Returns:",
    "inputs": [
      {
        "prefix": [
          "Parameters:**!"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "Parameters:**"
        ],
        "suffix": "s",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "Parameters:**Q"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "Parameters:**"
        ],
        "suffix": "et",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\s*\\n){3,}",
    "inputs": [
      {
        "prefix": [
          "\n\n"
        ],
        "suffix": "\t",
        "pump": [
          "\t\n"
        ]
      },
      {
        "prefix": [
          "\n\n"
        ],
        "suffix": "a",
        "pump": [
          "\t\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t",
        "pump": [
          "\t\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^# yamllint disable( rule:\\S+)*\\s*$",
    "inputs": [
      {
        "prefix": [
          "# yamllint disable"
        ],
        "suffix": "n\t:",
        "pump": [
          " rule:a rule:a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(([A-Z]\\w+\\s*)+):\\n\\n",
    "inputs": [
      {
        "prefix": [
          "A0"
        ],
        "suffix": "",
        "pump": [
          "A0A0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\na",
        "pump": [
          "AaAa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "UKPEOHUKPEOHTZSAINPPHNLQDG",
        "pump": [
          "UKPEOH"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^;])+)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": ")(;\\",
        "pump": [
          "''''"
        ]
      },
      {
        "prefix": [
          "'\u0000"
        ],
        "suffix": "",
        "pump": [
          "''\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[-+]?(\\d*,\\d*)+(?:\\.)?\\d*\\s*%$",
    "inputs": [
      {
        "prefix": [
          ","
        ],
        "suffix": "",
        "pump": [
          ",0,"
        ]
      },
      {
        "prefix": [
          "+"
        ],
        "suffix": "++",
        "pump": [
          "0,0"
        ]
      },
      {
        "prefix": [
          ",,"
        ],
        "suffix": "",
        "pump": [
          "d,"
        ]
      },
      {
        "prefix": [
          "+"
        ],
        "suffix": ",2,29592,2,29592092959678,6709,786,,67,",
        "pump": [
          ",2,29592"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^I generate a (.*)project named '((?:\\w|-|_)+)' that is '([^']*)'$",
    "inputs": [
      {
        "prefix": [
          "I generate a project named 'q"
        ],
        "suffix": "",
        "pump": [
          "_"
        ]
      },
      {
        "prefix": [
          "I generate a project named '"
        ],
        "suffix": "r",
        "pump": [
          "a_"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([a-z]+\\s*)+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\x00",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "\u0000",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "aaaaaaaaaaaaaaaaaa\b",
        "pump": [
          "aaaa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[\\w\\s=+-/]+\\((\\{(.|\\n)*\\})\\);?",
    "inputs": [
      {
        "prefix": [
          "a({"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "a({"
        ],
        "suffix": "}",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "a({"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "a({"
        ],
        "suffix": "})\n(",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:.*\\n)*(.*)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|<[^\"'>]*>|\\\\[\"'>]|[^\"'>])*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "<>>\\",
        "pump": [
          "<<>"
        ]
      },
      {
        "prefix": [
          "<"
        ],
        "suffix": "",
        "pump": [
          "\"><"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\"\"\\<'\\",
        "pump": [
          "\"\"<\\>"
        ]
      },
      {
        "prefix": [
          "<\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(((((\\*)|(/*)|(-*))(\\s*)%([aAbBdeHIjmMLpSUwWyYZ]{1}))+)|((\\s*)%([cxX]{1})))$",
    "inputs": [
      {
        "prefix": [
          "*%A"
        ],
        "suffix": "\\x00",
        "pump": [
          "%A"
        ]
      },
      {
        "prefix": [
          "%a"
        ],
        "suffix": "\t*",
        "pump": [
          "\t%aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "%a%a%a%a%a%a%a%a%a\n%a%a %a%a%a-",
        "pump": [
          "%a%a%a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<!--(.|[\\r\\n])*?-->",
    "inputs": [
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "!-",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "->-",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "height=\"([^\"]+)*\"",
    "inputs": [
      {
        "prefix": [
          "height=\""
        ],
        "suffix": "",
        "pump": [
          "#!"
        ]
      },
      {
        "prefix": [
          "height=\"a"
        ],
        "suffix": "i",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "height=\"\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "height=\""
        ],
        "suffix": "$[te$[te3l)WTa?@<a",
        "pump": [
          "$[te"
        ]
      },
      {
        "prefix": [
          "height=\""
        ],
        "suffix": "",
        "pump": [
          "#!"
        ]
      },
      {
        "prefix": [
          "height=\"a"
        ],
        "suffix": "h",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "height=\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "height=\""
        ],
        "suffix": "\r\nY*\r\nY*PdxTQZ1l/U",
        "pump": [
          "\r\nY*"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "* Draw an ellipse tilted toward the mouse. Thanks to\n\t\t\t * http:",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": " a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " Dra Draw an ellip",
        "pump": [
          " Dra"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([a-zA-Z][a-zA-Z_0-9]*)+( )",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a  ",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "AA"
        ],
        "suffix": "",
        "pump": [
          "aA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "CAhJCAhJhboVlOqdmt",
        "pump": [
          "CAhJ"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "AA0"
        ],
        "suffix": "",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "ZiKCZiKCzBGUJLMrq",
        "pump": [
          "ZiKC"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\d+[smhdw]?)+$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "dd",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "ddd"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "218921891909587886B",
        "pump": [
          "2189"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:[_a-z0-9-]+)(\\.[_a-z0-9-]+)*@([a-z0-9-]+)(\\.[a-zA-Z0-9\\-\\.]+)*(\\.[a-z]{2,4})$",
    "inputs": [
      {
        "prefix": [
          "a.a@-"
        ],
        "suffix": "",
        "pump": [
          ".-.-"
        ]
      },
      {
        "prefix": [
          "a@a"
        ],
        "suffix": "a-.a-_",
        "pump": [
          ".a.a"
        ]
      },
      {
        "prefix": [
          "-@-\u0000-A"
        ],
        "suffix": "",
        "pump": [
          "A-A"
        ]
      },
      {
        "prefix": [
          "p@kl"
        ],
        "suffix": ".y.l.ly..y.l.ly.lk.yl.y.l.ly.lkll.ylkklkl..y.",
        "pump": [
          ".y.l.ly."
        ]
      },
      {
        "prefix": [
          "a.a@-"
        ],
        "suffix": "",
        "pump": [
          ".-.-"
        ]
      },
      {
        "prefix": [
          "a@a"
        ],
        "suffix": "A",
        "pump": [
          ".a.a"
        ]
      },
      {
        "prefix": [
          "-@-\u0000--"
        ],
        "suffix": "",
        "pump": [
          "0--"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(pgp_sym_(encrypt|decrypt))\\(((.|\\n)*?)\\)",
    "inputs": [
      {
        "prefix": [
          "pgp_sym_encrypt("
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "pgp_sym_decrypt("
        ],
        "suffix": "ec",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "pgp_sym_encrypt("
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "pgp_sym_decrypt("
        ],
        "suffix": "_",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[A-Z](?:_?[A-Z0-9]+)*$",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "A_0"
        ],
        "suffix": "0__",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "A0"
        ],
        "suffix": "\u0000",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "AAAAAAAAAAAAAAAAAAA\b",
        "pump": [
          "AAAA"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "{(([^}]|\\r\\n?|\\n)*)}",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:[;{},\\s]|\\/\\/.*|\\/\\*.*?\\*\\/)*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "~",
        "pump": [
          "/**//**/"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "//\t\t"
        ]
      },
      {
        "prefix": [
          "//   "
        ],
        "suffix": "\t\t////\t\t////\t//\t\t\t \t\r   \n \r////   \n\n/",
        "pump": [
          "\t\t////"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^<option(?:\\s+\\w+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s+value[\\s=]",
    "inputs": [
      {
        "prefix": [
          "<option"
        ],
        "suffix": "",
        "pump": [
          " v=''"
        ]
      },
      {
        "prefix": [
          "<option"
        ],
        "suffix": "<\t'\tvalu",
        "pump": [
          "\ta=\"\"\ta=\"\""
        ]
      },
      {
        "prefix": [
          "<optionsw=s"
        ],
        "suffix": "",
        "pump": [
          "\"\"sw=s"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\s*([^:]+?)\\s*:((?:\\(.*?\\)|\".*?\"|'.*?'|[^;]+?)+);?$",
    "inputs": [
      {
        "prefix": [
          " \\x00:)"
        ],
        "suffix": "(\";*",
        "pump": [
          "''"
        ]
      },
      {
        "prefix": [
          "a:a"
        ],
        "suffix": "a;\t:",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000:\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\"\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\\s:\\\\s:\\|\".*?\"|'.*?;?$",
        "pump": [
          "\\s:\\"
        ]
      },
      {
        "prefix": [
          " \\x00::"
        ],
        "suffix": "(\";*",
        "pump": [
          "''"
        ]
      },
      {
        "prefix": [
          "a:a"
        ],
        "suffix": "a;\t:",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000:'\u0000"
        ],
        "suffix": "",
        "pump": [
          "''\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "g:<ig:<i-%662K09+U<5;\b",
        "pump": [
          "g:<i"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "ATTENDEE(:|;)(.*?\\r?\\n)(\\s.*?\\r?\\n)*",
    "inputs": [
      {
        "prefix": [
          "ATTENDEE;\r\n"
        ],
        "suffix": "AT",
        "pump": [
          "\t\n\r\n"
        ]
      },
      {
        "prefix": [
          "ATTENDEE;\r\n"
        ],
        "suffix": "E:",
        "pump": [
          "\t\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((?:[^\"]*|\\\\.)*)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\"\"",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\n +\\/\\*[^*]*\\*+(?:[^\\/][^*]*\\*+)*\\/)?\\n *var shadowed[\\s\\S]+?;\\n",
    "inputs": [
      {
        "prefix": [
          "\\x0a /**"
        ],
        "suffix": "",
        "pump": [
          "****"
        ]
      },
      {
        "prefix": [
          "\n /**"
        ],
        "suffix": "*/",
        "pump": [
          "a**a*"
        ]
      },
      {
        "prefix": [
          "\\x0a /**"
        ],
        "suffix": "",
        "pump": [
          "****"
        ]
      },
      {
        "prefix": [
          "\n /**"
        ],
        "suffix": " /*/;\n var s",
        "pump": [
          "a**a*"
        ]
      },
      {
        "prefix": [
          " \n /"
        ],
        "suffix": "******************\\*>^$&\\[.,>:>\\=_=/!=~$].&`(,:$^-****\\*>^$&\\)./+?(|_=[.,>",
        "pump": [
          "****"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\*??) = ((\\(\\) .*)+)",
    "inputs": [
      {
        "prefix": [
          "* = "
        ],
        "suffix": "a",
        "pump": [
          "() () "
        ]
      },
      {
        "prefix": [
          "* = "
        ],
        "suffix": "a",
        "pump": [
          "() () "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[\\s]*([\\S]+)+[\\s]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\ta",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "SS"
        ],
        "suffix": "\u0000",
        "pump": [
          "SS"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "SSS"
        ],
        "suffix": "\u0000",
        "pump": [
          "SS"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.+=.+)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "a=a"
        ]
      },
      {
        "prefix": [
          "\u0000=\u0000\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "=\u0000\u0000\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "a=a"
        ]
      },
      {
        "prefix": [
          "\u0000=\u0000\u0000=\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000=\u0000\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\/\\*(.|[\\r\\n])*?\\*\\/",
    "inputs": [
      {
        "prefix": [
          "/*"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(_form|_query|_request|globals|session)({(\".+?\"|\\d+|\\$[\\w_]+)})+(\\[\\[\\d+\\]\\])*",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "(\\n +at .+)+$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\n at a\n at a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\n at a\n at a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "file:/{2,}(-\\.)?([^\\s/?\\.#-]+\\.?)+(/[^\\s]*)?",
    "inputs": [
      {
        "prefix": [
          "file://a"
        ],
        "suffix": "\t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "file://\u0000\u0000"
        ],
        "suffix": "##",
        "pump": [
          "$\u0000"
        ]
      },
      {
        "prefix": [
          "file://a"
        ],
        "suffix": "il.f\tf",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "file://\u0000\u0000\u0000"
        ],
        "suffix": "##",
        "pump": [
          "$\u0000\u0000"
        ]
      },
      {
        "prefix": [
          "file:/a"
        ],
        "suffix": "\t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "file:/\u0000\u0000"
        ],
        "suffix": "##",
        "pump": [
          "$\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?",
    "inputs": [
      {
        "prefix": [
          " \"!"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "\t\""
        ],
        "suffix": "\t)a'\\",
        "pump": [
          "a\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\n2 NOTE ?(.*(?:\\n3.*)*)",
    "inputs": [
      {
        "prefix": [
          "\n2 NOTE "
        ],
        "suffix": "a",
        "pump": [
          "\n3\n3"
        ]
      },
      {
        "prefix": [
          "\n2 NOTE "
        ],
        "suffix": "a",
        "pump": [
          "\n3\n3"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((?:.*?[;\\}])+)([^;\\}]+?)$",
    "inputs": [
      {
        "prefix": [
          ";"
        ],
        "suffix": "",
        "pump": [
          ";;"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a;",
        "pump": [
          ";;"
        ]
      },
      {
        "prefix": [
          ";}"
        ],
        "suffix": "",
        "pump": [
          "}}"
        ]
      },
      {
        "prefix": [
          "^"
        ],
        "suffix": ";^}}=;<;}|;}=};}?};",
        "pump": [
          ";^}}"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+=]*)*(\\.(jpeg|jpg|gif|png|webp))$",
    "inputs": [
      {
        "prefix": [
          "i"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "/00.00.00",
        "pump": [
          "aaa."
        ]
      },
      {
        "prefix": [
          "a\u0000a-"
        ],
        "suffix": "",
        "pump": [
          "a-"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "htochtocxnexazcondk",
        "pump": [
          "htoc"
        ]
      },
      {
        "prefix": [
          "i"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "/%.",
        "pump": [
          "aaa."
        ]
      },
      {
        "prefix": [
          "a\u0000a/a"
        ],
        "suffix": "",
        "pump": [
          "da"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "8pgp8pgpejpgpegpeg.jp",
        "pump": [
          "8pgp"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\"(\\\\[\\s\\S]|[^\"])*\"|'(\\\\[\\s\\S]|[^'])*'|(\\?)",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\\"a'\\a\"?",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\"\\'\\]"
        ],
        "suffix": "^\\((\\\\(\\^\\((\\\\(\\]s(]|'^S|*'s|([\\|\\ \\\t'\n[''[^**)*'''[\\\\|S\\",
        "pump": [
          "^\\((\\\\(\\"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\\"a",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "T\\N;[\\])]\\*\\|(|^]|(]\"\\((\\\\[][.["
        ],
        "suffix": "\\)\\|]\\*\\\\)\\|]\\*\\|(|]')[.[\\)\\|]\t\\['||] 7RAH[#",
        "pump": [
          "\\)\\|]\\*\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Current Nameservers:\\n\\n((.+\\n)+)\\n",
    "inputs": [
      {
        "prefix": [
          "Current Nameservers:\\x0a\\x0a!\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          "Current Nameservers:\n\n"
        ],
        "suffix": "s:",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "Current Nameservers:\\x0a\\x0aC\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          "Current Nameservers:\n\n"
        ],
        "suffix": "m",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "width=\"([^\"]+)*\"",
    "inputs": [
      {
        "prefix": [
          "width=\""
        ],
        "suffix": "",
        "pump": [
          "#!"
        ]
      },
      {
        "prefix": [
          "width=\"a"
        ],
        "suffix": "=\"\"\"",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "width=\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "width=\""
        ],
        "suffix": "`3P}`3P}Z\rcg]CK=?2",
        "pump": [
          "`3P}"
        ]
      },
      {
        "prefix": [
          "width=\""
        ],
        "suffix": "",
        "pump": [
          "#!"
        ]
      },
      {
        "prefix": [
          "width=\"a"
        ],
        "suffix": "i",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "width=\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "width=\""
        ],
        "suffix": "~{?k~{?k<.xJsX=4+S",
        "pump": [
          "~{?k"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^( {4}[^\\n]+\\n*)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a\na",
        "pump": [
          "    a    a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^ip-address\\s*(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}) *(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})*",
    "inputs": [
      {
        "prefix": [
          "ip-address0.0.0.0"
        ],
        "suffix": "0.0.000.000.00",
        "pump": [
          "0.0.0.000.0.0.0"
        ]
      },
      {
        "prefix": [
          "ip-addressd\u0000d\u0000d\u0000dd\u0000d"
        ],
        "suffix": "",
        "pump": [
          "ddd\u0000dd\u0000d"
        ]
      },
      {
        "prefix": [
          "ip-address0.0.0.0"
        ],
        "suffix": "0.0.00.00.0",
        "pump": [
          "0.0.0.00"
        ]
      },
      {
        "prefix": [
          "ip-addressd\u0000d\u0000d\u0000dd\u0000d\u0000d\u0000d"
        ],
        "suffix": "\u0000",
        "pump": [
          "dd\u0000d\u0000d\u0000d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\s*)<(\\/)?([\\w\\-:]+)((?:\\s+|(?:\\s+[\\w\\-:]+)|(?:\\s+[\\w\\-:]+=[^\\s\"'<>]+)|(?:\\s+[\\w\\-:\"]+=\"[^\"]*\")|(?:\\s+[\\w\\-:\"]+='[^']*'))*)(\\/)?>(\\s*)",
    "inputs": [
      {
        "prefix": [
          "<0"
        ],
        "suffix": "",
        "pump": [
          "\\x09\\x09-"
        ]
      },
      {
        "prefix": [
          "</a\t"
        ],
        "suffix": "/",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          "<Q"
        ],
        "suffix": "\r\r\t\r\r\r\t\r\n\n      ",
        "pump": [
          "\r\r\t\r"
        ]
      },
      {
        "prefix": [
          "<0"
        ],
        "suffix": "",
        "pump": [
          "\\x09\\x09-"
        ]
      },
      {
        "prefix": [
          "</a\t"
        ],
        "suffix": "a=</\"\t",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          "<p"
        ],
        "suffix": "\r \t\n\r \t\n\n\n\t\t\n\r\n\t",
        "pump": [
          "\r \t\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<meta name=\"title\"([^>]*)*>\\n*",
    "inputs": [
      {
        "prefix": [
          "<meta name=\"title\""
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          "<meta name=\"title\""
        ],
        "suffix": "tl",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "9<meta name=\"ti"
        ],
        "suffix": "tle\"tle\"q6O~*\n\b3Ym\r{aR",
        "pump": [
          "tle\""
        ]
      },
      {
        "prefix": [
          "<meta name=\"title\""
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          "<meta name=\"title\""
        ],
        "suffix": "it",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<meta name=\"ti"
        ],
        "suffix": "tle\"tle\"h)eI(\tmIo%e(_x",
        "pump": [
          "tle\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<[a-zA-Z\\/](.|\\n)*?>",
    "inputs": [
      {
        "prefix": [
          "</"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<a"
        ],
        "suffix": "<",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "</"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<a"
        ],
        "suffix": "<",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?",
    "inputs": [
      {
        "prefix": [
          "a ='"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "a\"\\\t",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          ":='."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "a ='"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "\"a\"\\\t",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          ":='\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*(([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})[\\s\\/,;]*)+$",
    "inputs": [
      {
        "prefix": [
          "\\x00@a.aa"
        ],
        "suffix": "{",
        "pump": [
          "a@a.aa.aa,@-.aa.aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a,\t@",
        "pump": [
          "a@a.aa.aa"
        ]
      },
      {
        "prefix": [
          "\u0000@-\u0000aa\u0000@-\u0000a"
        ],
        "suffix": "",
        "pump": [
          "0-\u0000a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "Ir@r.vmbgkpaozuhIr@r.vmbgkpaozuhgipJ@r.iip'4@r.mbgkpmmcpblhspqfeuwanumima@r.ipr.i@",
        "pump": [
          "Ir@r.vmbgkpaozuh"
        ]
      },
      {
        "prefix": [
          "\\x00@a.a"
        ],
        "suffix": "@",
        "pump": [
          "a@a.a.a,@-.a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a,\t@",
        "pump": [
          "a@a.a.a"
        ]
      },
      {
        "prefix": [
          "\u0000@-\u0000a\u0000@-\u0000a/"
        ],
        "suffix": "\u0000",
        "pump": [
          "/\u0000@-\u0000a/"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\\\|\\/)?(.+(\\\\|\\/))*(.+?([\\.\\-_ ]\\d{4}[\\.\\-_ ].+?(BDRip|bluray|DVDRip|XVID)).+)\\.(.+)$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "]///"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a//a 0000 0a ",
        "pump": [
          "a\\"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "|/\u0000|/\u0000"
        ]
      },
      {
        "prefix": [
          "//ray.)y|+(\\a\\I((b$.|+D}iy X)V\\(u)dD)|^D "
        ],
        "suffix": "+\\D]\\l\\/+\\D]\\l\\/i\\\\+(a\\\\",
        "pump": [
          "+\\D]\\l\\/"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[\\(\\)\\[\\]\\*\\+\\?\\{\\}]|(\\\\[\\(\\)\\[\\]\\*\\+\\?\\{\\}]|[^\\s()])*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\\((",
        "pump": [
          "\\(\\*"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\\(\t",
        "pump": [
          "\\(\\*"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "name-59\\.99(?:.|\\n|\\r)*bg-danger(?:.|\\n|\\r)*text-danger(?:.|\\n|\\r)*59\\.99(?:.|\\n|\\r)*<th class=\"text-center\">5<\\/th><\\/tr>",
    "inputs": [
      {
        "prefix": [
          "name-59.99"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "name-59.99"
        ],
        "suffix": "xt-da",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "name-59.99"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "name-59.99"
        ],
        "suffix": "xt",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "( {2,})+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "    "
        ]
      },
      {
        "prefix": [
          "     "
        ],
        "suffix": "\u0000",
        "pump": [
          "   "
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " a",
        "pump": [
          "    "
        ]
      },
      {
        "prefix": [
          "     "
        ],
        "suffix": "\u0000",
        "pump": [
          "   "
        ]
      },
      {
        "prefix": [
          " "
        ],
        "suffix": "#",
        "pump": [
          "  "
        ]
      },
      {
        "prefix": [
          "  "
        ],
        "suffix": "\u0000",
        "pump": [
          "  "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\"(?:\\\\.|[^\"])*\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\"\"\"",
        "pump": [
          "\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<\\?xml\\sversion=\"1.0\"\\?>\\n<root (?:xmlns:\\w+=\".+?\".?)+>\\n\\s+([^\\s].+)\\n<\\/root>",
    "inputs": [
      {
        "prefix": [
          "<?xml version=\"1!0\"?>\\x0a<root xmlns:a=\"!\""
        ],
        "suffix": "",
        "pump": [
          "xmlns:a=\"!\"\""
        ]
      },
      {
        "prefix": [
          "<?xml\tversion=\"1a0\"?>\n<root "
        ],
        "suffix": "sion",
        "pump": [
          "xmlns:a=\"a\"\""
        ]
      },
      {
        "prefix": [
          "<?xml version=\"1<0\"?>\\x0a<root xmlns:a=\"<\""
        ],
        "suffix": "",
        "pump": [
          "xmlns:a=\"!\"\""
        ]
      },
      {
        "prefix": [
          "<?xml\tversion=\"1a0\"?>\n<root "
        ],
        "suffix": "?>",
        "pump": [
          "xmlns:a=\"a\"\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.*)\\%\\{time(:[^\\}]+)*\\}(.*)",
    "inputs": [
      {
        "prefix": [
          "%{time"
        ],
        "suffix": "",
        "pump": [
          ":&:;"
        ]
      },
      {
        "prefix": [
          "%{time"
        ],
        "suffix": "a",
        "pump": [
          ":a:a"
        ]
      },
      {
        "prefix": [
          "%{time"
        ],
        "suffix": "",
        "pump": [
          ":&:;"
        ]
      },
      {
        "prefix": [
          "%{time"
        ],
        "suffix": "a",
        "pump": [
          ":a:a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:<script.*?>)((\\n|\\r|.)*?)(?:<\\/script>)",
    "inputs": [
      {
        "prefix": [
          "<script>"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "<script>"
        ],
        "suffix": "ip",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<script>"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "<script>"
        ],
        "suffix": "ip",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([\\+\\-\\(\\)\\d]*\\d[\\+\\-\\(\\)\\d]*,?)+$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ",,",
        "pump": [
          "(0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "693469349950182O",
        "pump": [
          "6934"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<(?:\\w+:)?svg(?:( alt=\".*?\")|( class=\".*?\")|( title=\".*?\")|(?:.*?))+>.*</(?:\\w+:)?svg>",
    "inputs": [
      {
        "prefix": [
          "<svg"
        ],
        "suffix": "",
        "pump": [
          "{"
        ]
      },
      {
        "prefix": [
          "<svg"
        ],
        "suffix": "a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<svg alt=\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\" alt=\"\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "<svg<svgR\t\tyrsi?h??:^",
        "pump": [
          "<svg"
        ]
      },
      {
        "prefix": [
          "<svg"
        ],
        "suffix": "",
        "pump": [
          "{"
        ]
      },
      {
        "prefix": [
          "<svg"
        ],
        "suffix": "e> ti",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<svg alt=\""
        ],
        "suffix": "",
        "pump": [
          "\"\" alt=\""
        ]
      },
      {
        "prefix": [
          ":<3"
        ],
        "suffix": ":svg:svgjAYr3EgoktyO5",
        "pump": [
          ":svg"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(lunascape|maxthon|netfront|jasmine|blazer)[\\/\\s]?((\\d+)?[\\w\\.]+)*",
    "inputs": [
      {
        "prefix": [
          "blazer\ta"
        ],
        "suffix": "h0",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "blazer.w"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "blazer\ta"
        ],
        "suffix": "l$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "blazer.w"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([A-Z][^.\\s]*)+$",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "\\x09",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "AA"
        ],
        "suffix": ".",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "X0"
        ],
        "suffix": "NFCTNFCTyEUSMzUG>T@\nD",
        "pump": [
          "NFCT"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "\\x09",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a\t",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "AA\u0000"
        ],
        "suffix": ".",
        "pump": [
          "A\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "KU|H+ZKU|H+Z_N,V9R$39Bp^r!JqH!)h:{p/pK\t",
        "pump": [
          "KU|H+Z"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(:|\\s)\\+(\\d+)+\\.(\\d+)",
    "inputs": [
      {
        "prefix": [
          ":+0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "\t+0"
        ],
        "suffix": "0..",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ":dd"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          "\t+"
        ],
        "suffix": "5504550491378557642",
        "pump": [
          "5504"
        ]
      },
      {
        "prefix": [
          ":+0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "\t+0"
        ],
        "suffix": "+a",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ":dd"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          ":+"
        ],
        "suffix": "336833685632302669",
        "pump": [
          "3368"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(BEGIN:VEVENT(.*\\n)*?END:VEVENT\\r?\\n)",
    "inputs": [
      {
        "prefix": [
          "BEGIN:VEVENT"
        ],
        "suffix": "",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "BEGIN:VEVENT"
        ],
        "suffix": "D:VEVEN",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "BEGIN:VEVENT"
        ],
        "suffix": "",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "BEGIN:VEVENT"
        ],
        "suffix": "IN:V",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "typeof asset(.|\\s)+?require\\('fs'\\)\\.readFileSync\\(__dirname \\+ '\\/style\\.css', 'utf8'\\)",
    "inputs": [
      {
        "prefix": [
          "typeof asset!"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "typeof asset"
        ],
        "suffix": "mere",
        "pump": [
          "a\t"
        ]
      },
      {
        "prefix": [
          "typeof asset\u0000s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "typeof asset + '"
        ],
        "suffix": "  \t\t  \t\t\t\t\r \t\r\t\r\r\r\t",
        "pump": [
          "  \t\t"
        ]
      },
      {
        "prefix": [
          "typeof assetz"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "typeof asset"
        ],
        "suffix": "y",
        "pump": [
          "a\t"
        ]
      },
      {
        "prefix": [
          "typeof asset\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "s\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*([^ \"'>=\\^]+(\\s*=\\s*((\"[^\"]*\")|('[^']*')|([^ \\t\\n\"']+)))?\\s+)*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\"",
        "pump": [
          "\\x0e \\x09=\"\"\\x09"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\u000b\t>'",
        "pump": [
          "a\t=a\t"
        ]
      },
      {
        "prefix": [
          "xmsf~\\4R$ Zngd)_Pj7@qK|y(|"
        ],
        "suffix": "c\tOs\r\t$@Z\rc\tOs\r\t$@Z\rL%U(\r\ne8s@\bW]mYuQw_?YB\n]o~8O)(;UEWg8I(\nT(t\b3Ir_zH4ofnzz#\ndZTap",
        "pump": [
          "c\tOs\r\t$@Z\r"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^---\\n((?:.*\\n)*)---",
    "inputs": [
      {
        "prefix": [
          "---\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "---\n"
        ],
        "suffix": "-a",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<key>CFBundleDevelopmentRegion<\\/key>(\\s|\\n)*<string>(\\w*)<\\/string>",
    "inputs": [
      {
        "prefix": [
          "<key>CFBundleDevelopmentRegion</key>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<key>CFBundleDevelopmentRegion</key>"
        ],
        "suffix": "y",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<key>CFBundleDevelopmentRegion</key>\n\n \t\r\r \r\r\n  \t\r\r"
        ],
        "suffix": "\r\n\r\n\n \r\n\r\n\r\n\n \r\n \r\t \n \r\t  \t\t \n \n \n\r\r",
        "pump": [
          "\r\n\r\n\n \r\n"
        ]
      },
      {
        "prefix": [
          "<key>CFBundleDevelopmentRegion</key>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<key>CFBundleDevelopmentRegion</key>"
        ],
        "suffix": "y>CFBundleDevelopmen",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "string><d<key>CFBundleDevelopmentRegion</key>\t \t\n\r\n\n \n\t   \t \t\n \t"
        ],
        "suffix": "\n\n\n\n\n\n\n\n \r\r \n\t\t\r \r \r\t",
        "pump": [
          "\n\n\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((?:\\\\,|.)+?)(?:,(.+))?$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\\,\\,"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(#.*?\\n)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "#\n#\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Service Information \"update\"\\n(?:.*\\n)*?URL:\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "Service Information \"update\"\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "Service Information \"update\"\n"
        ],
        "suffix": "UR",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "Service Information \"update\"\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "Service Information \"update\"\n"
        ],
        "suffix": "Ua",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:\\/\\*(.|\\n|\\r)*?\\*\\/)",
    "inputs": [
      {
        "prefix": [
          "/*"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "\n",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Stack trace:(.|\\n)*?\\n\\n",
    "inputs": [
      {
        "prefix": [
          "Stack trace:\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a"
        ]
      },
      {
        "prefix": [
          "Stack trace:"
        ],
        "suffix": " t",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "Stack trace:\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a"
        ]
      },
      {
        "prefix": [
          "Stack trace:"
        ],
        "suffix": "t",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<textarea(\\r|\\t|\\n|.)*?<\\/textarea>",
    "inputs": [
      {
        "prefix": [
          "<textarea"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<textarea"
        ],
        "suffix": "ar",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<textareaeaxtextarea<xtaareaxtarareaxtextarea<xt"
        ],
        "suffix": "\t\t \t\r\t\t\t \t\r\t\t\r \n\n\n\r \t\t\n \n\n \r \r\t\t  \r\n\r\r\n\t ta",
        "pump": [
          "\t\t \t\r\t"
        ]
      },
      {
        "prefix": [
          "<textarea"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<textarea"
        ],
        "suffix": "e",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<textarea<\t\r\t\r"
        ],
        "suffix": "\t\t\t\t\t\t\t\t\t\n\t\t\t\n\n\t\t",
        "pump": [
          "\t\t\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[uU][rR][lL]\\(\\s*((\\\\([^0-9a-fA-F]+|[0-9a-fA-F]+\\s*)|[^\\\"\\'\\r\\n\\)\\s])+)",
    "inputs": [
      {
        "prefix": [
          "URL("
        ],
        "suffix": "a\"",
        "pump": [
          "\\$\\$"
        ]
      },
      {
        "prefix": [
          "URL("
        ],
        "suffix": "(\\URLaU\tUR",
        "pump": [
          "\\$\\$"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((.*\\n)*)\\r?\\n",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\ra\n",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(sie)-(\\w+)*",
    "inputs": [
      {
        "prefix": [
          "sie-a"
        ],
        "suffix": "sa-",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "sie-w"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "sie-a"
        ],
        "suffix": "iesa$si",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "sie-ww"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((([a-z0-9][a-z0-9\\-]*[a-z0-9])|[a-z0-9]+)\\.)*([a-z]+|xn\\-\\-[a-z0-9]+)\\.?$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "!",
        "pump": [
          "xn."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "xn-",
        "pump": [
          "aa.aa."
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "00\u00000"
        ]
      },
      {
        "prefix": [
          "hxx.dxn.axx.xxx.d"
        ],
        "suffix": "xn.axx.xxx.xx.xn.axx.xxx.xx.dxn.axx.x-",
        "pump": [
          "xn.axx.xxx.xx."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+=]*)*(\\.mp4)$",
    "inputs": [
      {
        "prefix": [
          "i"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "ps://a.",
        "pump": [
          "aaa."
        ]
      },
      {
        "prefix": [
          "a\u0000aa/+"
        ],
        "suffix": "",
        "pump": [
          "d+"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "3954395488848103085",
        "pump": [
          "3954"
        ]
      },
      {
        "prefix": [
          "i"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "/0.",
        "pump": [
          "aaa."
        ]
      },
      {
        "prefix": [
          "a\u0000a/~"
        ],
        "suffix": "",
        "pump": [
          "d~"
        ]
      },
      {
        "prefix": [
          "http://"
        ],
        "suffix": "ifuzifuzvpwnpgkfifk",
        "pump": [
          "ifuz"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[\\w\\d]+([\\w\\d\\!\\#\\$\\%\\&\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~\\.]*[\\w\\d]+)*@([\\w\\d]+\\.)+[\\w]{2,}$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "_0"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "0.@",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "lCGxlCGxST4n+K8f",
        "pump": [
          "lCGx"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "_0"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "0.@",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "pmvGpmvGdc?_OSnJ",
        "pump": [
          "pmvG"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*\\[\\s*'((?:\\\\'|.)*?)'\\s*\\]",
    "inputs": [
      {
        "prefix": [
          "['"
        ],
        "suffix": "",
        "pump": [
          "\\'"
        ]
      },
      {
        "prefix": [
          "['"
        ],
        "suffix": "[",
        "pump": [
          "\\'"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "'\\'\\'\\'\\'\\'\\\\'\\'\\'\\'*\\'\\'\\1746C00ef978f8F0C61eD1fA78febcc87ec0294F2DEF75eDf216A009A4EEAA18447C4",
        "pump": [
          "'\\'\\'\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[ ]{0,3}\\=\\-\\-+\\s*(\\{([^{}]*?|\".*?\"|'.*?')*\\})?\\s*\\-*\\s*$",
    "inputs": [
      {
        "prefix": [
          "   =--{"
        ],
        "suffix": "",
        "pump": [
          "("
        ]
      },
      {
        "prefix": [
          "=--{"
        ],
        "suffix": "=-",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "=--{"
        ],
        "suffix": "'\t\r\t'\t\r\t\r\b\r\n\r\r\b\n\n",
        "pump": [
          "'\t\r\t"
        ]
      },
      {
        "prefix": [
          "=--{"
        ],
        "suffix": "",
        "pump": [
          "("
        ]
      },
      {
        "prefix": [
          "=--{"
        ],
        "suffix": "=-{",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "=--{"
        ],
        "suffix": "'.56'.56343839248",
        "pump": [
          "'.56"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((\\s*)(@charset)( [^;]+;\\s*))+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "et",
        "pump": [
          "\t@charset a;\t"
        ]
      },
      {
        "prefix": [
          "@charset \u0000;@charset \u0000;s"
        ],
        "suffix": "\u0000",
        "pump": [
          "s@charset \u0000;s"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<documentRecord\\s(xmlns=[^\\s]+)*\\sid\\s*=\\s*\\\"([^\\\"]*?)\\\">",
    "inputs": [
      {
        "prefix": [
          "<documentRecord\\x09"
        ],
        "suffix": "",
        "pump": [
          "xmlns=\\x00xmlns=y"
        ]
      },
      {
        "prefix": [
          "<documentRecord\t"
        ],
        "suffix": "\t",
        "pump": [
          "xmlns=axmlns=a"
        ]
      },
      {
        "prefix": [
          "<documentRecord\\x09"
        ],
        "suffix": "",
        "pump": [
          "xmlns=\\x00xmlns=y"
        ]
      },
      {
        "prefix": [
          "<documentRecord\t"
        ],
        "suffix": "=x",
        "pump": [
          "xmlns=axmlns=a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<(?:(?:!--([\\w\\W]*?)-->)|(?:!\\[CDATA\\[([\\w\\W]*?)\\]\\]>)|(?:!DOCTYPE([\\w\\W]*?)>)|(?:\\?([^\\s\\/<>]+) ?([\\w\\W]*?)[?/]>)|(?:\\/([^>]+)>)|(?:([A-Za-z0-9\\-\\:\\.]+)((?:\\s+[^\"'>]+(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>]*))*|\\/|\\s+)>))",
    "inputs": [
      {
        "prefix": [
          "<A"
        ],
        "suffix": "",
        "pump": [
          "\\x09\\x09!"
        ]
      },
      {
        "prefix": [
          "<a"
        ],
        "suffix": "DO\"]-?']-?\ta]-/",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "e<H.\rCQ\b15e<H.\rCQ\b15{r6ih@x|y0\tLYr#zlK~[ H$5i/Yg",
        "pump": [
          "e<H.\rCQ\b15"
        ]
      },
      {
        "prefix": [
          "<A"
        ],
        "suffix": "",
        "pump": [
          "\\x09\\x09!"
        ]
      },
      {
        "prefix": [
          "<a"
        ],
        "suffix": "D\"]-?']-?",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "<7\r4lTZ[_Y<7\r4lTZ[_Y(Wb.6WZ&12, v6hu(Ve4O\b|Bk1@VzuI*xI2%@A]z",
        "pump": [
          "<7\r4lTZ[_Y"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\(\\?(.*?)(-(.*?))*?:(.*)\\)$",
    "inputs": [
      {
        "prefix": [
          "(?"
        ],
        "suffix": "",
        "pump": [
          "--"
        ]
      },
      {
        "prefix": [
          "(?"
        ],
        "suffix": "(",
        "pump": [
          "--"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "```(\\s|\\t)*gl",
    "inputs": [
      {
        "prefix": [
          "```"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "```"
        ],
        "suffix": "`g\n",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "```"
        ],
        "suffix": "\t\t\t\n \t\t\t\t\n \t\t\r\n\t\r\r\t\r \t\n\r\r \r\r\n  \r \r\r\n \n\r\t \t \r \t",
        "pump": [
          "\t\t\t\n \t"
        ]
      },
      {
        "prefix": [
          "```"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "```"
        ],
        "suffix": "`g``",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "l```\r\t\t\r\t "
        ],
        "suffix": "\t\t\t\t\t\t\t\t\t\r\t\t\t\n   ",
        "pump": [
          "\t\t\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\s*([^\\,]+(?:\\\\.[^\\,]*)*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t,",
        "pump": [
          "\\a\\\\a"
        ]
      },
      {
        "prefix": [
          "\u0000."
        ],
        "suffix": ",",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": ",\\\t,",
        "pump": [
          "\\a\\\\a"
        ]
      },
      {
        "prefix": [
          "\u0000."
        ],
        "suffix": ",",
        "pump": [
          ".."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*(?:''|\"\")?\\s*(?:,\\s*(?:''|\"\")?\\s*)*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\\x00",
        "pump": [
          ",\\x09"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ",\"\t",
        "pump": [
          ",\t"
        ]
      },
      {
        "prefix": [
          ","
        ],
        "suffix": "\u0000",
        "pump": [
          "s,"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([^ ].*?[^ ],)*([^ ].*?[^ ])$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": " ",
        "pump": [
          "\\x00\\x00,,,,"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a ",
        "pump": [
          "aa,aa,"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000,\u0000\u0000,\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "* compute the power at this frequency *",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "er",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "CKx~CKx~Z$'k!Y]pUw",
        "pump": [
          "CKx~"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\n    (?: Q .* (?: \\n | \\r\\n | \\r ) )*\n    Q \\s+ [\\w:\\.|-]* \\s+ ( \\d+ ) \\s+ ( [\\w\\.-]+ ) \\s+ ( \\d+ ) \\s+ \\( ( \\d+ ) \\) \\s* (?: \\n | \\r\\n | \\r )\n    Q \\s+ Consensus \\s+ \\d+ \\s+ [\\w\\.~-]+ \\s+ \\d+ \\s+ \\( \\d+ \\) \\s* (?: \\n | \\r\\n | \\r )\n    \\s* [ \\.\\-+|=]* (?: \\n | \\r\\n | \\r )\n    T \\s+ Consensus \\s+ \\d+ \\s+ [\\w\\.~-]+ \\s+ \\d+ \\s+ \\( \\d+ \\) \\s* (?: \\n | \\r\\n | \\r )\n    T \\s+ \\w+ \\s+ ( \\d+ ) \\s+ ( [\\w\\.-]+ ) \\s+ ( \\d+ ) \\s+ \\( ( \\d+ ) \\) \\s* (?: \\n | \\r\\n | \\r )\n    (?: T .* (?: \\n | \\r\\n | \\r ) )*\n    (?: Confidence .* (?: \\n | \\r\\n | \\r ))?\n    ",
    "inputs": [
      {
        "prefix": [
          "    "
        ],
        "suffix": " a ",
        "pump": [
          " Q   \r   Q   \r  "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)",
    "inputs": [
      {
        "prefix": [
          "yabrowser\t0._0"
        ],
        "suffix": "\t",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "yabrowser/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      },
      {
        "prefix": [
          "yabrowser\t0._0"
        ],
        "suffix": "r",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "yabrowser/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\\\\\/|[^\\/\\\\]+)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\//",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\\\s)*[A-Z]+(.|\\\\s)*:",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "",
        "pump": [
          "\\s"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "a",
        "pump": [
          "a\\s"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\(\\?[imsx]*-?[imsx]*\\:)+((\\[\\^?.+\\])|\\.)",
    "inputs": [
      {
        "prefix": [
          "(?:"
        ],
        "suffix": "",
        "pump": [
          "(?i:"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "[",
        "pump": [
          "(?i:"
        ]
      },
      {
        "prefix": [
          "(?:"
        ],
        "suffix": "",
        "pump": [
          "(?i:"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "-](?",
        "pump": [
          "(?i:"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\w+)(?::((?:[\\w\\.]+,?)+))?$",
    "inputs": [
      {
        "prefix": [
          "a:."
        ],
        "suffix": "!",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "a:a"
        ],
        "suffix": "a.:",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w:.w"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "a:"
        ],
        "suffix": "sMcasMcamMtXHUKebm:w",
        "pump": [
          "sMca"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((\\#.*?\\n)|(\\-\\-\\-.*?\\n))*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "-a\n-",
        "pump": [
          "#\n#\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\<!--(?:.|\\n)*?--\\>",
    "inputs": [
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "!-",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "->-",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[a-z][a-zA-Z\\d]*([A-Z][a-zA-Z\\d]*)*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "!",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "aAA"
        ],
        "suffix": "\u0000",
        "pump": [
          "dA"
        ]
      },
      {
        "prefix": [
          "v5UOYbMx"
        ],
        "suffix": "FMVHFMVHWgiIeFgvia\b",
        "pump": [
          "FMVH"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\\\.|[^'])*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "''",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "."
        ],
        "suffix": "'",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\\a\\a"
        ]
      },
      {
        "prefix": [
          "."
        ],
        "suffix": "'",
        "pump": [
          ".."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "LEADER .+\\n(\\d\\d\\d .. .+\\n)+",
    "inputs": [
      {
        "prefix": [
          "LEADER a\n"
        ],
        "suffix": "LE",
        "pump": [
          "000 aa a\n000 aa a\n"
        ]
      },
      {
        "prefix": [
          "LEADER a\n"
        ],
        "suffix": "EA",
        "pump": [
          "000 aa a\n000 aa a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": ".* type=(?:\"((?:\\\\.|[^\\\"])*)\"|([^;\\s]*))",
    "inputs": [
      {
        "prefix": [
          " type=\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          " type=\""
        ],
        "suffix": "yp a\" \t ty",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          " type=\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          " type=\""
        ],
        "suffix": "yp ta\" \t ty",
        "pump": [
          "\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:&amp;|[$@%*]|\\$#)\\$?[a-zA-Z_](\\w+|::)*",
    "inputs": [
      {
        "prefix": [
          "$$aa"
        ],
        "suffix": ":&",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "$$aa"
        ],
        "suffix": "mpa\u0000&a",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\$/(\\$.|.)*?/\\$",
    "inputs": [
      {
        "prefix": [
          "$/"
        ],
        "suffix": "",
        "pump": [
          "$0"
        ]
      },
      {
        "prefix": [
          "$/"
        ],
        "suffix": "a",
        "pump": [
          "$a"
        ]
      },
      {
        "prefix": [
          "$/"
        ],
        "suffix": "\\$..$.$/\\$\\$..$.$/\\$..$.$..$..|//.|$/\\..$..|/|$/\\$.",
        "pump": [
          "\\$..$.$/\\$"
        ]
      },
      {
        "prefix": [
          "$/"
        ],
        "suffix": "",
        "pump": [
          "$0"
        ]
      },
      {
        "prefix": [
          "$/"
        ],
        "suffix": "$$",
        "pump": [
          "$a"
        ]
      },
      {
        "prefix": [
          "$KbNmDMHVymFqmlWASjMX$/$KbNmDMHVymFqml$/"
        ],
        "suffix": "G$$$K$J\\PLTIANtZLTksVymFqmlWASj$/G$$$K$J\\PLTIANt",
        "pump": [
          "G$$$K$"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([^-]+)-([A-Za-z0-9+/=]{44,88})(\\?[\\x21-\\x7E]*)*$",
    "inputs": [
      {
        "prefix": [
          ".-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+"
        ],
        "suffix": "\\x00",
        "pump": [
          "??"
        ]
      },
      {
        "prefix": [
          "a-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        ],
        "suffix": "a?\u0000-aaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "pump": [
          "??"
        ]
      },
      {
        "prefix": [
          ".-+"
        ],
        "suffix": "\\x00",
        "pump": [
          "??"
        ]
      },
      {
        "prefix": [
          "a-a"
        ],
        "suffix": "a?\u0000-",
        "pump": [
          "??"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "?A-T?y?|?@?A-T?y?|?@:}>:<~?[z[[^12(?y?|?@:}>:?[z[[^12(9(1[(*<<?;>?|:@}~;}p@yr4wn@*Yn32\b",
        "pump": [
          "?A-T?y?|?@"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\s*(a|<[^\\s\\,\\;]*>|[^\\s]*:[^\\s\\;]+)\\s*((?:(?:<[^\\s\\,\\;]*>|[^\\s]*:[^\\s\\;]+|(?:\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*')(?:\\^\\^[^\\s\\;]*)?|\\s*),?)+\\s*);?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t$\"<',;a",
        "pump": [
          ",<>>"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$\\;<'^$",
        "pump": [
          ",<>>"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/([a-z\\-0-9]+)\\.(gif|js|css|png)(\\?.*)*$",
    "inputs": [
      {
        "prefix": [
          "/a.png"
        ],
        "suffix": "a",
        "pump": [
          "??"
        ]
      },
      {
        "prefix": [
          "/a.png"
        ],
        "suffix": "a",
        "pump": [
          "??"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "DESCRIPTION:.*?\\n(?:\\s+.*?\\n)*",
    "inputs": [
      {
        "prefix": [
          "DESCRIPTION:\n"
        ],
        "suffix": "ESCa",
        "pump": [
          "\t\n\t\n"
        ]
      },
      {
        "prefix": [
          "DESCRIPTION:\n"
        ],
        "suffix": "CRI",
        "pump": [
          "\t\n\t\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "@import\\s+([^;]+)*;",
    "inputs": [
      {
        "prefix": [
          "@import\\x09"
        ],
        "suffix": "",
        "pump": [
          "<!"
        ]
      },
      {
        "prefix": [
          "@import\ta"
        ],
        "suffix": "t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "@imports\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "<\u0000"
        ]
      },
      {
        "prefix": [
          "@imp"
        ],
        "suffix": "ort\tort\tl^oZQ.n_VA:.b2",
        "pump": [
          "ort\t"
        ]
      },
      {
        "prefix": [
          "@import\\x09"
        ],
        "suffix": "",
        "pump": [
          "<!"
        ]
      },
      {
        "prefix": [
          "@import\ta"
        ],
        "suffix": "imp;@import",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "@imports\u0000"
        ],
        "suffix": "",
        "pump": [
          "<\u0000"
        ]
      },
      {
        "prefix": [
          "@@imp"
        ],
        "suffix": "ort\tort\t@vvevgvecbyoov",
        "pump": [
          "ort\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:.+/)*(\\d{2,4}-\\d{1,2}-\\d{1,2})-([^/]*)(\\.[^.]+)$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          ":///"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "0/0a./00-0-0-",
        "pump": [
          "a/"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "/\u0000\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          ":///"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "0/0a./0-0-0",
        "pump": [
          "a/"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "/\u0000\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?\\s*,?\\s*)+)",
    "inputs": [
      {
        "prefix": [
          "m-"
        ],
        "suffix": "-0.+",
        "pump": [
          "0--"
        ]
      },
      {
        "prefix": [
          "m,"
        ],
        "suffix": "",
        "pump": [
          "-,"
        ]
      },
      {
        "prefix": [
          "m-"
        ],
        "suffix": "a",
        "pump": [
          "0--"
        ]
      },
      {
        "prefix": [
          "ms"
        ],
        "suffix": "",
        "pump": [
          "-s"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/\\*%node_textline%(.*?)%\\*\\/((?:.|[\\s\\S])*?)\\/\\*%node_textline_end%(\\d+)%\\*\\/",
    "inputs": [
      {
        "prefix": [
          "/*%node_textline%%*/"
        ],
        "suffix": "",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "/*%node_textline%%*/"
        ],
        "suffix": "e",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "%node_textline%/S"
        ],
        "suffix": "",
        "pump": [
          "SS"
        ]
      },
      {
        "prefix": [
          "/*%node_textline"
        ],
        "suffix": "%%*/%%*//*%node_textl",
        "pump": [
          "%%*/"
        ]
      },
      {
        "prefix": [
          "/*%node_textline%%*/"
        ],
        "suffix": "",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "/*%node_textline%%*/"
        ],
        "suffix": "%0%",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "%node_textline%/s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "/*%node_textline"
        ],
        "suffix": "%%*/%%*/\\/\\*%node_tex",
        "pump": [
          "%%*/"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\s|\\t)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\na",
        "pump": [
          "\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\r\\n|\\r|\\n)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\r\n\r\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\ra",
        "pump": [
          "\r\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?\\??$",
    "inputs": [
      {
        "prefix": [
          "https://a.a."
        ],
        "suffix": "\\x00",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a.aa"
        ],
        "suffix": ".:",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "h.nhh.nhb3nhbthtphttp:",
        "pump": [
          "h.nh"
        ]
      },
      {
        "prefix": [
          "https://a.."
        ],
        "suffix": "\\x00",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a.a"
        ],
        "suffix": "tps://",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "h.aJh.aJOVG8Lnetp.aJ\\.",
        "pump": [
          "h.aJ"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<script(.|\\n)*\\/script>",
    "inputs": [
      {
        "prefix": [
          "<script"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<script"
        ],
        "suffix": "<scri",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<script"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<script"
        ],
        "suffix": "t<",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[a-zA-Z_$]+[0-9a-zA-Z_$]*(\\.[a-zA-Z_$]+[0-9a-zA-Z_$]+)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a0..",
        "pump": [
          ".aaa"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          ".aaa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "bbs.hupu.com/(\\d+)+?[\\-\\d]*.html",
    "inputs": [
      {
        "prefix": [
          "bbs!hupu!com/0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "bbsahupuacom/0"
        ],
        "suffix": "b",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "bbs\u0000hupu\u0000com/dd"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          "bbbs.hupu.com/"
        ],
        "suffix": "00200020022002022",
        "pump": [
          "0020"
        ]
      },
      {
        "prefix": [
          "bbsbhupubcom/0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "bbsahupuacom/0"
        ],
        "suffix": "0-",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "bbs\u0000hupu\u0000com/dd"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          "cbbs.hupu.com/"
        ],
        "suffix": "40624062216016034",
        "pump": [
          "4062"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([\\s\\[\\{\\(]|#.*)*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "#\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "########\t\t#\t#(({ \t  \r\n\n \r\t   \t\r\t\r \n{P",
        "pump": [
          "####"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\w+):(.*(?:\\n\\t.*)*)",
    "inputs": [
      {
        "prefix": [
          "a:"
        ],
        "suffix": "a",
        "pump": [
          "\n\t\n\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(use \\w+\\:\\:\\w+.+?\\;[\\r\\n][\\r\\n.]*){3,}",
    "inputs": [
      {
        "prefix": [
          "use a::aa;\nuse a::aa;\n"
        ],
        "suffix": "e",
        "pump": [
          "use a::aaa;\n"
        ]
      },
      {
        "prefix": [
          "use a::aa;\nuse a::aa;\n"
        ],
        "suffix": "e",
        "pump": [
          "use a::aaa;\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ".us",
        "pump": [
          "use a::aaa;\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\<span class=\\\"w2ui\\-marker\\\"\\>((.|\\n|\\r)*)\\<\\/span\\>",
    "inputs": [
      {
        "prefix": [
          "<span class=\"w2ui-marker\">"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "<span class=\"w2ui-marker\">"
        ],
        "suffix": "-m\n",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<span class=\"w2ui-marker\">"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "<span class=\"w2ui-marker\">"
        ],
        "suffix": "e\n",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(([a-zA-Z0-9-\\p{L}]{1,63}\\.)?(xn--)?[a-zA-Z0-9\\p{L}]+(-[a-zA-Z0-9\\p{L}]+)*\\.)+[a-zA-Z\\p{L}]{2,63}$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "xn--aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "pump": [
          "a.a.xn--a.a."
        ]
      },
      {
        "prefix": [
          "0\u0000-------------}"
        ],
        "suffix": "",
        "pump": [
          "A00\u0000-------------}"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "--.xn--",
        "pump": [
          "a.a.xn--a.a."
        ]
      },
      {
        "prefix": [
          "0\u000000"
        ],
        "suffix": "",
        "pump": [
          "p0"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}",
    "inputs": [
      {
        "prefix": [
          "{a:{"
        ],
        "suffix": "",
        "pump": [
          "~!"
        ]
      },
      {
        "prefix": [
          "{a:a"
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "t{"
        ],
        "suffix": "]K:m]K:m\r^:TEl/MhY0P",
        "pump": [
          "]K:m"
        ]
      },
      {
        "prefix": [
          "{0:{"
        ],
        "suffix": "",
        "pump": [
          "~;"
        ]
      },
      {
        "prefix": [
          "{a:a"
        ],
        "suffix": "{",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "W\rC{"
        ],
        "suffix": "Y:K7Y:K7bmmUV \riYAp",
        "pump": [
          "Y:K7"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([_a-zA-Z]\\w*)*:([a-zA-Z]\\w*)$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "_::",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "",
        "pump": [
          "wA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "seJAseJARww_RmScrD",
        "pump": [
          "seJA"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "MAC Address      : (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "MAC Address      : a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+(Sync|Stream)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "GNU Lesser Public License .*?version 2\\.1",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er ",
        "pump": [
          "GNU Lesser Public License "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(class=\"close\").*(dismiss=\"alert\")",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ma",
        "pump": [
          "class=\"close\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "miss=",
        "pump": [
          "a",
          "class=\"close\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+)\\s+(\\S)\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "a\ta\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\[(-?[_a-zA-Z]+[_a-zA-Z0-9-]*)(?:=(?:\"|')([a-zA-z0-9\\-_. ]+)(?:\"|'))?\\])?",
    "inputs": [
      {
        "prefix": [
          "[-a"
        ],
        "suffix": "[=",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a[-a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*(.*?)\\*\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/*",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<a[^\\>]+href=\"http:\\/\\/alphalemon\\.com[^\\>]+\\>powered by alphalemon cms\\<\\/a\\>",
    "inputs": [
      {
        "prefix": [
          "<aa"
        ],
        "suffix": "po",
        "pump": [
          "href=\"http://alphalemon.coma"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "mo>powered by alphalemon cm",
        "pump": [
          "<aa",
          "href=\"http://alphalemon.coma"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "expected .* to respond to :some_method",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " t",
        "pump": [
          "expected "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(Sample|Project)_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mp",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "A`a",
        "pump": [
          "A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^:+(.*)$",
    "inputs": [
      {
        "prefix": [
          ":"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$100,000-.+?>&nbsp;([\\d\\.]+)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "100",
        "pump": [
          "$100,000-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ";[^\\/]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/",
        "pump": [
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "line\\ (\\d+?),\\ column\\ (\\d+?)\\ in\\ (?:.*?)\\ in\\ (.*?):[^\\/]",
    "inputs": [
      {
        "prefix": [
          "line 0, column 0 in a"
        ],
        "suffix": "00 ",
        "pump": [
          " in "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "um l",
        "pump": [
          "line 0, column 0 in ",
          " in "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*) on (.*) type (.*) \\((.*)\\)",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "t",
        "pump": [
          " on ",
          " type ",
          " ("
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "y",
        "pump": [
          "a",
          " on ",
          " type ",
          " ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "== 0\\.2\\.0\\s+\\* Added test2-1 \\(.*?\\)\\n\\* Added test2 \\(.*?\\)\\n\\n==",
    "inputs": [
      {
        "prefix": [
          "== 0.2.0\t* Added test2-1 (a"
        ],
        "suffix": ".)\n* Added",
        "pump": [
          ")\n* Added test2 ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)(\\s+(\\d+)\\s(\\d+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*\\)).*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ")"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<password>).+(</password>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "w",
        "pump": [
          "<password>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^A-Za-z\\.@\\-\\+]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<[\\w-]+[^>]*>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "<>>",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a<a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Multiple executables were found .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Multiple executables were found "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n\\s*?<cmis:repositoryId>.*?<\\/cmis:repositoryId>\\s*?\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-zа-яё\\d_-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "not-supported\\s*[:]?\\s*",
    "inputs": [
      {
        "prefix": [
          "not-supported\t"
        ],
        "suffix": "t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "anot-supported\t"
        ],
        "suffix": "-sno",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)_(image|file)_path$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "aga",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<([^\\>]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a>",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+  history$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "List.*.of_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "isof",
        "pump": [
          "List"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "setTimeout\\(function\\(\\)\\{\\s+(var s,t,o,p,b,r,e,a,k,i,n,g,f.+?\\r?\\n[\\s\\S]+?a\\.value =.+?)\\r?\\n",
    "inputs": [
      {
        "prefix": [
          "setTimeout(function(){\tvar s,t,o,p,b,r,e,a,k,i,n,g,fa",
          "a"
        ],
        "suffix": "un",
        "pump": [
          "\r\na",
          "a.value =a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\S+)[\\s_]+(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "pants\\(['\"]([^)]+)['\"]\\)(#.*)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "pants(\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<div.+>Thirty<\\/div>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "Th",
        "pump": [
          "<diva"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((?:[0-9]*\\.){3}[0-9]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a.0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+Rumor$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "umoaR",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "initializing cache.*reusing cache",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "initializing cache"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*?(\\$\\w+).*?$",
    "inputs": [
      {
        "prefix": [
          "a$a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "WARN.*No configuration file found",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "at",
        "pump": [
          "WARN"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+ga\\(\"create\",\"TEST\",\"auto\"\\);.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "ga(\"create\",\"TEST\",\"auto\");a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "ga(\"create\",\"TEST\",\"auto\");a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n=over.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n=over"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_.+_initial$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "in",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^::\\d+.\\d+.\\d+.\\d+$",
    "inputs": [
      {
        "prefix": [
          "::0",
          "0",
          "0"
        ],
        "suffix": "::00",
        "pump": [
          "a0",
          "a0",
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^a-z0-9+]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\/(\\d+)_.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/0_"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/0_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*([=!><]+|\\(|\\)|\\sand\\s|\\sor\\s)\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Valid fiat currency values are:\\s*(.*)\\s*<br>",
    "inputs": [
      {
        "prefix": [
          "Valid fiat currency values are:\t",
          "a"
        ],
        "suffix": "Val",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "aValid fiat currency values are:\t",
          "a"
        ],
        "suffix": "es ",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[\\+\\-]?((\\.\\d+)|(\\d+\\.?\\d*))([eE][+-]?\\d+)?[fFdD]?$",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "++",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\[(.?)\\]\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "[a]\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^msg\\s+([^\\s]*)\\s+(.+?)$",
    "inputs": [
      {
        "prefix": [
          "msg\t",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+\\s)+\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\ta0",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^the \"(.*)\" header should contain \"(.*)\"$",
    "inputs": [
      {
        "prefix": [
          "the \"a"
        ],
        "suffix": "er",
        "pump": [
          "\" header should contain \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+Subdisks:\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "\tSubdisks:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^: \\t]+):\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " *([\\-+]? *[0-9\\\\.]*(?:e-?[0-9]+)?[ \\*]+|-|)([A-Za-z0-9][A-Za-z0-9_\\-]+) +",
    "inputs": [
      {
        "prefix": [
          " ",
          " "
        ],
        "suffix": " +e-",
        "pump": [
          " ",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "TRANSCODER_PATH:(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "TRANSCODER_PATH:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^o(?:pen)?\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "open\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9-]+?)=\\\"([^\\\"]+)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".* base=(0x\\w+) .*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " base=0xa "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " base=0xa "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\\\csvin(?:\\[(.*)\\])?\\s*\\((.*?)\\)\\s+(.*)$",
    "inputs": [
      {
        "prefix": [
          "\\csvin[a",
          "a)\t"
        ],
        "suffix": "a",
        "pump": [
          "](",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Operator '\\*' is not applicable.*when right side is a Timestamp",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c",
        "pump": [
          "Operator '*' is not applicable"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/?Release.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/Release"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#include\\s*\"(.+)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "#include\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\.\\s",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "data-plusbar-url=[\"\\'](http.+?\\.html)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m",
        "pump": [
          "data-plusbar-url=\"httpa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#(\\[\\w+[\\d\\s\\w]+\\])",
    "inputs": [
      {
        "prefix": [
          "#[a"
        ],
        "suffix": "a[",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a#[a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*(\\)|etc|No|a\\.m|p\\.m)\\.$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[,&#\\.\\w-]([\\w-]|(\\\\.))*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$\\",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\$\\\\](\\$.*?[^\\\\]\\$)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\\",
        "pump": [
          "a$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Aa]s)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+([Aa])<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(ch\\x{e9}ile)<\\/[A-DF-Z]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e<>ca",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\*]*)\\*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^<(\\w+|!\\[CDATA\\[)(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>",
    "inputs": [
      {
        "prefix": [
          "<a"
        ],
        "suffix": "![C",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "I, \\[.* \\#\\d*\\]  INFO : (\\{\\\"kind\\\"\\:\\\"heartbeat\\\".*)",
    "inputs": [
      {
        "prefix": [
          "I, [a"
        ],
        "suffix": "a",
        "pump": [
          " #]  INFO : {\"kind\":\"heartbeat\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "I, [",
          " #]  INFO : {\"kind\":\"heartbeat\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Fini (.+ morceaux)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mo",
        "pump": [
          "Fini a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^\\<]*)(\\<([^\\>]*)\\>)?(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<([^>]+)\\/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</>a",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)(\\d+)-R(.)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " size-([^\\s\"]+)",
    "inputs": [
      {
        "prefix": [
          " size-\u0000\""
        ],
        "suffix": "s",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "iz\t s",
        "pump": [
          " size-a"
        ]
      },
      {
        "prefix": [
          " size-\u0000\""
        ],
        "suffix": "s",
        "pump": [
          "\"\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<!--\\[if\\s[^\\]]+]>)([\\s\\S]*?)(<!\\[endif]-->)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]-<![en",
        "pump": [
          "<!--[if\ta"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Under license from\\s+([^<]+)<",
    "inputs": [
      {
        "prefix": [
          "Under license from\t"
        ],
        "suffix": "nd",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aUnder license from\t"
        ],
        "suffix": " l",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(\\/*)(\\w+)([^>]*)>",
    "inputs": [
      {
        "prefix": [
          "</a"
        ],
        "suffix": "/a>>",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a</a"
        ],
        "suffix": "/$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\$(\\d+)(\\+)?(\\d+)?",
    "inputs": [
      {
        "prefix": [
          "$0"
        ],
        "suffix": "0++",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a$0"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*LOG\\:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "LOG",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "http://.*label/{label}",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)\\s+COURT$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "CO\t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "UR",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-zA-Z0-9\\-_\\.]+)\\s?\\(?([><=\\s\\d\\.,]+)?\\)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.\ta",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ")a.($",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[.#\\\\\\/&?]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#a",
        "pump": [
          "#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<(?:noscript|noscript\\s[^>]*)>)([\\s\\S]*?)(<\\/noscript>)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "cr><nos",
        "pump": [
          "<noscript\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w+\\\"\\w+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/(?:\\w*)\\/(?:[0-9]+[-\\w]*)([^\\?]*)\\??.*",
    "inputs": [
      {
        "prefix": [
          "/a/0a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "a/a/0a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "N9K.*-F",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "9-a",
        "pump": [
          "N9K"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%(-?[0-9]+)?(\\.?[0-9]+)?([acdfmMnpr%])(\\{([^\\}]+)\\})?|([^%]+)",
    "inputs": [
      {
        "prefix": [
          "%-0"
        ],
        "suffix": "%-}.",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a%-0"
        ],
        "suffix": "0.%",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^AuthorDate:\\s*(.+)$",
    "inputs": [
      {
        "prefix": [
          "AuthorDate:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<style([^A-Za-z0-9>][^>]*)?>.*?<\\/style[^>]*>",
    "inputs": [
      {
        "prefix": [
          "<style$a>a"
        ],
        "suffix": "</st",
        "pump": [
          "</style"
        ]
      },
      {
        "prefix": [
          "a",
          "a>a"
        ],
        "suffix": "s></style<style",
        "pump": [
          "<style$",
          "</style"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.+)-(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0..",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "href=\"/commands/(.+?)\">.+?</a>",
    "inputs": [
      {
        "prefix": [
          "href=\"/commands/a"
        ],
        "suffix": "n",
        "pump": [
          "\">a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ef",
        "pump": [
          "href=\"/commands/a",
          "\">a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+_at",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ata",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#?[\\w:]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)(#[^/]+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(((http|ftp|https):\\/\\/)|www\\.)[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?\\^=%&:\\/~\\+#!]*[\\w\\-\\@?\\^=%&\\/~\\+#])?",
    "inputs": [
      {
        "prefix": [
          "http://a.a"
        ],
        "suffix": "tps:",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span.*?class=\"emoji emoji(.*?)\"><\\/span>",
    "inputs": [
      {
        "prefix": [
          "<spana"
        ],
        "suffix": "</",
        "pump": [
          "class=\"emoji emoji"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "p",
        "pump": [
          "<span",
          "class=\"emoji emoji"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[\"']|```).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Error at location while working on <\\/path>:.*The needed library 'test' is missing",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ror",
        "pump": [
          "Error at location while working on </path>:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "boundary=\"(.+?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "y",
        "pump": [
          "boundary=\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-z].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "hpwOS\\/([^\\s]*);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/hpwOS;\thp",
        "pump": [
          "hpwOS/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\e+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\u001b"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[,\\!]* [^,]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a,",
        "pump": [
          "!"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(\\[|\\]|\\{|\\}),?\\s*\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "{",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "#(.+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-c [\\S]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-c\t-c",
        "pump": [
          "-c a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<td\\s+class=\"credit\"\\s*>\\s*(.+?)\\s*</td>",
    "inputs": [
      {
        "prefix": [
          "<td\tclass=\"credit\"\t>\t",
          "a"
        ],
        "suffix": "cr",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a<td\tclass=\"credit\"\t>\t",
          "a"
        ],
        "suffix": "=",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*'.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "'"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[\\[\\s*foreach:\\s*(.+?)\\s*\\]\\](\\r?\\n)?",
    "inputs": [
      {
        "prefix": [
          "[[\tforeach:\t",
          "a"
        ],
        "suffix": "[",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a[[\tforeach:\t",
          "a"
        ],
        "suffix": "h:",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\\\|\\/]index..+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/indexaa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "pyconfig\\.[eginst]+\\(['\"][^)]+?['\"], ?(.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "pyconfig.e(\"a"
        ],
        "suffix": "i",
        "pump": [
          "\",a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": ".",
        "pump": [
          "pyconfig.e(\"a",
          "\",a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "xmlns(\\:[^=]*)?=['\"]http\\:\\/\\/www\\.w3\\.org\\/2000\\/svg['\"]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m=\"http://www.w3.",
        "pump": [
          "xmlns:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*V\\d((alpha|beta)\\d)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\w\\W]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^block +(?:(prepend|append) +)?([^\\n]+)",
    "inputs": [
      {
        "prefix": [
          "block prepend "
        ],
        "suffix": "\n",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^HTTP\\/1[.]1 400[\\s\\S]*The request host is missing.*",
    "inputs": [
      {
        "prefix": [
          "HTTP/1.1 400a"
        ],
        "suffix": "a",
        "pump": [
          "The request host is missing"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S+)\\s+(\\w+)\\s*___P\\s*\\(\\(([^\\)]*)\\)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "P\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^./]+[-_])?thumb[^.]*\\.(gif|jpg|png)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p.",
        "pump": [
          "-thumb"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "h",
        "pump": [
          "a",
          "-thumb"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+(\\S+)\\s+\\=\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "\ta\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[\\r\\n]+[ \\t]*)+",
    "inputs": [
      {
        "prefix": [
          "\n"
        ],
        "suffix": "#",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "\n"
        ],
        "suffix": "\na",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\$[wnoitsgz><]|\\$[lh]\\[.+\\]|\\$[lh]|\\$[0-9a-f]{3})+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "<$$",
        "pump": [
          "$<$h[a]$h[a]"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "<$",
        "pump": [
          "$<$h[a]$h[a]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/(doku\\.php\\?id=)?:?((((\\w)(\\w|_)*)*:)*(\\w(\\w|_)*)*)$",
    "inputs": [
      {
        "prefix": [
          "/"
        ],
        "suffix": "!",
        "pump": [
          "e_"
        ]
      },
      {
        "prefix": [
          "/:"
        ],
        "suffix": "p?",
        "pump": [
          "a_"
        ]
      },
      {
        "prefix": [
          "/ww"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "XvuDXvuDWTNcZDWlU",
        "pump": [
          "XvuD"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "!",
        "pump": [
          "e_"
        ]
      },
      {
        "prefix": [
          "/:"
        ],
        "suffix": "i$",
        "pump": [
          "a_"
        ]
      },
      {
        "prefix": [
          "/w"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "K/"
        ],
        "suffix": "M60vM60vVNNZjwd5K",
        "pump": [
          "M60v"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[!-)+-<>-~][!-~]*[+-](,[!-)+-<>-~][!-~]*[+-])+$",
    "inputs": [
      {
        "prefix": [
          ">-,-+"
        ],
        "suffix": "\\x00",
        "pump": [
          ",.+,++"
        ]
      },
      {
        "prefix": [
          "a+"
        ],
        "suffix": "a",
        "pump": [
          ",a+,a+"
        ]
      },
      {
        "prefix": [
          "!+,!+,!"
        ],
        "suffix": "",
        "pump": [
          "-,!+,!"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\${([^{}]*|{[^{}]*})*}",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "^(([a-zA-Z0-9]*)(\\.[a-zA-Z0-9]+)?)+$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "!",
        "pump": [
          ".0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "..",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "\u0000",
        "pump": [
          "00A"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "YtvDYtvDG5oAov1lHh.",
        "pump": [
          "YtvD"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[-+]?\\$\\s*(\\d*,\\d*)+(?:\\.)?\\d*$",
    "inputs": [
      {
        "prefix": [
          "-$,"
        ],
        "suffix": "!",
        "pump": [
          ",0,"
        ]
      },
      {
        "prefix": [
          "+$"
        ],
        "suffix": "++",
        "pump": [
          "0,0"
        ]
      },
      {
        "prefix": [
          "+$"
        ],
        "suffix": ",2,2,,01,2,2,,0110883,2,,,,,,,,,0,,2,,,,,,,,,2,,,21/",
        "pump": [
          ",2,2,,01"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/\\*%node_var%((?:.|[\\s\\S])*?)%(.*?)%(\\d+)%\\*\\/",
    "inputs": [
      {
        "prefix": [
          "/*%node_var%"
        ],
        "suffix": "",
        "pump": [
          "&"
        ]
      },
      {
        "prefix": [
          "/*%node_var%"
        ],
        "suffix": "v",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "%node_var%s"
        ],
        "suffix": "",
        "pump": [
          "Ss"
        ]
      },
      {
        "prefix": [
          "/*%node_"
        ],
        "suffix": "var%var%Ki%,pHoMkv\\4T",
        "pump": [
          "var%"
        ]
      },
      {
        "prefix": [
          "/*%node_var%"
        ],
        "suffix": "",
        "pump": [
          "&"
        ]
      },
      {
        "prefix": [
          "/*%node_var%"
        ],
        "suffix": "%no",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "%node_var%s"
        ],
        "suffix": "",
        "pump": [
          "Ss"
        ]
      },
      {
        "prefix": [
          "/*%node_"
        ],
        "suffix": "var%var%\\/\\*%node_var%",
        "pump": [
          "var%"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(<br\\s*/?>\\s*\\n*){3,}",
    "inputs": [
      {
        "prefix": [
          "<br/><br/>"
        ],
        "suffix": "/",
        "pump": [
          "<br/>\n"
        ]
      },
      {
        "prefix": [
          "<br/><br/>"
        ],
        "suffix": "<br<br/>",
        "pump": [
          "<br/>\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "<br>>",
        "pump": [
          "<br/>\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([\\w.!~*'|;:&=+$,-]+@)?(([A-Za-z0-9]+[A-Za-z0-9\\-]*[A-Za-z0-9]+\\.)*([A-Za-z0-9]+\\.)*)*([A-Za-z]+[A-Za-z0-9\\-]*[A-Za-z0-9]+)\\.?(:\\d*)*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "000."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a.a",
        "pump": [
          "aa.."
        ]
      },
      {
        "prefix": [
          "+"
        ],
        "suffix": "EMh3.iEMh3.iTQFEABrMJM ",
        "pump": [
          "EMh3.i"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "000."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "0.:0-a",
        "pump": [
          "aa.."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "NCQ.QvNCQ.QvCZFPlZjJ4Z5D%",
        "pump": [
          "NCQ.Qv"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^SELECT.*?FROM\\s*((?:`?\\w+`?\\s*\\.\\s*)?`?\\w+`?(?:(?:\\s*AS)?\\s*`?\\w+`?)?(?:\\s*,\\s*(?:`?\\w+`?\\s*\\.\\s*)?`?\\w+`?(?:(?:\\s*AS)?\\s*`?\\w+`?)?)*)",
    "inputs": [
      {
        "prefix": [
          "SELECTFROM`a`"
        ],
        "suffix": "\tFA,`FaA`\tAS\t",
        "pump": [
          "\t,aASa"
        ]
      },
      {
        "prefix": [
          "SELECTFROMw,ws"
        ],
        "suffix": "",
        "pump": [
          "s`w,ws"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)",
    "inputs": [
      {
        "prefix": [
          "k-meleon\t0._0"
        ],
        "suffix": "e",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "k-meleon/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      },
      {
        "prefix": [
          "k-meleon\t0._0"
        ],
        "suffix": "-",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "k-meleon/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[A-Za-z](?:[A-Za-z0-9._-]|-)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "-"
        ]
      },
      {
        "prefix": [
          "AA"
        ],
        "suffix": "\u0000",
        "pump": [
          "-A"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "-"
        ]
      },
      {
        "prefix": [
          "A-"
        ],
        "suffix": "\u0000",
        "pump": [
          "--"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:\\s*[A-Z0-9_\\-]+\\s*=>\\s*[\"'A-Z0-9_\\-.+ ]+,*\\s*)+$",
    "inputs": [
      {
        "prefix": [
          "_ =>\""
        ],
        "suffix": "\\x00",
        "pump": [
          "_=> ."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "=>>",
        "pump": [
          "\t-=> --=> "
        ]
      },
      {
        "prefix": [
          "AA=>"
        ],
        "suffix": "AA--Z0-9_=>Z0-AA--Z0-9_=>Z0-9_=>A-ZA=>A-Z-Z0-Z0-9Z370631=",
        "pump": [
          "AA--Z0-9_=>Z0-"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:[^ ]*=(?:\"[^\"]*\"|'[^']*')\\s*)*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": ">",
        "pump": [
          "=\"=\"='=\"\"=\"\""
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "=\"'a= \" ",
        "pump": [
          "a=''"
        ]
      },
      {
        "prefix": [
          "=\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\"=\"\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((\\\\(.|\\n))|([^\"\\\\]))*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\n\"",
        "pump": [
          "\\\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\\\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(<\\?.*?\\?>\\s*)*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "<??><??>"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[ \\t]*#[ \\t]*cmakedefine[ \\t]+(\\w+)+[ \\t]+\\@([^ \\t@]*)\\@",
    "inputs": [
      {
        "prefix": [
          "#cmakedefine 0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "#cmakedefine\ta"
        ],
        "suffix": "\t#cmakedefine",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "#cmakedefine\tww"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "#cmakedefine "
        ],
        "suffix": "cmakcmakedefinecma",
        "pump": [
          "cmak"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([A-z]+?:\\/\\/([-\\w\\.]+[-\\w])+(:\\d+)?(\\/([\\w\\/_\\.#-]*(\\?\\S+)?[^\\.\\s])?)?)",
    "inputs": [
      {
        "prefix": [
          "a://"
        ],
        "suffix": "-:.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a://"
        ],
        "suffix": "/\ta://a-a/#a.",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\d+[\\-\\.]?)+",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "--",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "a",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "dd"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<\\!\\-\\-(.|\\n)*?\\-\\-\\>",
    "inputs": [
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "!-",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<!--"
        ],
        "suffix": "->-",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Registrar:\\s((.+\\n)+)\\n",
    "inputs": [
      {
        "prefix": [
          "Registrar: !\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          "Registrar:\t"
        ],
        "suffix": "a",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "Registrar: R\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          "Registrar:\t"
        ],
        "suffix": "ar\n",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^macro\\s+([a-zA-Z0-9_]+)\\s*\\(\\s*((?:[a-zA-Z0-9_]+(?:\\s*=\\s*([\\s\\S]+))?(?:,\\s*)?)*)\\s*\\)$",
    "inputs": [
      {
        "prefix": [
          "macro a("
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "macro\ta(a"
        ],
        "suffix": "o\t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "macros0A"
        ],
        "suffix": "\u0000",
        "pump": [
          "0A"
        ]
      },
      {
        "prefix": [
          "macro\nm("
        ],
        "suffix": "orcaorcarcamacro,",
        "pump": [
          "orca"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[\\/\\/][\\/\\*]\\s*OPTIMIZE:\\s*(?:\\(([^:]*)\\))*\\s*:?\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "/*OPTIMIZE:"
        ],
        "suffix": "a",
        "pump": [
          "()()"
        ]
      },
      {
        "prefix": [
          "/*OPTIMIZE:"
        ],
        "suffix": "a",
        "pump": [
          "()()"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": " *?\\/\\/ FINAL_START.*?\\n((.|\\n|\\r)*?) *\\/\\/ FINAL_END.*?\\n",
    "inputs": [
      {
        "prefix": [
          "// FINAL_START\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "// FINAL_START\n"
        ],
        "suffix": "S",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "// FINAL_START\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "// FINAL_START\n"
        ],
        "suffix": "AR",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\[\\[((?:.|\\n)+?)\\]\\]",
    "inputs": [
      {
        "prefix": [
          "[[!"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "[["
        ],
        "suffix": "[",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "[[\\"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "[["
        ],
        "suffix": "][a",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(<a.*\\/a>)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "<a/a><a/a>"
        ]
      },
      {
        "prefix": [
          "<a/a><a"
        ],
        "suffix": "",
        "pump": [
          "/a><a/a><a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "<a/a><a/a>"
        ]
      },
      {
        "prefix": [
          "<a/a><a\u0000"
        ],
        "suffix": "",
        "pump": [
          "/a><a\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "'([^']*(&[ ]*[\\n\\r]+)?)*'",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "&\\x0a"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\n&",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": ",26),26)\n}T\rm\rau\"",
        "pump": [
          ",26)"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "&\\x0a"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\n&'a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "?'"
        ],
        "suffix": "CsPTCsPTw\b7\trd(xl",
        "pump": [
          "CsPT"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "GlobalSection\\(NestedProjects\\) = preSolution((?:.|\\n)*?)EndGlobalSection",
    "inputs": [
      {
        "prefix": [
          "GlobalSection(NestedProjects) = preSolution"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "GlobalSection(NestedProjects) = preSolution"
        ],
        "suffix": "uti",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "GlobalSection(NestedProjects) = preSolution"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "GlobalSection(NestedProjects) = preSolution"
        ],
        "suffix": "So",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([A-Za-z0-9+/]|[A-Za-z0-9+,]|[A-Za-z0-9_-]|[A-Za-z0-9.-]|[A-Za-z0-9._]|[A-Za-z0-9_:]|[A-Za-z0-9~-]){3,}={0,2}",
    "inputs": [
      {
        "prefix": [
          "aa"
        ],
        "suffix": "~=~",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "++++"
        ],
        "suffix": "\u0000",
        "pump": [
          "0+"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "=$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "+++a"
        ],
        "suffix": "\u0000",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "~=~",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "+-"
        ],
        "suffix": "\u0000",
        "pump": [
          "0-"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\d|\\s|\\W)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "A",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\ta",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(:?(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_a-zA-Z0-9]{0,61}[a-zA-Z0-9]))\\.)+([a-zA-Z]{2,13}|(xn--[a-zA-Z0-9]{2,30}))$",
    "inputs": [
      {
        "prefix": [
          ":a."
        ],
        "suffix": "",
        "pump": [
          "0A."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "pump": [
          ":aa."
        ]
      },
      {
        "prefix": [
          "A\u00000------------------------------a"
        ],
        "suffix": "",
        "pump": [
          "00:0------------------------------a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "Iz.Iz.Iz.Iz.Iz.Iz.Iz.Iz.z.ggkylvgxtphuzzIz.zI.Iz.Iz.zII.z.Iz.Iz.zII.",
        "pump": [
          "Iz.Iz.Iz.Iz."
        ]
      },
      {
        "prefix": [
          ":a."
        ],
        "suffix": "",
        "pump": [
          "0A."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ":",
        "pump": [
          ":aa."
        ]
      },
      {
        "prefix": [
          "A\u000000"
        ],
        "suffix": "",
        "pump": [
          "0-00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "V3.V3.V3.V3.nx.IF.3p.IF.xn.x3.FI.xn.xn-zpkkenmcxfotlyfaexlqzamawwpnomirmv",
        "pump": [
          "V3.V3."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:,.+?)*,\\s*(\\S+)\\s*:",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          ",!,;"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ",\t",
        "pump": [
          ",a,a"
        ]
      },
      {
        "prefix": [
          ",\u0000"
        ],
        "suffix": "",
        "pump": [
          ",\u0000,\u0000"
        ]
      },
      {
        "prefix": [
          ":,\\s*,.N=uskOrirTO2"
        ],
        "suffix": ",\\?;=}}>|,\\s*,2,,\\?;=}}>|,\\s*,2,\\?;=}>|,|?;=}>|,\\s,s*,.|?",
        "pump": [
          ",\\?;=}}>|,\\s*,2,"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          ",!,;"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ",\t",
        "pump": [
          ",a,a"
        ]
      },
      {
        "prefix": [
          ",\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          ",\u0000\u0000"
        ]
      },
      {
        "prefix": [
          ",,ig,.+,.+,&,`"
        ],
        "suffix": ".,7,,,.,7,,,.,,,,",
        "pump": [
          ".,7,,,"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "QStringList(?:[^\\w]+(?:.*?))+?$",
    "inputs": [
      {
        "prefix": [
          "QStringList$"
        ],
        "suffix": "a",
        "pump": [
          "$$"
        ]
      },
      {
        "prefix": [
          "QStringList$"
        ],
        "suffix": "a",
        "pump": [
          "$$"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:[^\\n\\r]*(\\r\\n|\\n|\\r)+)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a\na",
        "pump": [
          "\r\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(#(.*?)#)+?",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "####"
        ]
      },
      {
        "prefix": [
          "###\u0000"
        ],
        "suffix": "",
        "pump": [
          "##\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "####"
        ]
      },
      {
        "prefix": [
          "###\u0000"
        ],
        "suffix": "",
        "pump": [
          "##\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:\\s+|#.*)+",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          "#s"
        ],
        "suffix": "\u0000",
        "pump": [
          "ss"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\+((?:\\+)?[\\w\\-]+)*(?:\\.v\\d+\\.\\d+\\.\\d+)?(?:\\.js)$",
    "inputs": [
      {
        "prefix": [
          "+"
        ],
        "suffix": "",
        "pump": [
          "0-"
        ]
      },
      {
        "prefix": [
          "++a"
        ],
        "suffix": "j",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "R+"
        ],
        "suffix": "IsmiIsmiWX3FMX2QP",
        "pump": [
          "Ismi"
        ]
      },
      {
        "prefix": [
          "+"
        ],
        "suffix": "",
        "pump": [
          "0-"
        ]
      },
      {
        "prefix": [
          "++a"
        ],
        "suffix": "j.v0.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "+v+e+v+ee+v+e+v+"
        ],
        "suffix": "jv+eevjv+eev+ee+v+e+v+jv+ee+v+e+v+",
        "pump": [
          "jv+eev"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(styled(\\.\\w+|\\([^)]*\\))(\\.\\w+(\\([^)]*\\))*)*|css|injectGlobal|keyframes|css={)`(?:\\$\\{[^}]+\\}|\\\\\\\\|\\\\?[^\\\\])*?`",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "(\u0001.*?\u0002)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\u0001\u0002\u0001\u0002"
        ]
      },
      {
        "prefix": [
          "\u0001\u0002\u0001\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0002\u0001\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\u0001\u0002\u0001\u0002"
        ]
      },
      {
        "prefix": [
          "\u0001\u0002\u0001"
        ],
        "suffix": "",
        "pump": [
          "\u0002\u0001\u0002\u0001"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "@\"(\\\\.|.)*?\"",
    "inputs": [
      {
        "prefix": [
          "@\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "@\""
        ],
        "suffix": "@\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "@\"\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      },
      {
        "prefix": [
          "@\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "@\""
        ],
        "suffix": "@\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "@\"."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "\"@\"^\\.|"
        ],
        "suffix": "\\\\\\.\\\\\\\\\\.\\\\\\.heubtidabatdzx|\\\\\\.heubtidabatdzxkxnwlphfedohztrsnekpclumfugard",
        "pump": [
          "\\\\\\.\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:((`(?:([^\\n\\r\\\\`]+)|(\\\\(?:(?:(?:[\"'\\\\bfnrtv])|(?:[^\\d\"'\\\\bfnrt-vx]))|(?:[x](?:[\\dA-Fa-f]){2})|(?:[u](?:[\\dA-Fa-f]){4}))))*`)))",
    "inputs": [
      {
        "prefix": [
          "`"
        ],
        "suffix": "",
        "pump": [
          "a\\x00"
        ]
      },
      {
        "prefix": [
          "`a"
        ],
        "suffix": "ua\\u",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "`"
        ],
        "suffix": " m6= m6=(/_}5]-{J",
        "pump": [
          " m6="
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\t|\\x0a|\\x0d|\\s)+$",
    "inputs": [
      {
        "prefix": [
          " "
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n\n\n\r\n\n\n\r\r\n\n\r\n\t\r\n\n\b",
        "pump": [
          "\n\n\n\r"
        ]
      },
      {
        "prefix": [
          " "
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\na",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\r\t\r\n\r\t\r\n\r \r \r\r\r\r \t \tO",
        "pump": [
          "\r\t\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^struct\\s*([a-z_0-9]+)\\s*{\\s*((.|\\n)*?)}",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "^ *x{3,}( *x{3,})* *$",
    "inputs": [
      {
        "prefix": [
          "xxx"
        ],
        "suffix": "\\x00",
        "pump": [
          " xxxxxx"
        ]
      },
      {
        "prefix": [
          "xxx"
        ],
        "suffix": " x ",
        "pump": [
          " xxxxxxx"
        ]
      },
      {
        "prefix": [
          "xxxxxx"
        ],
        "suffix": "\u0000",
        "pump": [
          "xxxxxx"
        ]
      },
      {
        "prefix": [
          "x"
        ],
        "suffix": "\\x00",
        "pump": [
          "xx"
        ]
      },
      {
        "prefix": [
          "xx"
        ],
        "suffix": "#",
        "pump": [
          "xx"
        ]
      },
      {
        "prefix": [
          "xxx"
        ],
        "suffix": "\u0000",
        "pump": [
          "xx"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "xxxxxxxxxx xx xxxxxxxq",
        "pump": [
          "xxxx"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": ">Children<(.|\\n)*?<td>\\\\s*([0-9]*)",
    "inputs": [
      {
        "prefix": [
          ">Children<"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ">Children<"
        ],
        "suffix": "hi",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          ">Children<"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ">Children<"
        ],
        "suffix": "C",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\"(:?[^\\\\\"]|\\\\(:?[bfnrtv\"\\\\/]|u[0-9a-fA-F]{4}))*\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          ":;"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "u",
        "pump": [
          ":a"
        ]
      },
      {
        "prefix": [
          "\"u^]~;;{:}"
        ],
        "suffix": ">:?:>\b::>:?:>\b::@::{>;?@i\b;<<:?@\b>@<;|;{|=?:>\b^]>K<~;;{:}>|>\b;",
        "pump": [
          ">:?:>\b::"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          ":;"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "ua",
        "pump": [
          ":a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([a-zA-Z0-9]*:[a-zA-Z0-9]*)(,|[a-zA-Z0-9]*:[a-zA-Z0-9]*)*",
    "inputs": [
      {
        "prefix": [
          ":"
        ],
        "suffix": ",a,",
        "pump": [
          ",:a:"
        ]
      },
      {
        "prefix": [
          "::a"
        ],
        "suffix": "\u0000",
        "pump": [
          "0:a"
        ]
      },
      {
        "prefix": [
          ":"
        ],
        "suffix": ",a",
        "pump": [
          ",:a:"
        ]
      },
      {
        "prefix": [
          "::A"
        ],
        "suffix": "\u0000",
        "pump": [
          "0:A"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^msgid_plural \"(((\\\\.)|[^\"])*)\"",
    "inputs": [
      {
        "prefix": [
          "msgid_plural \""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "msgid_plural \""
        ],
        "suffix": "l",
        "pump": [
          "\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\s*(\\n\\s*){2,}",
    "inputs": [
      {
        "prefix": [
          "\n"
        ],
        "suffix": "#",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "\n"
        ],
        "suffix": "a\n",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\s*=\\s*((\"[^\\\"]*\")|(\\'.\\')|(([-\\w:~]*)\\s*([<>\\|\\+-]*\\s*\\w*\\s*)*(\\(\\w*\\))?))",
    "inputs": [
      {
        "prefix": [
          "="
        ],
        "suffix": "a:(",
        "pump": [
          "++"
        ]
      },
      {
        "prefix": [
          "=w"
        ],
        "suffix": "\u0000",
        "pump": [
          "sw"
        ]
      },
      {
        "prefix": [
          "="
        ],
        "suffix": "(",
        "pump": [
          "++"
        ]
      },
      {
        "prefix": [
          "=|"
        ],
        "suffix": "\u0000",
        "pump": [
          "s|"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "f\\s+((([\\d]{1,}\\/[\\d]{1,}\\/[\\d]{1,}[\\s]?){3,})+)",
    "inputs": [
      {
        "prefix": [
          "f\t"
        ],
        "suffix": "0\t0/",
        "pump": [
          "0/0/000/0/00/0/0"
        ]
      },
      {
        "prefix": [
          "fsd/d/dd/d/dd/d/dd/d/dd/d/dd/d/dd/d/ds"
        ],
        "suffix": "\u0000",
        "pump": [
          "d/d/dd/d/dd/d/dd/d/ds"
        ]
      },
      {
        "prefix": [
          "f\t"
        ],
        "suffix": "\t\t0/0/00/",
        "pump": [
          "0/0/000/0/00/0/0"
        ]
      },
      {
        "prefix": [
          "fsd/d/dd/d/dd/d/dd/d/dd/d/dd/d/dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "dd/d/dd/d/dd/d/dd/d/dd"
        ]
      },
      {
        "prefix": [
          "f\t0/0/0"
        ],
        "suffix": "\tf",
        "pump": [
          "0/0/00"
        ]
      },
      {
        "prefix": [
          "fsd/d/dd/d/dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "dd/d/dd"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\r\\n|[\\x20\\x0d\\x0a\\x09])+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\r\n\r\n"
        ]
      },
      {
        "prefix": [
          "09"
        ],
        "suffix": "\u0000",
        "pump": [
          "x9"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\ra",
        "pump": [
          "\r\n\r\n"
        ]
      },
      {
        "prefix": [
          "0x"
        ],
        "suffix": "\u0000",
        "pump": [
          "xx"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(([a-z_\\-0-9\\.]|[A-Z_\\-0-9\\.])+)$",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "!",
        "pump": [
          "-"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "a-"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "-69--69--a-z99-e5b46a?",
        "pump": [
          "-69-"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": " (?:\\S*<%(?:[^%>]|\\\\.)*%>\\S*) | (?:\"(?:[^\\\\\"]|\\\\.)*\") | (?:'(?:[^\\\\']|\\\\.)*') | \\S+ ",
    "inputs": [
      {
        "prefix": [
          " <%"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          " <%"
        ],
        "suffix": "\\\" ><\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          " \"."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          " <%"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          " <%"
        ],
        "suffix": "\\'\t a\\<\"  a<'  %",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          " <%."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[a-zA-Z]:\\\\([^\\\\]+\\\\?)*",
    "inputs": [
      {
        "prefix": [
          "a:\\a"
        ],
        "suffix": "a\\\\",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a:\\a"
        ],
        "suffix": "a\\\\a:",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[a-zA-Z]+[a-zA-Z0-9_]*(::[a-zA-Z]+[a-zA-Z0-9_]*)+$",
    "inputs": [
      {
        "prefix": [
          "a0::A"
        ],
        "suffix": "!",
        "pump": [
          "::AA"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a:a",
        "pump": [
          "::aa"
        ]
      },
      {
        "prefix": [
          "A::A::AA"
        ],
        "suffix": "\u0000",
        "pump": [
          "a::AA"
        ]
      },
      {
        "prefix": [
          "a0a::A"
        ],
        "suffix": "!",
        "pump": [
          "::AA"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a:a0",
        "pump": [
          "::aa"
        ]
      },
      {
        "prefix": [
          "A::A::a"
        ],
        "suffix": "\u0000",
        "pump": [
          "a::a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((?:'[^']*'|\"[^\"]*\"|,[\\s\\n]|[^\\s\\n])*)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\"\t\"\t'\t",
        "pump": [
          "''"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "''''"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "* First integer indicates how much room we have *",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "W-qDW-qDk)p< \t&ib.",
        "pump": [
          "W-qD"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\{?\"([^\"\\\\]|\\\\.)*\"|[^,{}]+)+([,}]+)",
    "inputs": [
      {
        "prefix": [
          "|"
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "V]oHV]oH\b65\n\t[kK",
        "pump": [
          "V]oH"
        ]
      },
      {
        "prefix": [
          "|"
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\\"",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t\n9J\t\n9JNt9\bQ'^Z\n",
        "pump": [
          "\t\n9J"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:(\\r\\n|\\r|\\n)+\\s*--)",
    "inputs": [
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\r\n-\t",
        "pump": [
          "\r\n\r\n"
        ]
      },
      {
        "prefix": [
          "\r\r\n\r"
        ],
        "suffix": "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\r\n\r\n\r\n",
        "pump": [
          "\r\n\r\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.*?\\r\\n)*?\\r\\n",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "!\\x0d\\x0a\\x0d\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\r",
        "pump": [
          "\r\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.*)\\.fileName = \"(.*\\/)*(.*\\.vmdk)\"$",
    "inputs": [
      {
        "prefix": [
          ".fileName = \""
        ],
        "suffix": "",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          ".fileName = \""
        ],
        "suffix": "= ",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          "\u0000fileName = \"\u0000"
        ],
        "suffix": "",
        "pump": [
          "/\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "* compute tau *",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "m",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "[QO>[QO>Z!:\"?qnd?w",
        "pump": [
          "[QO>"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:<script.*>.*<\\/script>)+|<\\/?[^>]+>|[[[:alpha:]][0-9]\\|`~!@#\\$%^&*\\(\\)\\-_\\+=\\[\\]{}:;'²³§\",\\.\\/?]+|\\s+|[[:punct:]]",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "cr</scr",
        "pump": [
          "<script>></script>"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "cr<></sc",
        "pump": [
          "<script>></script>"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\s*\\/\\/.*)*\\s*lodash\\.prototype.+\\n",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x09//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "s",
        "pump": [
          "\t//\t"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "",
        "pump": [
          "////"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x09//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "yl",
        "pump": [
          "\t/////"
        ]
      },
      {
        "prefix": [
          "//\u0000"
        ],
        "suffix": "",
        "pump": [
          "//\u0000"
        ]
      },
      {
        "prefix": [
          "#////^"
        ],
        "suffix": "////////////<':#>+0666047025525@//)orp.hsadoltasdl\\SyQmVth\\d*?7n?F7CsF)3b(.0aCp.\\\\ado<\\T[slnto&@(..&@T[",
        "pump": [
          "//////"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([A-Z0-9]|[A-Z0-9]+[a-z0-9]+(?:[A-Z0-9]+[a-z0-9]*)*)$",
    "inputs": [
      {
        "prefix": [
          "Aa"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "0a0"
        ],
        "suffix": "#",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "000a"
        ],
        "suffix": "\u0000",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "Aa09Aa09YFNAA96iG5A*",
        "pump": [
          "Aa09"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(http|ftp|https)://([\\\\w\\\\-_]+(?:(?:\\\\.[\\\\w\\\\-_]+)+))([\\\\w\\\\-\\\\.,@?^=%&amp;:/~\\\\+#]*[\\\\w\\\\-\\\\@?^=%&amp;/~\\\\+#])?$",
    "inputs": [
      {
        "prefix": [
          "http://w\\w-"
        ],
        "suffix": "!",
        "pump": [
          "\\w-\\\\-"
        ]
      },
      {
        "prefix": [
          "ftp://\\"
        ],
        "suffix": "]\\$",
        "pump": [
          "\\a\\\\\\\\\\"
        ]
      },
      {
        "prefix": [
          "https://\\\\w"
        ],
        "suffix": "\\\\\\\\\\\\\\\\\\\\\\\\w\\\\\\\\\\\\\\\\\\\\\\\\t",
        "pump": [
          "\\\\\\\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\$(?:\\\\?[\\w\\W])*?\\$|\\\\\\((?:\\\\?[\\w\\W])*?\\\\\\)|\\\\\\[(?:\\\\?[\\w\\W])*?\\\\\\]",
    "inputs": [
      {
        "prefix": [
          "$"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "$"
        ],
        "suffix": "\\\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "$"
        ],
        "suffix": "\\[\\w\\\\\\[\\w\\\\\\[\\w\\\\FCPGFULXAQQJINVJGLTNHWLHARKHWXMWIPQFNMMRXJIBVXUQDQJMZGGGQSAOTANNSTLPAJNDWJC",
        "pump": [
          "\\[\\w\\\\"
        ]
      },
      {
        "prefix": [
          "$"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\\["
        ],
        "suffix": "\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "$\\["
        ],
        "suffix": "\\(\\[\\\\\\(\\[\\\\[\\\\[\\(\\[\\\\[\\(\\",
        "pump": [
          "\\(\\[\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\s*\\n*)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(<form (?:\"[^\"]*\"|'[^']*'|[^'\"<>]*)*>)(.*?)<\\/form>",
    "inputs": [
      {
        "prefix": [
          "<form "
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          "<form "
        ],
        "suffix": "or</\"<a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<form ''"
        ],
        "suffix": "",
        "pump": [
          "\"\"''"
        ]
      },
      {
        "prefix": [
          "<f"
        ],
        "suffix": "orm orm 7y=@f0gh@]n[`4",
        "pump": [
          "orm "
        ]
      },
      {
        "prefix": [
          "<form "
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          "<form "
        ],
        "suffix": "m>a'<for",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<form ''"
        ],
        "suffix": "",
        "pump": [
          "\"\"''"
        ]
      },
      {
        "prefix": [
          "<f"
        ],
        "suffix": "orm orm 6-FW\\cpt%1_kf",
        "pump": [
          "orm "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Cluster(.|\\n)*topology=(.|\\n)*servers=",
    "inputs": [
      {
        "prefix": [
          "Cluster"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "Cluster"
        ],
        "suffix": "er\nts",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "Cluster"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "Cluster"
        ],
        "suffix": "p",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^( *\\@charset [^;]+; *)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "h",
        "pump": [
          " @charset a; "
        ]
      },
      {
        "prefix": [
          "@charset \u0000;@charset \u0000; "
        ],
        "suffix": "\u0000",
        "pump": [
          " @charset \u0000; "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[a-z](-?[a-z0-9]+)+$",
    "inputs": [
      {
        "prefix": [
          "a0"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a-a"
        ],
        "suffix": "--",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a0a"
        ],
        "suffix": "\u0000",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a433a43339069202927^",
        "pump": [
          "a433"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((-- |#)[^\\n]*\\n|/\\*.*?\\*/)*(DROP|CREATE)[[:space:]]+(IF EXISTS[[:space:]]+)?(TABLE|DATABASE)[[:space:]]+(.+)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "-- \n/**/#*/DROPaIF E",
        "pump": [
          "-- \n/**//**/"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\{.*?:.*?\\})+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "{::}"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\.?\\w+)*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ".a"
        ],
        "suffix": "..",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "6jyi6jyiwDwgbPvdtT|",
        "pump": [
          "6jyi"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\n\\s*)+$",
    "inputs": [
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "\n "
        ],
        "suffix": "\n\n\n\n\n\n\n\n \n\t\n \n \n\t \t \n\r   \n\n)",
        "pump": [
          "\n\n\n\n"
        ]
      },
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "2\n\t"
        ],
        "suffix": "\n\n\n\n\n\n\n\n\n\n \n \n\r\r\r\r\n\r   \n \n  \t\\",
        "pump": [
          "\n\n\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:'[^']*'|[^:])+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": ":':",
        "pump": [
          "''''"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": ":",
        "pump": [
          "''\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a:",
        "pump": [
          "''''"
        ]
      },
      {
        "prefix": [
          "\u0000''"
        ],
        "suffix": ":",
        "pump": [
          "''''"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[a-zA-Z][a-zA-Z0-9_-]*(?:\\[(?:\\d*|[a-zA-Z0-9_-]+)\\])*$",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "!",
        "pump": [
          "[0]"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "0[[",
        "pump": [
          "[0]"
        ]
      },
      {
        "prefix": [
          "Aa"
        ],
        "suffix": "\u0000",
        "pump": [
          "da"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^<([\\-A-Za-z0-9:_]+)((?:\\s+[\\-A-Za-z0-9:_]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>",
    "inputs": [
      {
        "prefix": [
          "<-"
        ],
        "suffix": "",
        "pump": [
          " a=''"
        ]
      },
      {
        "prefix": [
          "<a"
        ],
        "suffix": "\t",
        "pump": [
          "\ta=\"\""
        ]
      },
      {
        "prefix": [
          "<-s-a"
        ],
        "suffix": "",
        "pump": [
          "s-a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "C (\\S+) ; WX (\\S+) ; N (\\S+) ; B (\\S+) (\\S+) (\\S+) (\\S+) ;((?: L \\S+ \\S+ ;)+)?",
    "inputs": [
      {
        "prefix": [
          "C a ; WX a ; N a ; B a a a a ;"
        ],
        "suffix": " L",
        "pump": [
          " L a  a ;"
        ]
      },
      {
        "prefix": [
          "C a ; WX a ; N a ; B a a a a ;"
        ],
        "suffix": " Wa\tC aC ; WX  ; ; N  ; ; B  ;  ;  ; N",
        "pump": [
          " L a  a ;"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\"(\\\\.|\\\\\\n|.)*?\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\\\x0a"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\",
        "pump": [
          "\\\n"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\\\\@-\\@-\\\\\\@-\\@-$*.%_[${!<\\`<<@\\\\|~`<<@\\\\|~[-[$hv;{||;<>:\b@{;~?\b@{>>;=:?=\b|{<{:<?\b=||?}=@;\b\b|{};\b}",
        "pump": [
          "\\\\\\@-\\@-"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\\\x0a"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\n",
        "pump": [
          "\\\n"
        ]
      },
      {
        "prefix": [
          "\"\\\\.||"
        ],
        "suffix": ".\\B\\\\\\na7499AeC4986cAe\\\\\\na7499AeC4986cAe4c868\\Bnf\bUS|\\\\\\na",
        "pump": [
          ".\\B\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([A-Z]+[a-z]*)+$",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "!",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "#",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "AA"
        ],
        "suffix": "\u0000",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "TPISTPISEJOHRWMKMQU-",
        "pump": [
          "TPIS"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*\\{((.|\\n)*)\\}\\s*$",
    "inputs": [
      {
        "prefix": [
          "{"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "}a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^typedef struct( \\S+)?\\s*\\{\\n(([^}\\n].*)?\\n)*\\}\\s*\\*_XPrivDisplay;\\n",
    "inputs": [
      {
        "prefix": [
          "typedef struct {\\x0a"
        ],
        "suffix": "",
        "pump": [
          "~\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "typedef struct{\n"
        ],
        "suffix": "XPri",
        "pump": [
          "a\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\{(.*?)\\})+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "{",
        "pump": [
          "{}{}"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "{",
        "pump": [
          "{}{}"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "function ([^( ]+)+",
    "inputs": [
      {
        "prefix": [
          "function a"
        ],
        "suffix": "f ",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "function \u0000\u0000"
        ],
        "suffix": " ",
        "pump": [
          ")\u0000"
        ]
      },
      {
        "prefix": [
          "function a"
        ],
        "suffix": "  func",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "function \u0000\u0000"
        ],
        "suffix": " ",
        "pump": [
          ")\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^%(.*)+?%",
    "inputs": [
      {
        "prefix": [
          "%"
        ],
        "suffix": "",
        "pump": [
          "&"
        ]
      },
      {
        "prefix": [
          "%"
        ],
        "suffix": "%a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "%\t%"
        ],
        "suffix": "b:\"$b:\"$Dw\"p3\tZx@",
        "pump": [
          "b:\"$"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([^\\[]*)(\\[(\\d+)+\\])?",
    "inputs": [
      {
        "prefix": [
          "[0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "[0"
        ],
        "suffix": "0[[",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "902390237500130156",
        "pump": [
          "9023"
        ]
      },
      {
        "prefix": [
          "[0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "[0"
        ],
        "suffix": "a",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "000000000000000000",
        "pump": [
          "0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\[(\\\\\\\\|\\\\\\]|[^\\]])*\\]",
    "inputs": [
      {
        "prefix": [
          "["
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "]\\a][",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "[["
        ],
        "suffix": "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\\\\\\4118414135154640|\\\\\\41184141",
        "pump": [
          "\\\\\\\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*(context|describe)\\s+('(.*)'|\"(.*)\")+\\s*(\\{|do)",
    "inputs": [
      {
        "prefix": [
          "context ''"
        ],
        "suffix": "",
        "pump": [
          "\"\"\"\""
        ]
      },
      {
        "prefix": [
          "context\t"
        ],
        "suffix": "c",
        "pump": [
          "''''"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(([-+]?[,.]\\d+)\\s*(\\w+))(\\s*,?)*",
    "inputs": [
      {
        "prefix": [
          "+,0a"
        ],
        "suffix": "++",
        "pump": [
          "\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:@endpoint)?\\(?((?:[a-z]+:\\s*[a-z_:,\\.\\[\\]\\/0-9]+)+)[ ]*\\)?",
    "inputs": [
      {
        "prefix": [
          "("
        ],
        "suffix": "@endpoint",
        "pump": [
          "a:aa"
        ]
      },
      {
        "prefix": [
          "("
        ],
        "suffix": "\t",
        "pump": [
          "a:aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "you passed(.|\\n)*?the api calls for(.|\\n)*?object",
    "inputs": [
      {
        "prefix": [
          "you passed"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "you passed"
        ],
        "suffix": " ca",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "you passed"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "you passed"
        ],
        "suffix": "obj",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\w+)(&.+?;)+(\\w+)",
    "inputs": [
      {
        "prefix": [
          "a&!;"
        ],
        "suffix": "",
        "pump": [
          "&!;&;;"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "&;",
        "pump": [
          "&a;&a;"
        ]
      },
      {
        "prefix": [
          "w&\u0000;&\u0000"
        ],
        "suffix": "",
        "pump": [
          ";&\u0000;&\u0000"
        ]
      },
      {
        "prefix": [
          "a&a;"
        ],
        "suffix": "",
        "pump": [
          "&!;&;;"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "&;",
        "pump": [
          "&a;&a;"
        ]
      },
      {
        "prefix": [
          "w&\u0000;&\u0000"
        ],
        "suffix": "",
        "pump": [
          ";&\u0000;&\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*\\.(\\w{2}|(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum))$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "A0"
        ]
      },
      {
        "prefix": [
          "a-a"
        ],
        "suffix": "s.mus",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w@www"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "epeFepeF15BZxMibiN",
        "pump": [
          "epeF"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\{\\{([^\\|}]+)(?:\\|([^}]+))*}}",
    "inputs": [
      {
        "prefix": [
          "{{!"
        ],
        "suffix": "",
        "pump": [
          "|!|!"
        ]
      },
      {
        "prefix": [
          "{{a"
        ],
        "suffix": "}{",
        "pump": [
          "|a|a"
        ]
      },
      {
        "prefix": [
          "{{!"
        ],
        "suffix": "",
        "pump": [
          "|!|!"
        ]
      },
      {
        "prefix": [
          "{{a"
        ],
        "suffix": "}}a{{{",
        "pump": [
          "|a|a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\\"(.+)*\\\"$",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "##"
        ]
      },
      {
        "prefix": [
          "\"a"
        ],
        "suffix": "a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\"\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\"1d3\"1d30hX3l_:x5r:",
        "pump": [
          "\"1d3"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<style(?:\\s+[^>]*)?>(?:.|\\r|\\n)*?<\\/style>",
    "inputs": [
      {
        "prefix": [
          "<style>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<style>"
        ],
        "suffix": "</\n<></st",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<style>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<style>"
        ],
        "suffix": "yl</\n",
        "pump": [
          "\r"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([\\n\\s]+|%[^\\n]*\\n)*(.)",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "aa\na\t",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "pump": [
          "\n\n\n\n"
        ]
      },
      {
        "prefix": [
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "pump": [
          "\n\n\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\w(?:\\.?[\\w%+-]+)*@\\w(?:[\\w-]*\\.)+?[a-z]{2,}$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "A%"
        ]
      },
      {
        "prefix": [
          "a.a"
        ],
        "suffix": "a@a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w%+"
        ],
        "suffix": "",
        "pump": [
          "w+"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "GMZgGMZgI4mCqvdcv8K",
        "pump": [
          "GMZg"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "A%"
        ]
      },
      {
        "prefix": [
          "a.a"
        ],
        "suffix": "A.@",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w@w\u0000-"
        ],
        "suffix": "",
        "pump": [
          "w-"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "2AiH2AiH%hGkiPElpDA",
        "pump": [
          "2AiH"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\w+_)*id$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "j___"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "id_a",
        "pump": [
          "a_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "___d_____d___d_33____d_334151003131___d__",
        "pump": [
          "___d__"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "'((\\\\.|[^'])*)'|(\\d+)",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "'."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "0a",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "'\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "0\\\\\\Q\\0\\\\\\Q\\\\.3cb0c\\po\\d+j\rchF|muZdmd+uZdmcj\rchF|muZdmcjj<F_9\\}@cH\\<~{8k*|()r9V).:{dfqG:)^4?SqZj@(LW",
        "pump": [
          "0\\\\\\Q\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:([a-z])|([A-Z])|([0-9])|(.)){6,}|(.)+$",
    "inputs": [
      {
        "prefix": [
          "00000"
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(/\\*\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)$",
    "inputs": [
      {
        "prefix": [
          "/**"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "/**"
        ],
        "suffix": "/**",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "/**/*"
        ],
        "suffix": "*\r\r\n*\r\r\n\r\r\t\n\n\n\b\n\n\b\r",
        "pump": [
          "*\r\r\n"
        ]
      },
      {
        "prefix": [
          "/**"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "/**"
        ],
        "suffix": "//**",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "/**"
        ],
        "suffix": "\n\n\r\r\n\n\r\r\t\n\r\t\n\n\r\t\r\n\r",
        "pump": [
          "\n\n\r\r"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[a-z]{1}([_]{0,1}[a-zA-Z0-9]{1,})+$",
    "inputs": [
      {
        "prefix": [
          "aa"
        ],
        "suffix": "!",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "aa_",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a00a"
        ],
        "suffix": "\u0000",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "aavbaavbCUaavbCUruxB}",
        "pump": [
          "aavb"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "aa_",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a00"
        ],
        "suffix": "\u0000",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "al5mal5mKhgdcTc7WVUX-",
        "pump": [
          "al5m"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\{\\s*((\\\".*\\\"|\\'.*\\'|\\S*)\\s*,\\s*)*(\\\".*\\\"|\\'.*\\'|\\S*)\\s*\\}$",
    "inputs": [
      {
        "prefix": [
          "{"
        ],
        "suffix": "",
        "pump": [
          ",,"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "\"}\t",
        "pump": [
          "\"\",\"\","
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": ",,{,'',,{,'',',BFe{,',BFevF61BF'{,5bCA70DfF",
        "pump": [
          ",,{,''"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\/\\*(.|\\n|\\r)*?\\*\\/",
    "inputs": [
      {
        "prefix": [
          "/*"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "\n",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\(:write-string \"ReferenceError: zzz is not defined(.|\\n)*\"\\)$",
    "inputs": [
      {
        "prefix": [
          "(:write-string \"ReferenceError: zzz is not defined"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "(:write-string \"ReferenceError: zzz is not defined"
        ],
        "suffix": "efin",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\d+)*",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "#",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "d"
        ],
        "suffix": "\u0000",
        "pump": [
          "dd"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\[\\])|(\\[(.|\\s)*?([^\\\\]\\]))",
    "inputs": [
      {
        "prefix": [
          "["
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "\t]\\",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "[\n[[[[[J[[\n[[[\n"
        ],
        "suffix": "\t\t \t\t\t \t  \t\t ",
        "pump": [
          "\t\t \t"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "\t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "[\tk"
        ],
        "suffix": "\t \t \t \t  \n\t\r  \t\t\n\t",
        "pump": [
          "\t \t "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "* Second integer indicates how many items are \"used\", which will\n\t\t * not change during this procedure. However, if the initial array\n\t\t * was empty, then the newly allocated stretchy has no \"used\" slots,\n\t\t * so mark it as such. *",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": " ",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " Sec Second intege",
        "pump": [
          " Sec"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\s*(\\/\\*+|\\/\\/|\\*+\\/|\\*)+\\s?)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\t/\t",
        "pump": [
          "/***/"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": ")(;\\",
        "pump": [
          "''''"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\"\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\"((\\\\.|[^\"])*)\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\"\"\"",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\a",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\\\".\\\\\\yTP?aLl3>56H*"
        ],
        "suffix": "?\\6H\\.*?\\\\?\\6H\\.*?\\\\aLl3*?\\.\\\\.{~=><\\?\\\\.|",
        "pump": [
          "?\\6H\\.*?\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "«([^»\\\\]+|\\\\{2}|\\\\.)*»",
    "inputs": [
      {
        "prefix": [
          "\\xff"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "�a"
        ],
        "suffix": "a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "«Y7_«Y7_r8R'C^n\rBJ",
        "pump": [
          "«Y7_"
        ]
      },
      {
        "prefix": [
          "\\xff"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "�a"
        ],
        "suffix": "\\�\\�",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "«2=x«2=x>+aotk7\r+l",
        "pump": [
          "«2=x"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\[netscape\\]\\s*\\n((?:.*=.*\\n)+)",
    "inputs": [
      {
        "prefix": [
          "[netscape]\n"
        ],
        "suffix": "s",
        "pump": [
          "a=\n"
        ]
      },
      {
        "prefix": [
          "[netscape]\n"
        ],
        "suffix": "\ta",
        "pump": [
          "a=\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?: *\\/\\/.*\\n)*(\\s*)' *<%.+?useStrict.+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x0a//\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " //\n'<%a",
        "pump": [
          " //\n//\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x0a//\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " //\n'<%a\nuseStr",
        "pump": [
          " //\n//\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\\\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
    "inputs": [
      {
        "prefix": [
          "^.^@[250.250.250.2500:]"
        ],
        "suffix": "",
        "pump": [
          "\\^"
        ]
      },
      {
        "prefix": [
          "\"\"@[000.000.000.a:"
        ],
        "suffix": "2a\"@[26.26.26.",
        "pump": [
          "a\\a"
        ]
      },
      {
        "prefix": [
          "^\"^\"@a-.^@a.a!\\x0e^\"@[250.250.250.2500:\\x7f"
        ],
        "suffix": "",
        "pump": [
          "\\^"
        ]
      },
      {
        "prefix": [
          "\"\"@[000.000.000.a:"
        ],
        "suffix": "-",
        "pump": [
          "a\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([\\d\\s\\p{L}:,\\.]{3,})+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "aaaaaa"
        ]
      },
      {
        "prefix": [
          ",,,,,,,"
        ],
        "suffix": "\u0000",
        "pump": [
          "},,,"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a$",
        "pump": [
          "aaaaaaa"
        ]
      },
      {
        "prefix": [
          ",,,,,{"
        ],
        "suffix": "\u0000",
        "pump": [
          "},,,,{"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ",:"
        ],
        "suffix": "\u0000",
        "pump": [
          "}:"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\w+.+)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w\u0000ww"
        ],
        "suffix": "",
        "pump": [
          "www"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w\u0000ww"
        ],
        "suffix": "",
        "pump": [
          "www"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "refs\\/tags\\/(v?[0-9.-]+)(\\^\\{(.*)\\})*",
    "inputs": [
      {
        "prefix": [
          "refs/tags/v-"
        ],
        "suffix": "e",
        "pump": [
          "^{}^{}"
        ]
      },
      {
        "prefix": [
          "refs/tags/v-"
        ],
        "suffix": "e}a",
        "pump": [
          "^{}^{}"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "* Iterate through the number of x and y ellipses to draw *",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "hr",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ";3s ;3s ]5E:sii+(t",
        "pump": [
          ";3s "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\w|.)+@\\w+(\\.\\w+){1,2}",
    "inputs": [
      {
        "prefix": [
          "{"
        ],
        "suffix": "",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "$@a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000w"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "FI_oFI_o@Sal_PbNa",
        "pump": [
          "FI_o"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000w"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "_>UY_>_>UY_>{l'[Y$QGU^1j",
        "pump": [
          "_>UY_>"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "w\u0000"
        ]
      },
      {
        "prefix": [
          ">"
        ],
        "suffix": "ZfCTZfCTwQ0PB,XR",
        "pump": [
          "ZfCT"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\[.*\\]\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "]",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w-\\.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"address\\\": \\\"(\\S+?)\\\".*\\\"value\\\": (\\d+)",
    "inputs": [
      {
        "prefix": [
          "\"address\": \"a"
        ],
        "suffix": "\"a",
        "pump": [
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "s\t\"addre",
        "pump": [
          "\"address\": \"a",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)\\s*:\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t:\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)\\s*month",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "t",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(secret \\d* {0,1})\\S+(.*)",
    "inputs": [
      {
        "prefix": [
          "secret 0",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "asecret 0",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      },
      {
        "prefix": [
          "secret 0 ",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "git-cpan-module:\\ (.*?) \\s+ git-cpan-version: \\s+ (\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \t \t git-cpan-ver",
        "pump": [
          "git-cpan-module: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(\\w+)\\s*=\\s*['\"]?([^'\"]+)['\"]?\\s*$",
    "inputs": [
      {
        "prefix": [
          "\ta\t=\t",
          "a"
        ],
        "suffix": "\ta\"$",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "w=\u0000\u0000"
        ],
        "suffix": "'\u0000",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z_]\\w*(\\.[a-zA-Z_]\\w*)+",
    "inputs": [
      {
        "prefix": [
          "A\u0000A\u0000Aw"
        ],
        "suffix": "\u0000",
        "pump": [
          "www"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "A\u0000A\u0000Aw"
        ],
        "suffix": "\u0000",
        "pump": [
          "www"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "primary_key\\[(.+)_version_name\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "me",
        "pump": [
          "primary_key[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(?:\\w:)?autoFilter[^>]*([\\/]|>([\\s\\S]*)<\\/(?:\\w:)?autoFilter)>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "au",
        "pump": [
          "<autoFilter"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "No\\.[ 0-9]+ (\\S+\\....) (?:\\d+ bytes )?\\[",
    "inputs": [
      {
        "prefix": [
          "No. "
        ],
        "suffix": "o",
        "pump": [
          " a"
        ]
      },
      {
        "prefix": [
          "aNo. "
        ],
        "suffix": "o",
        "pump": [
          " a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\r\\n]+install_requires =[\\r\\n]+(.+?)[\\r\\n]+\\w",
    "inputs": [
      {
        "prefix": [
          "\ninstall_requires =\n",
          "a"
        ],
        "suffix": "all_re",
        "pump": [
          "a",
          "\n"
        ]
      },
      {
        "prefix": [
          "a",
          "\ninstall_requires =\n",
          "a"
        ],
        "suffix": "na",
        "pump": [
          "\n",
          "a",
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n(\\s*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " \\(+.+",
    "inputs": [
      {
        "prefix": [
          " ("
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a ("
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<[^>]+?>|[^\\w -.,]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000a><>",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<span class=\"amount\">(.*?) &euro;</span>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "eu",
        "pump": [
          "<span class=\"amount\">"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?) (.+?) (.+?) :(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          " a",
          " a",
          " :"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^browser window is resized to width \"(.*?)\" and height \"(.*?)\"$",
    "inputs": [
      {
        "prefix": [
          "browser window is resized to width \"a"
        ],
        "suffix": "h",
        "pump": [
          "\" and height \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[ \\\"].*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          " "
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\? .* \\(Use arrow keys\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "? "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^ ]*):((((\\(.*\\))))|([^ ])*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "( ",
        "pump": [
          ":("
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "( ",
        "pump": [
          "a",
          ":("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ": (\\d+).(\\d+)",
    "inputs": [
      {
        "prefix": [
          ": 0"
        ],
        "suffix": "::",
        "pump": [
          "a0"
        ]
      },
      {
        "prefix": [
          "a: 0"
        ],
        "suffix": " 0:0: 0",
        "pump": [
          "a0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+::([^:]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a:a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<!-- nocache_(.*) '(.*)' -->",
    "inputs": [
      {
        "prefix": [
          "<!-- nocache_a"
        ],
        "suffix": "<a",
        "pump": [
          " '"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "-",
        "pump": [
          "<!-- nocache_",
          " '"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*?Updated: ([a-zA-Z]+ \\d\\d?, \\d\\d\\d\\d).*?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Updated: a 00, 0000"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "Updated: a 00, 0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "DirectorJobRunner: (?:\\[external-(cpi)\\] \\[cpi-(\\d+)\\] request: ({.*}) with command:.*|SENT: (agent)\\.([^ ]*) (.+))$",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\,?\\s*",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": ",,",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w(?:\\.|[-.'\\w]+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "tags: (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "tags: "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "background-image: url\\([^\\)]+\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "background-image: url(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*replace\\s*(?:low_priority|delayed)?\\s*(?:into\\s*)?(?:[`\\\"]*([a-zA-Z0-9_]+)[`\\\"]*\\.){0,1}[`\\\"]*([a-zA-Z0-9_]+)",
    "inputs": [
      {
        "prefix": [
          "\treplace\t"
        ],
        "suffix": "epl\"",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "\treplace\t"
        ],
        "suffix": "e\"",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "replace0\""
        ],
        "suffix": "",
        "pump": [
          "\"\"0\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^[\\n ]*(.*)",
    "inputs": [
      {
        "prefix": [
          "\n"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{[^\"'}]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "{\"",
        "pump": [
          "{"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "({.*?})",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\w-:\\/.]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*(\\d+\\.\\d+) <\\.\\.\\. [\\a-zA-Z\\d]+ resumed>(.*)$",
    "inputs": [
      {
        "prefix": [
          "\t0.0 <... a"
        ],
        "suffix": "a",
        "pump": [
          " resumed>"
        ]
      },
      {
        "prefix": [
          "d\u0000d <\u0000\u0000\u0000 AA"
        ],
        "suffix": "",
        "pump": [
          "dA"
        ]
      },
      {
        "prefix": [
          "a",
          "\t0.0 <... a"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          " resumed>"
        ]
      },
      {
        "prefix": [
          "d\u0000d <\u0000\u0000\u0000 AA"
        ],
        "suffix": "",
        "pump": [
          "dA"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(https?://[A-Za-z0-9.:_/?#~\\$\\-=&%]+|[A-Za-z0-9_][A-Za-z0-9_.']*[A-Za-z0-9_])",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "tp'",
        "pump": [
          "https://a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\,?\\s+no\\s+inv\\.?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "S?[9Z]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "9a",
        "pump": [
          "9"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)\\s+(==|eq|!=|ne|<>|<|<=|>|>=)\\s+(.*?)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t==\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[?&]hl=([^&]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "h?&hl",
        "pump": [
          "&hl="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\W+dvd\\W*rip\\W*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "dvd",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^=]+)(?:=([\\s\\S]*))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Aa]r)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(me\\x{e1}n)<\\/[A-DF-Z]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n<",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\S+\\s*\\S*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\ta\t",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9_]*[^0-9a-zA-Z_]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<#[\\s\\S]*?#>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<#",
        "pump": [
          "<#"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ":plurals\\/(\\S+):",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ls:\t:plural",
        "pump": [
          ":plurals/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.8xlarge",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "8x",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<nowiki>(=+[^=]+=+)<\\/nowiki>(.+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "<nowiki>=a=</nowiki>a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\\w_]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<a href=\"(.*?[^>]?)®(.*?[^>]?)\">",
    "inputs": [
      {
        "prefix": [
          "<a href=\"a"
        ],
        "suffix": "a ",
        "pump": [
          "a�a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ef>�\"",
        "pump": [
          "<a href=\"a",
          "a�a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "500.*content-type.*Server error",
    "inputs": [
      {
        "prefix": [
          "500a"
        ],
        "suffix": " con",
        "pump": [
          "content-type"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "nt",
        "pump": [
          "500",
          "content-type"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*snow-report.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "snow-report"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "snow-report"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(%?)%\\{([^\\}]+)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}%{",
        "pump": [
          "%%{a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(<S>(?:[Dd][eo]n|[Ss]an?|[Ff]aoin|[\\x{d3}\\x{f3}]n)<\\/S> <E[^>]*>(?:<N[^>]*pl=\"n\" gnt=\"n\" gnd=\"f\"[^>]*>[^<]+<\\/N>)<\\/E>)",
    "inputs": [
      {
        "prefix": [
          "<S>Den</S> <Ea><Na"
        ],
        "suffix": "S>Ón",
        "pump": [
          "pl=\"n\" gnt=\"n\" gnd=\"f\""
        ]
      },
      {
        "prefix": [
          "a<S>Den</S> <Ea><Na"
        ],
        "suffix": "/E><N<p",
        "pump": [
          "pl=\"n\" gnt=\"n\" gnd=\"f\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)([a-z]?)('*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^>(.*)\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          ">a",
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(\\s*([^\\?].*?)\\s*\\)",
    "inputs": [
      {
        "prefix": [
          "(\t",
          "a"
        ],
        "suffix": "?",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "a(\t",
          "a"
        ],
        "suffix": "?)(",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "attach:(.*)\\.(.*)",
    "inputs": [
      {
        "prefix": [
          "attach:a"
        ],
        "suffix": "a",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "attach:",
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)resources\\/sap\\/ui\\/qunit\\/qunit-redirect\\.js$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ce",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(data-for-.*?\\.zip)\\]\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "[data-for-a"
        ],
        "suffix": "[",
        "pump": [
          ".zip]("
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "-f.",
        "pump": [
          "[data-for-",
          ".zip]("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "compilation-.+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "compilation-a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+\\.\\d*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-z]+\\/[a-z]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a/$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s*(\\d+)(mo|[wdhms]))",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "m\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[-+]?[0-9]*\\.?[0-9]+([E|e][0-9]+)?[d|D]",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": "0",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "|0E",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Feedfetcher-Google.*\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "fe",
        "pump": [
          "Feedfetcher-Google"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "CMSSW_5_.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "CMSSW_5_"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*?)\\s*-\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t-\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "\t-\t"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\n\\r][\\n\\r]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na\n",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)says$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ay",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:(\\d+\\.\\d+\\.\\d+)(?:(-)([a-zA-Z]+)(\\d+)?)?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "ss+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "as",
        "pump": [
          "ss"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z]+:+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^.*search=(.*?%29)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e%",
        "pump": [
          "search=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ";+\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ";"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[:!#\\$\\%&*+.\\\\\\/<=>?@^\\|~-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "$"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "tests\\['.*'\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s[",
        "pump": [
          "tests['"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+\\.? ?){2}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a..",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": " a.$",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Unrecognized.*--list2",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "st",
        "pump": [
          "Unrecognized"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "The source file .* does not exist",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "i",
        "pump": [
          "The source file "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\||,).*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ","
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(  \\( [^\\)]* \\)  | . )$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " a",
        "pump": [
          "  ( "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(-?\\d+)/(\\d+)(?:/(-?\\d+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a0/",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "var hostName\\s+=\\s+['\\\"](.+)['\\\"]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=",
        "pump": [
          "var hostName\t=\t\"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\+|\\s+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\s,()\\[\\]]+)(\\(\\d+(-\\d+)*\\))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-(",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Added\\s+.*$",
    "inputs": [
      {
        "prefix": [
          "Added\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "QUOTA\\s(.*?)\\s\\(STORAGE\\s(\\d+)\\s(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0\t",
        "pump": [
          "QUOTA\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "GLAPI (void) APIENTRY gl(ShaderSource)\\s*\\((.*?)\\);",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "our",
        "pump": [
          "GLAPI void APIENTRY glShaderSource("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<content[ >]([^\\>]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "n><c",
        "pump": [
          "<content a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*[\\(\\)](.*?)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "("
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n.infoblock\\n(.+\\n).infoblock",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "nia\n",
        "pump": [
          "\nainfoblock\na"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "-?(?:0|[1-9]\\d*)\\.\\d+(?:e[+-]?\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e+",
        "pump": [
          "1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)([:,](\\d+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",0$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<img(.*?)\\/>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "im<a",
        "pump": [
          "<img"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([^()<>\\@,;:\\\\\"\\/\\[\\]?={} \\t]+):\\s*(.*)",
    "inputs": [
      {
        "prefix": [
          "a:\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"backtrace\\\":\\[[^\\]]+\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "trac",
        "pump": [
          "\"backtrace\":[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "rdoc(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "rdoc"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "FAILED \\(.*errors=(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "FAILED ("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "amqps?:\\/\\/([^@]+).+",
    "inputs": [
      {
        "prefix": [
          "amqps://a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "amqps://a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)\\s+([\\w]+)\\s+([0-9]+)\\s+([0-9]+):([0-9]+):([0-9]+)\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          "0\ta\t0\t0:0:0\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0\ta\t0\t0:0:0\t"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*)Table$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "at\\s+(.*)\\s+\\((.*):(\\d*):(\\d*)\\)",
    "inputs": [
      {
        "prefix": [
          "at\t",
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "a",
          "\t"
        ]
      },
      {
        "prefix": [
          "aat\t",
          "a"
        ],
        "suffix": ":",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[:|@](.*)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\ *?\\|$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          " "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s+(Given|When|Then) (.+)\\s+$",
    "inputs": [
      {
        "prefix": [
          "\tGiven a"
        ],
        "suffix": "he",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "import\\s{render\\sas\\s__vue_render__,\\sstaticRenderFns\\sas\\s__vue_static_render_fns__}\\sfrom\\s\"(.*?)\"",
    "inputs": [],
    "complexity": "polynomial"
  },
  {
    "regex": "(:\\d\\d) \\S+ (\\d{4})$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0a\t",
        "pump": [
          ":00 a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\-\\d+(\\.\\d+){1,3}.+",
    "inputs": [
      {
        "prefix": [
          "-0.0.0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a-0.0.0.0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "-0.0"
        ],
        "suffix": "a",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          "-d\u0000d\u0000d"
        ],
        "suffix": "",
        "pump": [
          "dd\u0000d"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<%([=!@:~\\x1a\\x1b\\x1c\\x1d])?([\\s\\S]*?)%>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%\u001a<",
        "pump": [
          "<%a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^:]+)(/[^\\/].+)?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/aa"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/aa"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(http|https)://(.+):(.+)@(.+):(\\d+)(.*)$",
    "inputs": [
      {
        "prefix": [
          "http://a",
          "a",
          "a:0"
        ],
        "suffix": "a",
        "pump": [
          ":a",
          "@a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\pL`]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"statusText\\\":\\\"(.*?)\\\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "at",
        "pump": [
          "\"statusText\":\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\s+)(\\/[^:\\s]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*javascript:",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ascj",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\Q$alta{'ienc_pre'}\\E([^\\\"]*)\\Q$alta{'ienc_pst'}\\E",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e'",
        "pump": [
          "$alta{'ienc_pre'}"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "request_id.+<html>some_result<\\/html>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "me",
        "pump": [
          "request_ida"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<A[^>]*>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a<><a",
        "pump": [
          "<A"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(xlink\\:href=+|(?:data-)?src(?:set)?\\s*=\\s*)('[^']+'|\"[^\"]+\"|[^\\s\\/>]+)",
    "inputs": [
      {
        "prefix": [
          "xlink:href="
        ],
        "suffix": "et\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([a-zA-Z0-9]+[_|\\_|\\.|\\-]?)*[_a-z\\-A-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.|\\-]?)*[a-zA-Z0-9\\-]+\\.[0-9a-zA-Z]{2,6}$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "|",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0a"
        ],
        "suffix": "",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "ww0aww0a9aAwwwww@y",
        "pump": [
          "ww0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "|",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "00"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "X8wyX8wy1HAy1H.a-zA-Z",
        "pump": [
          "X8wy"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^https?://([\\S]+\\.)*[\\S]+(:[\\d]{2,})*(/+[\\S+]*)*$",
    "inputs": [
      {
        "prefix": [
          "https://"
        ],
        "suffix": "\\x09",
        "pump": [
          "\\x00..."
        ]
      },
      {
        "prefix": [
          "https://a/"
        ],
        "suffix": "\t",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          "http://\\.^[//\\.^2"
        ],
        "suffix": "//:///:/2///\\.^x/\r\b",
        "pump": [
          "//:/"
        ]
      },
      {
        "prefix": [
          "https://"
        ],
        "suffix": "\\x09",
        "pump": [
          "\\x00..."
        ]
      },
      {
        "prefix": [
          "https://a/"
        ],
        "suffix": "\t",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          "http://+"
        ],
        "suffix": "\\///\\///+//t///+\\p://+\\\t",
        "pump": [
          "\\///"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:[\\w\\d-]+\\.?)+@(?:(?:[\\w\\d]\\-?)+\\.)+\\w{2,63}$",
    "inputs": [
      {
        "prefix": [
          "-"
        ],
        "suffix": "",
        "pump": [
          "A-"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "-@a-.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "-@d\u0000d-"
        ],
        "suffix": "",
        "pump": [
          "wd\u0000d-"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "J742J7426cA4DE4fbD",
        "pump": [
          "J742"
        ]
      },
      {
        "prefix": [
          "-"
        ],
        "suffix": "",
        "pump": [
          "A-"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "-a..",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "--d"
        ],
        "suffix": "",
        "pump": [
          "wd"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "twahtwah6o20qgCUAN",
        "pump": [
          "twah"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:\\`((?:.|\\n)*)\\`|([\\w.-]+))_$",
    "inputs": [
      {
        "prefix": [
          "`"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "`"
        ],
        "suffix": "`\n",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[a-z0-9]+[a-z0-9\\-\\_\\.]*([\\/\\\\]{1}[a-z0-9]+[a-z0-9\\-\\_\\.]*)*$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "!",
        "pump": [
          "\\00"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "/-",
        "pump": [
          "/aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\s*this\\.\\$\\w+\\s*=(.|\\s)*?;",
    "inputs": [
      {
        "prefix": [
          "this.$a="
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "this.$a="
        ],
        "suffix": "\tthis",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "this.$w=@this.$w=this.$w=@this.$w=@ \t\n\t\t\n \n"
        ],
        "suffix": " \t \t \t \t\n\r\r\n",
        "pump": [
          " \t \t"
        ]
      },
      {
        "prefix": [
          "this.$t="
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "this.$a="
        ],
        "suffix": "is.th",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          ";this.$b=this.$b=\n\t\r"
        ],
        "suffix": " \r \r \t \r \r \t\t\n\t\t\n\t\r\t\t\n",
        "pump": [
          " \r \r \t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Service Information \"read-one\"\\n(?:.*\\n)*?URL:\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "Service Information \"read-one\"\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "Service Information \"read-one\"\n"
        ],
        "suffix": "Ua",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "Service Information \"read-one\"\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "Service Information \"read-one\"\n"
        ],
        "suffix": "Ua",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Some previous changelog.(\\s|.)*First commit",
    "inputs": [
      {
        "prefix": [
          "Some previous changelog!"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "Some previous changeloga"
        ],
        "suffix": "mmi",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "Some previous changelog\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "s\u0000"
        ]
      },
      {
        "prefix": [
          "Some previous changelogT"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "Some previous changeloga"
        ],
        "suffix": "ng",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "Some previous changelog\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "s\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": ":container\\(\\s*\"*((?:[^()]+?|\\([^()]*\\))+?)\"*\\s*\\)",
    "inputs": [
      {
        "prefix": [
          ":container(#"
        ],
        "suffix": "",
        "pump": [
          "##"
        ]
      },
      {
        "prefix": [
          ":container(a"
        ],
        "suffix": "co",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ":container\u0000\u0000"
        ],
        "suffix": "(",
        "pump": [
          "*\u0000"
        ]
      },
      {
        "prefix": [
          ":container("
        ],
        "suffix": ">1JJ>1JJWpm?m\\.C.",
        "pump": [
          ">1JJ"
        ]
      },
      {
        "prefix": [
          ":container(;"
        ],
        "suffix": "",
        "pump": [
          "##"
        ]
      },
      {
        "prefix": [
          ":container(a"
        ],
        "suffix": "(\t\":(:cont",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ":container\u0000"
        ],
        "suffix": "(",
        "pump": [
          "*\u0000"
        ]
      },
      {
        "prefix": [
          "(:container("
        ],
        "suffix": ":cco:ccontcontain",
        "pump": [
          ":cco"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([0-9a-zA-Z-]+\\.{0,1})*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "!",
        "pump": [
          "--"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a..",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "\u0000\u0000",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "0-9a0-9a-z-9a0A-Z-\t",
        "pump": [
          "0-9a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "!",
        "pump": [
          "--"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "8zP08zP0-9a-zA-Z-Db'",
        "pump": [
          "8zP0"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^edge ([^ ]+)+ ([^ ]+)",
    "inputs": [
      {
        "prefix": [
          "edge \\x00"
        ],
        "suffix": "",
        "pump": [
          "!\\x00"
        ]
      },
      {
        "prefix": [
          "edge a"
        ],
        "suffix": "edg  ",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "edge \u0000\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      },
      {
        "prefix": [
          "edge "
        ],
        "suffix": "^edg^edg^g^edge^ed",
        "pump": [
          "^edg"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:(?:\\s*?)(\\r\\n|\\n|\\r)+([^\\S\\n\\r])+)",
    "inputs": [
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\r\t\n",
        "pump": [
          "\r\n\r\n"
        ]
      },
      {
        "prefix": [
          "\r\r\r\r\r\n\r\r\n\r\n\r\r\n\r\r\n\r\n\r"
        ],
        "suffix": "\r\n\r\n\r\n",
        "pump": [
          "\r\n\r\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:[A-Z][^\\s]*\\s?)+$",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "\\x09!",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t\t",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "AA\u0000"
        ],
        "suffix": "s\u0000",
        "pump": [
          "A\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "M}DGM}DGWF/A;V=EAM\bLwW^iJ{\n'",
        "pump": [
          "M}DG"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([^: ]+):\\s*((:?.|[\\r\\n])*)",
    "inputs": [
      {
        "prefix": [
          "a:"
        ],
        "suffix": "a",
        "pump": [
          ":a:\n"
        ]
      },
      {
        "prefix": [
          "\u0000:\r"
        ],
        "suffix": "",
        "pump": [
          ":\u0000\r"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<i>((.|\\n|\\r\\n)*?)<\\/i>",
    "inputs": [
      {
        "prefix": [
          "<i>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<i>"
        ],
        "suffix": "</i",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<i>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<i>"
        ],
        "suffix": "i\r\n",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^got the first bookmark's date should less than ((\\w+|-)+)",
    "inputs": [
      {
        "prefix": [
          "got the first bookmark's date should less than a"
        ],
        "suffix": "st boo",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "got the first bookmark's date should less than -ww"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "='((\\\\.|[^'])*?)'|\\\"((\\\\.|[^\\\"])*?)\\\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "='"
        ],
        "suffix": "=a\\\"\"\\a'\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "='\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      },
      {
        "prefix": [
          "='"
        ],
        "suffix": "\\\"\\\"\\\\\\\"\\\"\\\\\"\\\"\\o\\H\\\\\"\\\"\\\"\\\"\\o",
        "pump": [
          "\\\"\\\"\\\\"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "=a\\\"\"=",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "='."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\J\\\\Kh\\]\\J\\\\Kh\\]\\18\\[8\\(\\]o\\?4\\\\=\\\\'",
        "pump": [
          "\\J\\\\Kh\\]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\"([^\\\\\\\"]*(\\\\.)?)*\")|('([^\\\\\\']*(\\\\.)?)*')|(\\/{2,}.*?(\\r|\\n))|(\\/\\*(\\n|.)*?\\*\\/)",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\!"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "/*",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "e1Qfe1Qfs8u\n1_2EQ",
        "pump": [
          "e1Qf"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\#"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "/*'a\\",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "(:Hg(:HgQ[&/cs2_X",
        "pump": [
          "(:Hg"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\!"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "/*\"a\\",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "Hg\r]Hg\r]R%DxByI&\r",
        "pump": [
          "Hg\r]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^api-(\\w+-?)+\\.js$",
    "inputs": [
      {
        "prefix": [
          "api-0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "api-a"
        ],
        "suffix": "s..",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "api-ww"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "api-"
        ],
        "suffix": "aiapaiapipiiapapi-",
        "pump": [
          "aiap"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "presto\\/(\\d+(\\.?_?\\d+)+)",
    "inputs": [
      {
        "prefix": [
          "presto/0._0"
        ],
        "suffix": "0..",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "presto/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      },
      {
        "prefix": [
          "presto/0._0"
        ],
        "suffix": "ep",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "presto/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((\\\"[^\\\"]*\\\")|[^ ])((\\\"[^\\\"]*\\\")*[^ ]?)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \"\" ",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": " ",
        "pump": [
          "\"\"\u0000"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "\u0000\"\""
        ],
        "suffix": " ",
        "pump": [
          "\"\"\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<body[^>]*>((.|[\\n\\r])*)<\\/body>",
    "inputs": [
      {
        "prefix": [
          "<body>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<body>"
        ],
        "suffix": "b<></bo",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "<body>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<body>"
        ],
        "suffix": "b>",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([^:\\s]+)*\\s*:\\s*(.*)$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          ";\\x00"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "|9Q)|9Q)zoM|~\"v{y\\",
        "pump": [
          "|9Q)"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "playstation portable(?:\\D+([\\d.]+))*",
    "inputs": [
      {
        "prefix": [
          "playstation portable"
        ],
        "suffix": "st",
        "pump": [
          "a."
        ]
      },
      {
        "prefix": [
          "playstation portable"
        ],
        "suffix": "abpl",
        "pump": [
          "a."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\n1 BIRT(?:\\n[2-9].+)*\\n2 DATE ",
    "inputs": [
      {
        "prefix": [
          "\\x0a1 BIRT"
        ],
        "suffix": "",
        "pump": [
          "\\x0a2!\\x0a2!"
        ]
      },
      {
        "prefix": [
          "\n1 BIRT"
        ],
        "suffix": "AT",
        "pump": [
          "\n2a\n2a"
        ]
      },
      {
        "prefix": [
          "\\x0a1 BIRT"
        ],
        "suffix": "",
        "pump": [
          "\\x0a2!\\x0a2!"
        ]
      },
      {
        "prefix": [
          "\n1 BIRT"
        ],
        "suffix": "I",
        "pump": [
          "\n2a\n2a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<(i|em)>([^<]*)+?<\\/(i|em)>",
    "inputs": [
      {
        "prefix": [
          "<i>"
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          "<i>"
        ],
        "suffix": "ea",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<"
        ],
        "suffix": "i>m*i>m*^e)qbcjlm|qt",
        "pump": [
          "i>m*"
        ]
      },
      {
        "prefix": [
          "<i>"
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          "<i>"
        ],
        "suffix": "e<em",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "/<"
        ],
        "suffix": "i>iQi>iQ6K@6DaMg.O,W",
        "pump": [
          "i>iQ"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\n\\n(.*(\\n.+)*:\\n\\n!\\[.*\\]\\((.*\\))(\\n\\n)?)",
    "inputs": [
      {
        "prefix": [
          "\\x0a\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0a;\\x0a;"
        ]
      },
      {
        "prefix": [
          "\n\n"
        ],
        "suffix": "](\n:",
        "pump": [
          "\na\na"
        ]
      },
      {
        "prefix": [
          "\\x0a\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0a;\\x0a;"
        ]
      },
      {
        "prefix": [
          "\n\n"
        ],
        "suffix": "](",
        "pump": [
          "\na\na"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[A-Za-z0-9_]+(\\[(\\[.*?\\]|.)*?\\])?",
    "inputs": [
      {
        "prefix": [
          "a["
        ],
        "suffix": "a[",
        "pump": [
          "[]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:\"([^\"]|(\\\\.))*\")",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\"\"\"",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\X\\\\\\\\\\X\\\\\\\\JJ\\\\\\\\\\|LL\bm/U\\\\ECFHLTCYJLFUSX",
        "pump": [
          "\\X\\\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[ ]{0,2}([ ]?\\-[ ]?){3,}[ \\t]*$",
    "inputs": [
      {
        "prefix": [
          "   -  --"
        ],
        "suffix": "\\x00",
        "pump": [
          "- -"
        ]
      },
      {
        "prefix": [
          " -  - "
        ],
        "suffix": "-\t-",
        "pump": [
          " - -"
        ]
      },
      {
        "prefix": [
          "----"
        ],
        "suffix": "\u0000",
        "pump": [
          " -"
        ]
      },
      {
        "prefix": [
          " --"
        ],
        "suffix": "- ----- - - - ----- - - ------ ---- - -- --- - -\t-",
        "pump": [
          "- ----- - - "
        ]
      },
      {
        "prefix": [
          "-"
        ],
        "suffix": "\\x00",
        "pump": [
          "- -"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "-\t-",
        "pump": [
          " - -"
        ]
      },
      {
        "prefix": [
          "--"
        ],
        "suffix": "\u0000",
        "pump": [
          " -"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\r?\\n|\\r)+$",
    "inputs": [
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\r\n\r\n"
        ]
      },
      {
        "prefix": [
          "\t\r\n\r\n\n\n\n\n\n"
        ],
        "suffix": "\n\r\n\r\r\n\r\n\n\r\n\r\n\r\r\n\r\n\n\r\n\n\n\r\n\r\r\n\r\n\n\t",
        "pump": [
          "\n\r\n\r\r\n\r\n\n\r"
        ]
      },
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\na",
        "pump": [
          "\r\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\s*\\/\\/.*)*\\s*mixin\\(lodash\\).+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x09//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t//mixin",
        "pump": [
          "\t//\t"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "",
        "pump": [
          "////"
        ]
      },
      {
        "prefix": [
          "#/////BT>0y8aY1//BT>0y8=01FIYa!*"
        ],
        "suffix": "/////BT8+na;///////BT8+na;//BT>0y8+\"Iifr}+Y\b5uMFl||a?L.2",
        "pump": [
          "/////BT8+na;//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x09//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t//m/",
        "pump": [
          "\t/////"
        ]
      },
      {
        "prefix": [
          "//\u0000"
        ],
        "suffix": "",
        "pump": [
          "//\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "/////////////mix///mixin/dash).///mixin(ash//m///lodas",
        "pump": [
          "//////"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\\\begin{proof}((.|\\n)*?)\\\\end{proof}",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "U3\\/((\\d+|\\.){5,})",
    "inputs": [
      {
        "prefix": [
          "U3/....0"
        ],
        "suffix": "/.0..",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "U3/\u0000\u0000\u0000\u0000\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "d\u0000"
        ]
      },
      {
        "prefix": [
          "U3/....0"
        ],
        "suffix": "/.",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "U3/\u0000\u0000\u0000\u0000\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "d\u0000"
        ]
      },
      {
        "prefix": [
          "U3/0"
        ],
        "suffix": "U",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:(\\r\\n|\\r|\\n)+\\s*\\+\\+)",
    "inputs": [
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\r\n+\t",
        "pump": [
          "\r\n\r\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\r\n\r\r\n\r\n\r\r\n\r\n\r\r\n\r\n\r\r\n\r\n\r\n\r\r\n\n\r\n\r\r\n\r\r\r\n",
        "pump": [
          "\r\n\r\r\n\r\n\r\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "#EXTM3U(\\s+\\S+?=\\S+)*",
    "inputs": [
      {
        "prefix": [
          "#EXTM3U"
        ],
        "suffix": "#\ta\t",
        "pump": [
          "\ta==a"
        ]
      },
      {
        "prefix": [
          "#EXTM3U"
        ],
        "suffix": "M3\ta#",
        "pump": [
          "\ta==a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\<|\\[|\\{)((?:\\w+|\\:|\\||\\.\\.\\.| (?:[0-9]+))+)(?:\\>|\\]|\\})",
    "inputs": [
      {
        "prefix": [
          "<|"
        ],
        "suffix": "",
        "pump": [
          "_0"
        ]
      },
      {
        "prefix": [
          "[a"
        ],
        "suffix": "{",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<"
        ],
        "suffix": "DPeiDPeiSShz5XoOcJ",
        "pump": [
          "DPei"
        ]
      },
      {
        "prefix": [
          "<|"
        ],
        "suffix": "",
        "pump": [
          "_0"
        ]
      },
      {
        "prefix": [
          "[a"
        ],
        "suffix": ".:a..",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "&<"
        ],
        "suffix": "dNP2dNP2zv2uCJhv9",
        "pump": [
          "dNP2"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": ".*?<H3>(<a.*a>)*[\\d\\.\\s]*(.*?)</H3>",
    "inputs": [
      {
        "prefix": [
          "<H3>"
        ],
        "suffix": "",
        "pump": [
          "<aa><aa>"
        ]
      },
      {
        "prefix": [
          "<H3>"
        ],
        "suffix": "<",
        "pump": [
          "<aa><aa>"
        ]
      },
      {
        "prefix": [
          "<H3><a"
        ],
        "suffix": "",
        "pump": [
          "a><aa><a"
        ]
      },
      {
        "prefix": [
          "<H3>"
        ],
        "suffix": "",
        "pump": [
          "<aa><aa>"
        ]
      },
      {
        "prefix": [
          "<H3>"
        ],
        "suffix": "3\t<",
        "pump": [
          "<aa><aa>"
        ]
      },
      {
        "prefix": [
          "<H3><a"
        ],
        "suffix": "",
        "pump": [
          "a><aa><a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*ZOPFLILIB_SRC\\s*=\\s*((?:.*(?:\\\\\\r?\\n))*.*)",
    "inputs": [
      {
        "prefix": [
          "ZOPFLILIB_SRC="
        ],
        "suffix": "a",
        "pump": [
          "a\\\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:W/)?\"((?:\\\\.|[^\"])*)\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "/\"\"/",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\a",
        "pump": [
          "\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)",
    "inputs": [
      {
        "prefix": [
          "ucbrowser\t0._0"
        ],
        "suffix": "\t",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "ucbrowser/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      },
      {
        "prefix": [
          "ucbrowser\t0._0"
        ],
        "suffix": "r",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "ucbrowser/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\{(?:([^{}]+):)*([a-zA-Z][a-zA-Z0-9_]*)\\}",
    "inputs": [
      {
        "prefix": [
          "{"
        ],
        "suffix": "",
        "pump": [
          "|:::"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "{$:{",
        "pump": [
          "a:a:"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "",
        "pump": [
          "|:::"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "a}{$",
        "pump": [
          "a:a:"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.*?)(\\[.*\\])+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "[",
        "pump": [
          "[][]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "inet6\\s+((?:\\S{0,4}:)+\\S{1,4}).+?prefixlen\\s+(\\d+)",
    "inputs": [
      {
        "prefix": [
          "inet6 :"
        ],
        "suffix": "",
        "pump": [
          ":::::::"
        ]
      },
      {
        "prefix": [
          "inet6\t"
        ],
        "suffix": "p",
        "pump": [
          "a:::"
        ]
      },
      {
        "prefix": [
          "iinet6\t:.::.::.:6"
        ],
        "suffix": "::::::::.+?prefixl:.+?",
        "pump": [
          "::::"
        ]
      },
      {
        "prefix": [
          "inet6 :"
        ],
        "suffix": "",
        "pump": [
          ":::::::"
        ]
      },
      {
        "prefix": [
          "inet6\t"
        ],
        "suffix": "lenin",
        "pump": [
          "a:::"
        ]
      },
      {
        "prefix": [
          "inet6\r"
        ],
        "suffix": ":::::::::::titererefiiEctPBNkwS25g7nXYya66NYpPntEenine?.+?prLdXHIOwfQCBeprefle",
        "pump": [
          "::::"
        ]
      },
      {
        "prefix": [
          "inet6 :"
        ],
        "suffix": "",
        "pump": [
          "::"
        ]
      },
      {
        "prefix": [
          "inet6\t"
        ],
        "suffix": "\t",
        "pump": [
          "a:"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "time=(([0-9]|:|.)+) bitrate",
    "inputs": [
      {
        "prefix": [
          "time=;"
        ],
        "suffix": "",
        "pump": [
          ":"
        ]
      },
      {
        "prefix": [
          "time="
        ],
        "suffix": "tr",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "time=\u0000:"
        ],
        "suffix": "",
        "pump": [
          "::"
        ]
      },
      {
        "prefix": [
          "time= time=tr"
        ],
        "suffix": "::;:::;:~@~{}?\b<\b;~?:;~{:<:>:|=:=??>|{|>=~?<~??|~:\b|:\b\b",
        "pump": [
          "::;:"
        ]
      },
      {
        "prefix": [
          "time=u"
        ],
        "suffix": "",
        "pump": [
          ":"
        ]
      },
      {
        "prefix": [
          "time="
        ],
        "suffix": "trt",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "time=\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          ":\u0000"
        ]
      },
      {
        "prefix": [
          "time= biMXtFmVA6lZP"
        ],
        "suffix": "3k0t833k0t83luVvkARJULBjUYRwE8K8C16DZ678",
        "pump": [
          "3k0t83"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\r?\\n|\\r)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\r\n\r\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\na",
        "pump": [
          "\r\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\S+)\\s*=\\s*[{\"(]((.|\\n)*)[}\")]$",
    "inputs": [
      {
        "prefix": [
          "!={"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "=a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:\\S+\\.)+\\S+$",
    "inputs": [
      {
        "prefix": [
          "!."
        ],
        "suffix": "\\x09",
        "pump": [
          "/..."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t",
        "pump": [
          "a."
        ]
      },
      {
        "prefix": [
          "S\u0000SS"
        ],
        "suffix": "",
        "pump": [
          "SSS"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(a+|b)*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "\u0000",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\u0000",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "[\\\"'](?:[^\\\"'\\\\]*(?:\\\\.)?)*[\\\"']",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\!"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\"\"\"",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "4Hl:4Hl:g94&N~{t6",
        "pump": [
          "4Hl:"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\!"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "Ic\t0Ic\t0\nTON\rXkG}",
        "pump": [
          "Ic\t0"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:'[^']*'|[^\\|])+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "|'|",
        "pump": [
          "''''"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": "|",
        "pump": [
          "''\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "|",
        "pump": [
          "''''"
        ]
      },
      {
        "prefix": [
          "\u0000''"
        ],
        "suffix": "|",
        "pump": [
          "''''"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^---[ \\t]+?(?:[ \\t]*((?:\\w+:\\S*[ \\t]*)*))?(?:[ \\t]+-+[ \\t]*)?$",
    "inputs": [
      {
        "prefix": [
          "---\\x09"
        ],
        "suffix": "\\x0a",
        "pump": [
          "a:0:"
        ]
      },
      {
        "prefix": [
          "---\t"
        ],
        "suffix": "-\t:",
        "pump": [
          "a: "
        ]
      },
      {
        "prefix": [
          "--- "
        ],
        "suffix": "a:VdrIkGlEa:VdrIkGlEyrLoWKbeTiTmiKDplwQYMuEtTZNuSltXuqMUpIGkRvNIqLYvhxyr:VdrIkGlEyrLoWKbeTiTmiKDplw N",
        "pump": [
          "a:VdrIkGlE"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\"((?:\\\\.|[^\"])*)\"\\s*",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\",
        "pump": [
          "\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\d)+|((\\d)+\\.(\\d)+)((,)(\\d)+|((\\d)+\\.(\\d)+))*",
    "inputs": [
      {
        "prefix": [
          "0.0"
        ],
        "suffix": "0..",
        "pump": [
          ",000.0"
        ]
      },
      {
        "prefix": [
          "d\u0000dd\u0000dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "dddd"
        ]
      },
      {
        "prefix": [
          "0.0"
        ],
        "suffix": ",",
        "pump": [
          ",000.0"
        ]
      },
      {
        "prefix": [
          "d\u0000ddd"
        ],
        "suffix": "",
        "pump": [
          "dddd"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<!--\\s*error code:\\s+((?:\\w+\\s?)+)\\s+-->",
    "inputs": [
      {
        "prefix": [
          "<!--error code: 0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "<!--error code:\ta"
        ],
        "suffix": "e:\t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<!--error code:sww"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "<!--error code:\t"
        ],
        "suffix": "erroerrorodeerror ",
        "pump": [
          "erro"
        ]
      },
      {
        "prefix": [
          "<!--error code: 0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "<!--error code:\ta"
        ],
        "suffix": "d",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<!--error code:swww"
        ],
        "suffix": "",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "e<!--error code:\t"
        ],
        "suffix": "errzerrzTakvSbuor ",
        "pump": [
          "errz"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*\\|?(\\s*:?-[\\-\\s]*:?\\s*\\|?)*\\s*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\\x00",
        "pump": [
          "-\\x09-"
        ]
      },
      {
        "prefix": [
          "|"
        ],
        "suffix": "-||",
        "pump": [
          "\t:-\t"
        ]
      },
      {
        "prefix": [
          "---:"
        ],
        "suffix": "-------------|:",
        "pump": [
          "----"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\*|(\\d+[,-]?)*\\d+)$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "0,,",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "273427347478292102\t",
        "pump": [
          "2734"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:[^ \"]+|\"[^\"]*\")+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " \" ",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": " ",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([+-]?[0-9]+[,\\.]?)+",
    "inputs": [
      {
        "prefix": [
          "+0"
        ],
        "suffix": ",++",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "000"
        ],
        "suffix": "\u0000",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "+0"
        ],
        "suffix": "+",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "000"
        ],
        "suffix": "\u0000",
        "pump": [
          "00"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(a+|b)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "\u0000",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "aa"
        ],
        "suffix": "\u0000",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([a-z0-9]+_?)+$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "__",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "00a"
        ],
        "suffix": "\u0000",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "zsbizsbivzsbivbdqn)",
        "pump": [
          "zsbi"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\r*\\n|\\r)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\r\n\r"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\na",
        "pump": [
          "\r\n\r"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(https?:\\/\\/)((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$",
    "inputs": [
      {
        "prefix": [
          "https://0"
        ],
        "suffix": "",
        "pump": [
          "0a0"
        ]
      },
      {
        "prefix": [
          "https://"
        ],
        "suffix": "ps://0",
        "pump": [
          "aaa"
        ]
      },
      {
        "prefix": [
          "http://"
        ],
        "suffix": "2ceo2ceogmkdcn.",
        "pump": [
          "2ceo"
        ]
      },
      {
        "prefix": [
          "https://0"
        ],
        "suffix": "",
        "pump": [
          "0a0"
        ]
      },
      {
        "prefix": [
          "https://"
        ],
        "suffix": "ps://0.0.0",
        "pump": [
          "aaa"
        ]
      },
      {
        "prefix": [
          "http://"
        ],
        "suffix": "httphttphttps?htt?",
        "pump": [
          "http"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "f\\s+((([\\d]{1,}\\/[\\d]{1,}[\\s]?){3,})+)",
    "inputs": [
      {
        "prefix": [
          "f\t"
        ],
        "suffix": "0/",
        "pump": [
          "0/000/00/0"
        ]
      },
      {
        "prefix": [
          "fsd/dd/dd/dd/dd/dd/dd/d"
        ],
        "suffix": "\u0000",
        "pump": [
          "dd/d"
        ]
      },
      {
        "prefix": [
          "f\t"
        ],
        "suffix": "0/",
        "pump": [
          "0/000/00/0"
        ]
      },
      {
        "prefix": [
          "fsd/dd/dd/dd/dd/dd/ds"
        ],
        "suffix": "\u0000",
        "pump": [
          "d/dd/dd/dd/dd/dd/ds"
        ]
      },
      {
        "prefix": [
          "f\t0/0"
        ],
        "suffix": "\tf",
        "pump": [
          "0/00"
        ]
      },
      {
        "prefix": [
          "fsd/dd/dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "dd/dd"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\w|\\d|_|-)*=$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "_=a",
        "pump": [
          "a_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "_________________",
        "pump": [
          "____"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "a(?:.|\\n)+a",
    "inputs": [
      {
        "prefix": [
          "a!"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\n",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "ab"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\n",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<style type=\"text\\/css\" id=\"branch-css\">((.|\\s)*?)<\\/style>",
    "inputs": [
      {
        "prefix": [
          "<style type=\"text/css\" id=\"branch-css\">"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "<style type=\"text/css\" id=\"branch-css\">"
        ],
        "suffix": "-css\"",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "<style type=\"text/css\" id=\"branch-css\">s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "<style type=\"text/css\" id=\"branch-css\">x"
        ],
        "suffix": " \t\r\t\r\t \t\r\t\r\t\t\t\b\t\n\t\n\t\n\r\t\r\n\r\b\t\r",
        "pump": [
          " \t\r\t\r\t"
        ]
      },
      {
        "prefix": [
          "<style type=\"text/css\" id=\"branch-css\">"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "<style type=\"text/css\" id=\"branch-css\">"
        ],
        "suffix": "n",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "<style type=\"text/css\" id=\"branch-css\">s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "<<style type=\"text/css\" id=\"branch-css\">\t\r \t\r  \r"
        ],
        "suffix": "\t \t \t \t \r\t \t\n",
        "pump": [
          "\t \t "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([^\\\\{}\\s]+|\\\\[\\\\{}])+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\{{",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": "s",
        "pump": [
          "t\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\/\\/.*\\r?\\n)*['\"]use strict['\"];?",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "//\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "s",
        "pump": [
          "//\r\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "//\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "us",
        "pump": [
          "//\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(pagespeed(?:.|\\s)+)url:[^,]+",
    "inputs": [
      {
        "prefix": [
          "pagespeed!"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "pagespeed"
        ],
        "suffix": "pa,ur",
        "pump": [
          "a\t"
        ]
      },
      {
        "prefix": [
          "pagespeed\u0000s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "pagespee"
        ],
        "suffix": "d  \td  \t \r\t\n \r \n \t\n\t\t\t ",
        "pump": [
          "d  \t"
        ]
      },
      {
        "prefix": [
          "pagespeedq"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "pagespeed"
        ],
        "suffix": "l,upages",
        "pump": [
          "a\t"
        ]
      },
      {
        "prefix": [
          "pagespeed\u0000s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "url:pagespeed^:|E\r\n\r\t\b\n\r\b\r\b\t\b\n\b"
        ],
        "suffix": "\t\t\r\b\n\n\t\r\b\t\t\t\r\b\n\n\t\r\b\t\n\t\rGIHNdb?=Ruv@3m5b{IQhu?x@Qw\t\n\t\rGIHNdb?=Ruv",
        "pump": [
          "\t\t\r\b\n\n\t\r\b\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([\\-A-Za-z0-9:_]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?",
    "inputs": [
      {
        "prefix": [
          "a ='"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "a\t\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "-='\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      },
      {
        "prefix": [
          "a ='"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "\ta'\\a>\\a\t",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "-='."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "\\\\\\-A-Za='\\)\\nn8k_\\xSCW\tl^M"
        ],
        "suffix": ")\\2c\\\\-A-k_\\)\\2c\\\\-A-k_\\xSCW\tl^M))W:.2`\\2c\\\\-A-Za--Za-z0-9",
        "pump": [
          ")\\2c\\\\-A-k_\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^trusty-|-extension(-[\\d\\.a-z]+|-[a-z\\d]+)*$",
    "inputs": [
      {
        "prefix": [
          "-extension"
        ],
        "suffix": "!",
        "pump": [
          "-0"
        ]
      },
      {
        "prefix": [
          "-extension"
        ],
        "suffix": "-e-",
        "pump": [
          "-a-a"
        ]
      },
      {
        "prefix": [
          "-extension-.."
        ],
        "suffix": "\u0000",
        "pump": [
          "d."
        ]
      },
      {
        "prefix": [
          "--extensio"
        ],
        "suffix": "n-e-v-x-n-e-v-x-b-on-ex-b-u747376829690967320825065362511728088-",
        "pump": [
          "n-e-v-x-"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "FFI::Type::Builtin:(\\w+)*",
    "inputs": [
      {
        "prefix": [
          "FFI::Type::Builtin:a"
        ],
        "suffix": "e::",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "FFI::Type::Builtin:w"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "FFI::Type::Builtin:a"
        ],
        "suffix": "FI:FF",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "FFI::Type::Builtin:w"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "V((\\d)+\\.?)+__.+\\.sql$",
    "inputs": [
      {
        "prefix": [
          "V0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "V0"
        ],
        "suffix": "s",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "Vddd"
        ],
        "suffix": "",
        "pump": [
          "ddd"
        ]
      },
      {
        "prefix": [
          "sV"
        ],
        "suffix": "33333333333333333.",
        "pump": [
          "3333"
        ]
      },
      {
        "prefix": [
          "V0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "V0"
        ],
        "suffix": "sa",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "Vdd"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          "V"
        ],
        "suffix": "096809689045622937",
        "pump": [
          "0968"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\n1 CHAN(\\n[2-9].*)*",
    "inputs": [
      {
        "prefix": [
          "\n1 CHAN"
        ],
        "suffix": "a",
        "pump": [
          "\n2\n2"
        ]
      },
      {
        "prefix": [
          "\n1 CHAN"
        ],
        "suffix": "a",
        "pump": [
          "\n2\n2"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*([a-z0-9]+)\\s*=\\s*([a-z0-9]+(\\s*,\\s*[a-z0-9]+)*)+\\s*$",
    "inputs": [
      {
        "prefix": [
          "a =0"
        ],
        "suffix": "\\x00",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a=a"
        ],
        "suffix": ",,",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0=0,00"
        ],
        "suffix": "\u0000",
        "pump": [
          "s,00"
        ]
      },
      {
        "prefix": [
          "a="
        ],
        "suffix": "ainvainvtkqiafskim,",
        "pump": [
          "ainv"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((IE=edge,.*|width=device-width.*|(https?:\\/\\/|\\/)[\\w@\\/\\.]+|@[\\-\\w]+@|\\{[^\\{\\}]+\\}|[^a-zA-Z]*|(&nbsp;)+)\\s*)+$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "A",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "IE=edge,"
        ],
        "suffix": "\twidth",
        "pump": [
          "\tIE=edge,,"
        ]
      },
      {
        "prefix": [
          "[\rIE=edge"
        ],
        "suffix": ",.*|,.*|width=device-width.*|\n$x",
        "pump": [
          ",.*|"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(([A-Z]\\w+(::)?)+)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a:a",
        "pump": [
          "AaAa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a:A",
        "pump": [
          "AaAa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.+\\.)*[xy]$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "z..."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ".a",
        "pump": [
          "a."
        ]
      },
      {
        "prefix": [
          "\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "..............+......",
        "pump": [
          "...."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:.*:\\d{1,6}){1,}$",
    "inputs": [
      {
        "prefix": [
          ":0"
        ],
        "suffix": ";",
        "pump": [
          ":0:0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "0:",
        "pump": [
          "a:0"
        ]
      },
      {
        "prefix": [
          ":d:d"
        ],
        "suffix": "\u0000",
        "pump": [
          ":d:d"
        ]
      },
      {
        "prefix": [
          ":5<{:1;:=.\\)d(.?}>@}439"
        ],
        "suffix": "56604:6:56604:6::6(\b|.~|:({)}{{^>:,:1;:5004930765425782894021:307654257828940211",
        "pump": [
          "56604:6:"
        ]
      },
      {
        "prefix": [
          ":0"
        ],
        "suffix": ";",
        "pump": [
          ":0:0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": ":",
        "pump": [
          "a:0"
        ]
      },
      {
        "prefix": [
          ":d:dd"
        ],
        "suffix": "\u0000",
        "pump": [
          ":d:dd"
        ]
      },
      {
        "prefix": [
          ":5335"
        ],
        "suffix": "60:537F:60:537F:55794211793286:075urJp|>LAh;f7Fw",
        "pump": [
          "60:537F:"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*(<.+>.*<\\/.+>)+|(<.+\\/\\s*>)+\\s*$",
    "inputs": [
      {
        "prefix": [
          "<!>/>"
        ],
        "suffix": "?",
        "pump": [
          "<?/><?/>"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "<",
        "pump": [
          "<a/><a/>"
        ]
      },
      {
        "prefix": [
          "<\u0000></\u0000><\u0000>"
        ],
        "suffix": "",
        "pump": [
          "</</\u0000><\u0000>"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\*?[-#\\/\\*\\\\\\w]+(?:\\[[0-9a-z_-]+\\])?)\\s*:\\s*((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)",
    "inputs": [
      {
        "prefix": [
          "*a:"
        ],
        "suffix": "\t;)\\;\\",
        "pump": [
          "''''"
        ]
      },
      {
        "prefix": [
          "*a:"
        ],
        "suffix": "\t;\\*[a0",
        "pump": [
          "''''"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\{\\{\\{((?:.|\\n)*?)\\}\\}\\}",
    "inputs": [
      {
        "prefix": [
          "{{{"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "{{{"
        ],
        "suffix": "{a",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "{{{"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "{{{"
        ],
        "suffix": "{a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(:?0x(?:(?:\\d|[abcdefABCDEF]){0,2})+) +in +(:?0x(?:(?:\\d|[abcdefABCDEF]){0,2})+)",
    "inputs": [
      {
        "prefix": [
          ":0x"
        ],
        "suffix": "",
        "pump": [
          "A"
        ]
      },
      {
        "prefix": [
          ":0x"
        ],
        "suffix": "inn",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "0x in 0xF"
        ],
        "suffix": "\u0000",
        "pump": [
          "cF"
        ]
      },
      {
        "prefix": [
          "0x"
        ],
        "suffix": "0abc0abcdefA00abcdefA",
        "pump": [
          "0abc"
        ]
      },
      {
        "prefix": [
          ":0x"
        ],
        "suffix": "",
        "pump": [
          "A"
        ]
      },
      {
        "prefix": [
          ":0x"
        ],
        "suffix": "in0",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "0x in 0xAD"
        ],
        "suffix": "\u0000",
        "pump": [
          "dD"
        ]
      },
      {
        "prefix": [
          "0x"
        ],
        "suffix": "606860681477006654716",
        "pump": [
          "6068"
        ]
      },
      {
        "prefix": [
          ":0x"
        ],
        "suffix": "",
        "pump": [
          "A"
        ]
      },
      {
        "prefix": [
          ":0x"
        ],
        "suffix": "inn",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "0xE"
        ],
        "suffix": "",
        "pump": [
          "dE"
        ]
      },
      {
        "prefix": [
          "0x"
        ],
        "suffix": "abcdabcdefABCDEFb",
        "pump": [
          "abcd"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.+\\/)*(([^/]+)\\.[^/.]*|[^/.]+)$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "////"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "/",
        "pump": [
          "a/"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "/\u0000/\u0000"
        ]
      },
      {
        "prefix": [
          ".^//[](.+/(2)/(*+(6$+.8.*\\/\\^"
        ],
        "suffix": "//[](.+/(/(*+(6$+.8.*\\/\\^9^]9+^].5(/",
        "pump": [
          "//[](.+/(/"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<!-- @@((?:\\n?.)*?)-->",
    "inputs": [
      {
        "prefix": [
          "<!-- @@"
        ],
        "suffix": "",
        "pump": [
          "\\x0a."
        ]
      },
      {
        "prefix": [
          "<!-- @@"
        ],
        "suffix": "->-",
        "pump": [
          "\na"
        ]
      },
      {
        "prefix": [
          "<!-- @@"
        ],
        "suffix": "",
        "pump": [
          "\\x0a."
        ]
      },
      {
        "prefix": [
          "<!-- @@"
        ],
        "suffix": "@<",
        "pump": [
          "\na"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "if-[^=\\s>/]*(=[\"'{}][^\"']*[\"'{}])*",
    "inputs": [
      {
        "prefix": [
          "if-"
        ],
        "suffix": "i{\t{\"\t",
        "pump": [
          "=\"{={\""
        ]
      },
      {
        "prefix": [
          "if-=\""
        ],
        "suffix": "",
        "pump": [
          "\"\"=\""
        ]
      },
      {
        "prefix": [
          "if-"
        ],
        "suffix": "i{\ti",
        "pump": [
          "=\"{={\""
        ]
      },
      {
        "prefix": [
          "if-=\""
        ],
        "suffix": "",
        "pump": [
          "\"=\"\"=\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/\\*%(nodes_(?:global|main))%\\*\\/(?:.|[\\s\\S])*?\\/\\*%nodes_(?:global|main)_end%\\*\\/",
    "inputs": [
      {
        "prefix": [
          "/*%nodes_global%*/"
        ],
        "suffix": "",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "/*%nodes_main%*/"
        ],
        "suffix": "%*/*%no",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "%nodes_main/s"
        ],
        "suffix": "",
        "pump": [
          "Ss"
        ]
      },
      {
        "prefix": [
          "/*%nodes_global%*/"
        ],
        "suffix": "",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "/*%nodes_main%*/"
        ],
        "suffix": "o",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "%nodes_main/s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "/*%nodes_mai"
        ],
        "suffix": "n%*/n%*/?:global|main",
        "pump": [
          "n%*/"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\s*\\/\\/.*\\n)* *var sourceURL[^;]+;|\\+ *sourceURL",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x0a\\x0a//\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " v",
        "pump": [
          "\t//\n\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x0a\\x0a//\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " s;\n/var",
        "pump": [
          "\t//\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^url\\((\"([^\\\\\"]|\\.)*\")\\)",
    "inputs": [
      {
        "prefix": [
          "url(\""
        ],
        "suffix": "",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "url(\""
        ],
        "suffix": "ur\"",
        "pump": [
          "."
        ]
      },
      {
        "prefix": [
          "url\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "#\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<html>(.|\\r|\\n)*<title class=\"klass\"><\\/title>(.|\\r|\\n)*<\\/html>",
    "inputs": [
      {
        "prefix": [
          "<html>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<html>"
        ],
        "suffix": "klass",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<html>"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<html>"
        ],
        "suffix": "e class",
        "pump": [
          "\r"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:[^.\"]+|\"[^\"]*\")+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\".\".",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\".",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.*[-_:+ ])*(lon|lng)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "  "
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "ln",
        "pump": [
          "a "
        ]
      },
      {
        "prefix": [
          ":"
        ],
        "suffix": "",
        "pump": [
          "::"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "  -_  -_:+ J^-Q}K2q>j:.`2S|a}6)N fPVe)58+(^vPR",
        "pump": [
          "  -_"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:[ \\t]*[\\r\\n]+[ \\t]*)+",
    "inputs": [
      {
        "prefix": [
          "\n"
        ],
        "suffix": "#",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "\n"
        ],
        "suffix": "\na",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:(.+[^\\\\])\\/(.*[^\\\\])*\\/){1,}",
    "inputs": [
      {
        "prefix": [
          "!]/"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\\a",
        "pump": [
          "aa//"
        ]
      },
      {
        "prefix": [
          ",j+jJ=C4p,k?/"
        ],
        "suffix": "#mcj#mcjHetKC@",
        "pump": [
          "#mcj"
        ]
      },
      {
        "prefix": [
          "!]/"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\\a",
        "pump": [
          "aa//"
        ]
      },
      {
        "prefix": [
          "Jb1D[/"
        ],
        "suffix": "Gn$0Gn$0G;mhlg+N",
        "pump": [
          "Gn$0"
        ]
      },
      {
        "prefix": [
          "!]/"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\\",
        "pump": [
          "aa//"
        ]
      },
      {
        "prefix": [
          "yq'T]G\\@NjL\\\\tCv7,GzSAt;7[uzM1j4ge/"
        ],
        "suffix": "9wL 9wL 8l\n ]",
        "pump": [
          "9wL "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*(#.*)*\\s*$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "##"
        ]
      },
      {
        "prefix": [
          "#\u0000"
        ],
        "suffix": "\u0000",
        "pump": [
          "#\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\s*\\n)+$",
    "inputs": [
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t",
        "pump": [
          "\t\n"
        ]
      },
      {
        "prefix": [
          "\r \r\t\n\t\r \t  \t\t \r"
        ],
        "suffix": "\n\n\n\n\n\n\n\n\n\n\t\n \n\r\t",
        "pump": [
          "\n\n\n\n"
        ]
      },
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\t",
        "pump": [
          "\t\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n\n\t\n\n\n\n\n\t\n\n\n\r\n\t\n\t\n\n\n\r\n\t\r\r\r\r\r\r\r\r\r\t\r\r",
        "pump": [
          "\n\n\t\n\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([a-zA-Z0-9]*[-_]?[\\w.]+)*@([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)+[\\\\.][A-Za-z]{2,3}([\\\\.][A-Za-z]{2})?$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "_."
        ]
      },
      {
        "prefix": [
          "-a"
        ],
        "suffix": "a@a-",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "w0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "gwxEgwxExr_Et4",
        "pump": [
          "gwxE"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "_."
        ]
      },
      {
        "prefix": [
          "-a"
        ],
        "suffix": "a@a-",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "."
        ],
        "suffix": "",
        "pump": [
          "w."
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "3d1E3d1ER927as",
        "pump": [
          "3d1E"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([a-zA-Z0-9_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?",
    "inputs": [
      {
        "prefix": [
          "a ='"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "a\"\\\t",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "0='\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      },
      {
        "prefix": [
          "a ='"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "=\\a\"\\a>",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "0='\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      },
      {
        "prefix": [
          "F=\"F"
        ],
        "suffix": "\\\\\n\\z:\\\\\\\\\n\\z:\\\\:|\\?s|)[.A[A0(*]B(\\\\:|\\?s|)[.A\r\t\t\n\n\n\b\t\b\t\r|\\?s|)[.A\r\t\t\n\n\n\b\t\b\t\r\b\n\n\n\n\t\n\n",
        "pump": [
          "\\\\\n\\z:\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\$\\{(([A-Za-z_\\-]+\\.?)+)\\}",
    "inputs": [
      {
        "prefix": [
          "${-"
        ],
        "suffix": "",
        "pump": [
          "--"
        ]
      },
      {
        "prefix": [
          "${a"
        ],
        "suffix": "$",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "${"
        ],
        "suffix": "A-ZaA-Za-z-Z_A-Za-",
        "pump": [
          "A-Za"
        ]
      },
      {
        "prefix": [
          "${-"
        ],
        "suffix": "",
        "pump": [
          "--"
        ]
      },
      {
        "prefix": [
          "${a"
        ],
        "suffix": "a${",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "${"
        ],
        "suffix": "A-ZaA-Za-z-A-Za-z_",
        "pump": [
          "A-Za"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\"(?::.|[^\"])*\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          ":;"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\"\":",
        "pump": [
          ":a"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          ":;"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "a",
        "pump": [
          ":a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "/(\\\\[\\\\/]|[^/])*/[egimosx]*",
    "inputs": [
      {
        "prefix": [
          "/"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "/\\",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "\\\\\\\r\\\\\\\\\\\\\\\r\\\\\\\\e\r\t4282\\\\\\\n\t\n\n\n\r\r\n\r'#|}\t:!${~`;~~\\\\e\r\t428\t4282\\\\\\\n\t\n\n\n\r\r\n\r\n\n\r371397335977100{Lax+lS\\",
        "pump": [
          "\\\\\\\r\\\\\\\\"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "/\\a",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\n4126002F\r\t\r\\\\\\\\]s#ooW\\\\\n\\\\\\\n4",
        "pump": [
          "\\\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\[error\\].+?\\n)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "r",
        "pump": [
          "[error]a\n[error]a\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "err",
        "pump": [
          "[error]a\n[error]a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*(type|url|debug)(\\s+(.+)\\s*)*$",
    "inputs": [
      {
        "prefix": [
          "url"
        ],
        "suffix": "a",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          "urlss"
        ],
        "suffix": "",
        "pump": [
          "sss"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^=begin(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?=end",
    "inputs": [
      {
        "prefix": [
          "=begin\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0d\\x0a"
        ]
      },
      {
        "prefix": [
          "=begin\r"
        ],
        "suffix": "ia",
        "pump": [
          "\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/(\\\\\\n)?\\/(\\n|(.|\\n)*?[^\\\\]\\n)",
    "inputs": [
      {
        "prefix": [
          "//"
        ],
        "suffix": "",
        "pump": [
          "\\\\x0a"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "\\",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "",
        "pump": [
          "\\\\x0a"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "a",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "-+(?: *\\n*)*rediscover the web(?:\\n|.)*$",
    "inputs": [
      {
        "prefix": [
          "-"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "-"
        ],
        "suffix": " rediscov",
        "pump": [
          "  "
        ]
      },
      {
        "prefix": [
          "-"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "-"
        ],
        "suffix": " rediscover",
        "pump": [
          "  "
        ]
      },
      {
        "prefix": [
          "r-------"
        ],
        "suffix": "        \n  \n    ",
        "pump": [
          "    "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\/(?:\\\\.|[^\\/])+\\/[ion]?)",
    "inputs": [
      {
        "prefix": [
          "/]"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "\\",
        "pump": [
          "\\a\\a"
        ]
      },
      {
        "prefix": [
          "/\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      },
      {
        "prefix": [
          "/]"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "\\///",
        "pump": [
          "\\a\\a"
        ]
      },
      {
        "prefix": [
          "/\u0000."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.*)(>.*)*#",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          ">>"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "#a",
        "pump": [
          ">>"
        ]
      },
      {
        "prefix": [
          ">\u0000"
        ],
        "suffix": "",
        "pump": [
          ">\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          ">>"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "#a",
        "pump": [
          ">>"
        ]
      },
      {
        "prefix": [
          ">\u0000"
        ],
        "suffix": "",
        "pump": [
          ">\u0000"
        ]
      },
      {
        "prefix": [
          "r>oAMz|W>:<:|::\b:\b\b\b~~=|{\b\b;?\b}{<=>~~<;"
        ],
        "suffix": "=>?>\b>{>=>?>\b>{>=>{",
        "pump": [
          "=>?>\b>{>"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "* If the array was previously allocated, then call for a\n\t\t\t * reallocation. *",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "ay",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " rea reallocation ",
        "pump": [
          " rea"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*(?:(\\((<.+>)\\))*)\\s*$",
    "inputs": [
      {
        "prefix": [
          "-!:\\x00"
        ],
        "suffix": "?",
        "pump": [
          "(<)>)(<>>)"
        ]
      },
      {
        "prefix": [
          "a:a"
        ],
        "suffix": "=-)(=",
        "pump": [
          "(<a>)(<a>)"
        ]
      },
      {
        "prefix": [
          "\u0000:\u0000<\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "><\u0000\u0000"
        ]
      },
      {
        "prefix": [
          "-!:>"
        ],
        "suffix": "?",
        "pump": [
          "(<)>)(<>>)"
        ]
      },
      {
        "prefix": [
          "a:a"
        ],
        "suffix": "<:):(=",
        "pump": [
          "(<a>)(<a>)"
        ]
      },
      {
        "prefix": [
          "\u0000:\u0000<\u0000"
        ],
        "suffix": "",
        "pump": [
          "><\u0000><\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^'(\\\\.|[^'])*'$",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\'''",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "'."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.|[\\r\\n])*?-->",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "->-",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "-a",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Name Servers: \\n((.+\\n)+)\\n",
    "inputs": [
      {
        "prefix": [
          "Name Servers: \\x0a!\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          "Name Servers: \n"
        ],
        "suffix": "s",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "Name Servers: \\x0aN\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          "Name Servers: \n"
        ],
        "suffix": " ",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.+-)+.+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "a-"
        ]
      },
      {
        "prefix": [
          "\u0000-\u0000"
        ],
        "suffix": "",
        "pump": [
          "-\u0000-\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a-",
        "pump": [
          "a-"
        ]
      },
      {
        "prefix": [
          "\u0000-\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "-\u0000\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "{[\\+#\\./;\\?&]?([^}]+)*}",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "(@(.+))*\\s+(.+)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "@!@A"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "@a@a"
        ]
      },
      {
        "prefix": [
          "@\u0000"
        ],
        "suffix": "",
        "pump": [
          "@\u0000@\u0000"
        ]
      },
      {
        "prefix": [
          "@.|~}@\b.@.+=\b==~~<:;|=~>><\b\b=\b@{::>>|>\b\b"
        ],
        "suffix": ";@?=@:@:|\b|<~@;@?=@:@:|\b|<~@\b=@{?:|{;><:<?|>|\b;=",
        "pump": [
          ";@?=@:@:|\b|<~@"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "@!@A"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "@a@a"
        ]
      },
      {
        "prefix": [
          "@\u0000"
        ],
        "suffix": "",
        "pump": [
          "@\u0000@\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "@@@@^@@@@@^@@VDI\b@^@@vg@^@@^@I\btj",
        "pump": [
          "@@@@^@"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([\\$@%](\\w+|::)+)",
    "inputs": [
      {
        "prefix": [
          "$a"
        ],
        "suffix": ":$",
        "pump": [
          "aa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[a-z]([a-z0-9]*[-_]?[a-z0-9]+)*@([a-z0-9]*[-_]?[a-z0-9]+)+[\\.][a-z]{2,3}([\\.][a-z]{2})?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          "a-a"
        ],
        "suffix": "a@a-",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "ucrcucrcr55rcrc",
        "pump": [
          "ucrc"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "",
        "pump": [
          "0a"
        ]
      },
      {
        "prefix": [
          "a-a"
        ],
        "suffix": "a0",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a0a"
        ],
        "suffix": "",
        "pump": [
          "00a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "z0z0z0z0z0z0z0z",
        "pump": [
          "z0z0"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<label(\\r|\\t|\\n|.)*?<\\/label>",
    "inputs": [
      {
        "prefix": [
          "<label"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<label"
        ],
        "suffix": "e",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<label\n\t \t\n"
        ],
        "suffix": "\t\r\t\r\t\t\t\r\t\r\t\t\t\r\r\t    \t \r\r\t\n\n\r\t",
        "pump": [
          "\t\r\t\r\t\t"
        ]
      },
      {
        "prefix": [
          "<label"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<label"
        ],
        "suffix": "a",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<label<label\t\n\t\t\n"
        ],
        "suffix": "\t\t\t\t\t\t\t\t\t\t\t \n\r",
        "pump": [
          "\t\t\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:(?:\\s*\\/\\/.*)*\\s*lodash\\._[^=]+=.+\\n)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x09//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "=lod",
        "pump": [
          "\t//\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " //\\x09//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\t/////"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "//////////////   \t\n\n ",
        "pump": [
          "////"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((http[s]?:\\/\\/)([a-zA-Z0-9_.]+))?:?([0-9]+)?([\\/]?[~]?(\\.?[^.]+[~]?)*)",
    "inputs": [
      {
        "prefix": [
          ":/~.a"
        ],
        "suffix": "tps:..",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": ".",
        "pump": [
          "/\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(<!--.+-->)*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "<",
        "pump": [
          "<!--a--><!--a-->"
        ]
      },
      {
        "prefix": [
          "<!--\u0000"
        ],
        "suffix": "",
        "pump": [
          "--><!--\u0000--><!--\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "<!--a--><!--a-->"
        ]
      },
      {
        "prefix": [
          "<!--\u0000"
        ],
        "suffix": "",
        "pump": [
          "--><!--\u0000--><!--\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\"(\\\\.|[^\"])*\")",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\"\"\"",
        "pump": [
          "\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.*)<(([a-zA-Z0-9])+([a-zA-Z0-9_\\.-])*@([a-zA-Z0-9_-])+([a-zA-Z0-9\\._-]+))+>",
    "inputs": [
      {
        "prefix": [
          "<0-@0A"
        ],
        "suffix": "",
        "pump": [
          "A0@-."
        ]
      },
      {
        "prefix": [
          "<"
        ],
        "suffix": "$<a-",
        "pump": [
          "aa@aa"
        ]
      },
      {
        "prefix": [
          "<0@--0@--0"
        ],
        "suffix": "",
        "pump": [
          "00@--0"
        ]
      },
      {
        "prefix": [
          "<0-@0A"
        ],
        "suffix": "",
        "pump": [
          "A0@-."
        ]
      },
      {
        "prefix": [
          "<"
        ],
        "suffix": "$",
        "pump": [
          "aa@aa"
        ]
      },
      {
        "prefix": [
          "<0@--0@-_"
        ],
        "suffix": "",
        "pump": [
          "00@-_"
        ]
      },
      {
        "prefix": [
          "Rv<pb@<"
        ],
        "suffix": "pb@tzdgpbzpb@tzdgpbzd<#gpb<pb@tzpbzd<#gp<pb@tzpb<pb@pb@tv<pb@tzd<@<pb@tzzd<p<pbzdpb@pb@tv<pb@tzd",
        "pump": [
          "pb@tzdgpbz"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\s*against\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ai",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\"(?:[^\"\\\\]|\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4}))*\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^/]*/)?([^/]*)\\.(sock|spec|json)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ck.jso",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<inputbox>.*?<\\/inputbox>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "<inputbox>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ",,,,,,,,,,(.+?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ",,,,,,,,,,a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\(([^)]+)\\) ?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<\\?php echo erLhcoreClassDesign::designCSS\\((.*?)\\)(.*?)\\?\\>",
    "inputs": [
      {
        "prefix": [
          "<?php echo erLhcoreClassDesign::designCSS(a"
        ],
        "suffix": " ",
        "pump": [
          ")"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "des",
        "pump": [
          "<?php echo erLhcoreClassDesign::designCSS(",
          ")"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^;]*)[;]\\r?\\n?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\/.*)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\?sanityRole=.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "?sanityRole="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(put|post|get|delete)_(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "get_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "WHERE\\s+(.*)",
    "inputs": [
      {
        "prefix": [
          "WHERE\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "aWHERE\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "q to stop.*q to stop",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "toa",
        "pump": [
          "q to stop"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\-{0,1}[0-9]+\\.{0,1}[0-9]*)\\-(\\-{0,1}[0-9]+\\.{0,1}[0-9]*)|(>|<|=|@)(\\-{0,1}[0-9]+\\.{0,1}[0-9]*)",
    "inputs": [
      {
        "prefix": [
          "0",
          "0-0"
        ],
        "suffix": "-0.>",
        "pump": [
          "0",
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0",
          "0-0"
        ],
        "suffix": ">--0-",
        "pump": [
          "0",
          "0",
          "0"
        ]
      },
      {
        "prefix": [
          "-0",
          "0--0"
        ],
        "suffix": "-0.>",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+)\\W+(asc|desc|ascending|descending)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ascen",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<(?:[^\\n\\r\\t >{][^\\n\\r\\t >{/]*)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</\t",
        "pump": [
          "<a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "=head1 \\Q$module\\E\\n\\n(.*?) \\(",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "mo",
        "pump": [
          "=head1 $module\n\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^=;&]+)=([^;&]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=&",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*\\{.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Z.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Z"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*=~~?\\s*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=\t",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([\\-\\_]?)([0-9]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[0-9]+[kMGTP]?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "G0a",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\w_*.*\\.pl",
    "inputs": [
      {
        "prefix": [
          "a_"
        ],
        "suffix": "l_",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "_"
        ],
        "suffix": "p",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^sending\\s+request\\s+to\\s+(.+)...$",
    "inputs": [
      {
        "prefix": [
          "sending\trequest\tto\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*Version\\s*=\\s*.*",
    "inputs": [
      {
        "prefix": [
          "\tVersion\t=\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^\\.]+)\\.",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a..",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(iPhone).*Version/(\\d+)\\.(\\d+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "sion",
        "pump": [
          "iPhone"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*blob.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "blob"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "blob"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+?)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+\\%)\\s+(.+)$",
    "inputs": [
      {
        "prefix": [
          "a",
          "\t0\t0\t0\t0%\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*i=(\\d+).*$",
    "inputs": [
      {
        "prefix": [
          "ai=0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "ai=0"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Status: (\\d+) .*?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Status: 0 "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\@\\{date\\:([^\\}]*)\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "d@",
        "pump": [
          "@{date:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<br\\s?\\/><br\\s?\\/>\\*\\*\\*.+\\*\\*\\*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/>",
        "pump": [
          "<br\t/><br\t/>***a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[?&]([^&=]+)(?:[&=])([^&=]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a&",
        "pump": [
          "&a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "=.*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\.usage\\(\\) description must start with \\$0.*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ".usage() description must start with $0"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          ".usage() description must start with $0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*is not allowed.*such error",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e",
        "pump": [
          "is not allowed"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ro",
        "pump": [
          "a",
          "is not allowed"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": " (\\d\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0 \t ",
        "pump": [
          " 0a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*.*?\\*\\/[ \\n]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/*"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "payload:(.*)}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ad",
        "pump": [
          "payload:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "GLSL_OUT [^;]*;",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "OG;aGLSL_OU",
        "pump": [
          "GLSL_OUT "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:[^,\"]|\"(?:[^\\\\\"]|\\\\.)*\")+",
    "inputs": [
      {
        "prefix": [
          "\u0000\""
        ],
        "suffix": ",",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": ",",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "\u0000\"\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "((?:\\d+\\.){3}\\d+)\\:\\d+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^HTTP error:\\s(\\d{3}),\\s<(.*)>\\s(.*)$",
    "inputs": [
      {
        "prefix": [
          "HTTP error:\t000,\t<a"
        ],
        "suffix": "a",
        "pump": [
          ">\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\<img.*src\\=(\\'|\")(.*?)(\\'|\").*?\\>",
    "inputs": [
      {
        "prefix": [
          "<imga",
          "a"
        ],
        "suffix": "i",
        "pump": [
          "src=\"",
          "\""
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "i",
        "pump": [
          "<img",
          "src=\"",
          "\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^([\\w\\-\\d]+)\\s?([<=>]+)\\s?(\\S+)",
    "inputs": [
      {
        "prefix": [
          "a\t<"
        ],
        "suffix": "<\t\t",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "output\\-folder: \\$\\(node\\-sdks\\-folder\\)\\/(lib\\/services\\/\\S+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-f\toutput-folder: $(node-sdks-folder)/lib/se",
        "pump": [
          "output-folder: $(node-sdks-folder)/lib/services/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(#)\\S+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "#\t#",
        "pump": [
          "#a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "public function create\\((.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "public function create(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "automatic analyze of table \"(.+?)\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "na",
        "pump": [
          "automatic analyze of table \"a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)((?:\\:\\d+)+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:",
        "pump": [
          ":"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*scgi_(port|local)\\s*=\\s*(.+)\\s*$",
    "inputs": [
      {
        "prefix": [
          "\tscgi_port\t=\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(function)\\s*[A-Za-z0-9_]*\\s*(\\([\\s\\S]*)",
    "inputs": [
      {
        "prefix": [
          "function\t"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "afunction\t"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Final-Recipient: rfc822;(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "Final-Recipient: rfc822;"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.+)(?:_job)?_(time|count)(?::(queue|job):(.*))?$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "_time:job:"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<link([^>]*)data-fr-style=\"true\"([^>]*)>",
    "inputs": [
      {
        "prefix": [
          "<linka"
        ],
        "suffix": "n",
        "pump": [
          "data-fr-style=\"true\""
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "-s><link<d",
        "pump": [
          "<link",
          "data-fr-style=\"true\""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".*\\n.*return '(.*)'.*",
    "inputs": [
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n",
          "return '",
          "'"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\n",
          "return '",
          "'"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(0|(-?[1-9]\\d*))(\\.\\d+)?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "1.",
        "pump": [
          "-1"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:\\s+|\\s?=\\s?)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "=\ta",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n+([^\\n\\S]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(.-.)+\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "-",
        "pump": [
          "[a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*)\\/([^\\.]+)\\.([^\\.]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a.a/.",
        "pump": [
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s+log-adjacency-changes(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]+_)+test\\.py$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "est",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<title>(.*?)\\s+-\\s+XVID",
    "inputs": [
      {
        "prefix": [
          "<title>a"
        ],
        "suffix": "XV",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "XVI",
        "pump": [
          "<title>",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\/\n",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\n3 TIME (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "\n3 TIME a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^I see element \"(.*?)\" \"(.*?)\" times$",
    "inputs": [
      {
        "prefix": [
          "I see element \"a"
        ],
        "suffix": "I ",
        "pump": [
          "\" \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([0-9]+)(?:\\.([0-9]+))?(?:\\.([0-9]+))?(?:\\.([0-9]+))?(?:([ab])([0-9]+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0.",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^radio button having (.+) \"(.*?)\" should be (selected|unselected)$",
    "inputs": [
      {
        "prefix": [
          "radio button having a"
        ],
        "suffix": "u",
        "pump": [
          " \""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(.*):[0-9]+:[0-9]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0:",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([a-z]+)\\(([0-9]+)\\)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ")a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "( |\\().*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "("
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<user>.*</user>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "e</us",
        "pump": [
          "<user>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[a-zA-Z_]+$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "input.*value=\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "input"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "Argument 3.*bindActions.*falsy",
    "inputs": [
      {
        "prefix": [
          "Argument 3a"
        ],
        "suffix": " ",
        "pump": [
          "bindActions"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "ent",
        "pump": [
          "Argument 3",
          "bindActions"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[A-Za-z0-9_\\.-]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "<B><Z>(?:<[^>]*>)*<N pl=\"y\" gnt=\"n\" gnd=\"m\" h=\"y\".>(?:<[^>]*>)*<\\/Z>([^<]+)<\\/B>",
    "inputs": [
      {
        "prefix": [
          "<B><Z><a>"
        ],
        "suffix": "><N pl=\"y\"",
        "pump": [
          "<N pl=\"y\" gnt=\"n\" gnd=\"m\" h=\"y\"a>"
        ]
      },
      {
        "prefix": [
          "a",
          "<a>"
        ],
        "suffix": "n\" gn",
        "pump": [
          "<B><Z>",
          "<N pl=\"y\" gnt=\"n\" gnd=\"m\" h=\"y\"a>"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\s*(.*?)(\\\\)?\\s*$",
    "inputs": [
      {
        "prefix": [
          "\t",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\+?\\d[\\d ]+\\d",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " 0+0",
        "pump": [
          "+0 "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "void\\s+loop\\(\\)(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "void\tloop()"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\d+ passing",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "as",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*[\\])\\n]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\na",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^0-9.]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ".",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*onclick=\".*?\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ic",
        "pump": [
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "@static\\(([^\\)]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a)@s",
        "pump": [
          "@static(a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "input .*?type=\"checkbox\"\n                                  .*?name=\"crud_test_model\\[human\\]\"",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ut",
        "pump": [
          "input "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([-a-z]+)(;q=([0-9.]+))?",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "q=.a;",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\* (.+) locale definition",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "o",
        "pump": [
          "* a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^\u0000-\u007f]+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          ""
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^\\/([^/\\s]+?)-[^\\s]*$",
    "inputs": [
      {
        "prefix": [
          "/a"
        ],
        "suffix": "\t",
        "pump": [
          "-"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(\\d+?)((?:000)+)$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "0100",
        "pump": [
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "em (.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "em a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/*",
        "pump": [
          "/*#sourceURL=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\e\\[\\d+(?:;\\d+)?m(.+?)\\e\\[0m",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "0;\u001b[",
        "pump": [
          "\u001b[0ma"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\w+): (\\w+) \\((\\d+)\\) \\/honey",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ho a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\s*at\\s+.*$",
    "inputs": [
      {
        "prefix": [
          "\tat\t"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "\tat\t"
        ],
        "suffix": "a",
        "pump": [
          "\t",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(?:<[\\/A-DF-Z][^>]*>)+([Aa]r)<\\/[A-DF-Z]> (?:<[\\/A-DF-Z][^>]*>)+(t\\x{ed})<\\/[A-DF-Z]>",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "</a<>ar",
        "pump": [
          "<"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^(.*?)-(dev|\\d.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "-0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(===== VSCAN =====.*?)=====",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " V",
        "pump": [
          "===== VSCAN ====="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\{([\\w\\\\]+)\\:([^\\:\\}]+)(?:\\:([^\\}]+))?\\}",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "}a{",
        "pump": [
          "{a:a:a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "%(\\S+)%",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "%a",
        "pump": [
          "%a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "index definition (.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "index definition "
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "current\\s->(.+)\\/deployment\\/",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "ur",
        "pump": [
          "current\t->a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "([^@ ]*)@([^: ]*):([^ ]*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": " @",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\\"([^\\\"]+)\\\": ([^,]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": ",\": ",
        "pump": [
          "\"a\": a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[^:]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(.+)",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      },
      {
        "prefix": [
          "a",
          "0"
        ],
        "suffix": "a",
        "pump": [
          "0",
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\d+)(K|M) Active, (\\d+)(K|M) Inact, (\\d+)(K|M) Wired,.*?(\\d+)(K|M) Free",
    "inputs": [
      {
        "prefix": [
          "0K Active, 0K Inact, 0K Wired,a"
        ],
        "suffix": " A",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a",
          "0K Active, 0K Inact, 0K Wired,a"
        ],
        "suffix": "ct, 0",
        "pump": [
          "0",
          "0"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "--openssl-dir=(.+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "--openssl-dir=a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(&?merchantpin=)[^&]*",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "c&merchantpin",
        "pump": [
          "&merchantpin="
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\S)[ \\t]+\\n",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a ",
        "pump": [
          "a\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "\\[(.*?)\\](.*)",
    "inputs": [
      {
        "prefix": [
          "[a"
        ],
        "suffix": "a",
        "pump": [
          "]"
        ]
      },
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "[",
          "]"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[\\?]?(.*)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "(\\.par|[\\d.]+)$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "p",
        "pump": [
          "."
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^image::?(.*?)\\[(.*?)\\]$",
    "inputs": [
      {
        "prefix": [
          "image::a"
        ],
        "suffix": "im",
        "pump": [
          "["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "^Read ([\\.\\d]+)(\\w+)\\s+Written\\s+([\\.\\d]+)(\\w+).*\\s+transferred\\s+([\\.\\d]+)(\\w+)\\s+\\(([\\.\\d]+)(\\w+)",
    "inputs": [
      {
        "prefix": [
          "Read .a\tWritten\t.a",
          "a"
        ],
        "suffix": "(",
        "pump": [
          "a",
          "\t"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "router-id ([^\\s]+)",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "er\trouter-",
        "pump": [
          "router-id a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": ".+?/.+?/.+?/",
    "inputs": [
      {
        "prefix": [
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/a",
          "/a"
        ]
      },
      {
        "prefix": [
          "a",
          "a",
          "a"
        ],
        "suffix": "a",
        "pump": [
          "a",
          "/a",
          "/a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "[/|\\\\][^/\\\\]*$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "a",
        "pump": [
          "/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "options\\[(.*)\\]",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "s",
        "pump": [
          "options["
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "_(?:\\w+)_DOT_",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "DO$_",
        "pump": [
          "_a"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "src\\/.*\\.js$",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "/",
        "pump": [
          "src/"
        ]
      }
    ],
    "complexity": "polynomial"
  },
  {
    "regex": "rm\\s+(-?\\w?\\ ?)*\"?(%{buildroot}|\\$b)\"?/?\"?%{_lib(dir)?}.*\\*\\.la;?$",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "import[\\s]+[\\w\\d]+(\\.([\\w\\d]+|[\\*]+)+)*\\;",
    "inputs": [
      {
        "prefix": [
          "import 0"
        ],
        "suffix": "",
        "pump": [
          ".**"
        ]
      },
      {
        "prefix": [
          "import\ta.a"
        ],
        "suffix": "mpor*a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "importsd\u0000*w"
        ],
        "suffix": "",
        "pump": [
          "**w"
        ]
      },
      {
        "prefix": [
          "8import\t"
        ],
        "suffix": "i.zOi.zO0immpormport",
        "pump": [
          "i.zO"
        ]
      },
      {
        "prefix": [
          "import j"
        ],
        "suffix": "",
        "pump": [
          ".**"
        ]
      },
      {
        "prefix": [
          "import\ta.a"
        ],
        "suffix": "i",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "importsd\u0000*dd"
        ],
        "suffix": "",
        "pump": [
          "wd"
        ]
      },
      {
        "prefix": [
          ";import\ni."
        ],
        "suffix": "trottrotZQCXXXAAS",
        "pump": [
          "trot"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\"(<a .+?a>|[^\"\\\\]|\\\\.)*\"|'([^'\\\\]|\\\\.)*')",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "<a <a aa>"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\"a\\",
        "pump": [
          "<a \\a>"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "<a <a aa>"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\$<\"a",
        "pump": [
          "<a \\a>"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Views.Foo = Backbone.View.extend\\(\\{(.|\\n)*app\\/scripts\\/templates\\/foo.ejs",
    "inputs": [
      {
        "prefix": [
          "Views!Foo = Backbone!View!extend({"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "ViewsaFoo = BackboneaViewaextend({"
        ],
        "suffix": "mpla",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "ViewsVFoo = BackboneVViewsextend({"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "ViewsaFoo = BackboneaViewaextend({"
        ],
        "suffix": "j",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((\\d+\\s+\\d+\\s*)*)(.*)$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "0\t00"
        ]
      },
      {
        "prefix": [
          "dsd"
        ],
        "suffix": "",
        "pump": [
          "ddsd"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "6\t66666\t666\t66666\t66666\t666\t\t\t66\t6\t6\t6\t\t\t\t\t6\t6\t\t6\t\t\t6\t\t\t\b\b\t\t\n\t",
        "pump": [
          "6\t66666\t66"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\s|\\n)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\t\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "\t\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:use\\s+[^(;]+;\\n)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "us;\t",
        "pump": [
          "use\t\ta;\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "e\t",
        "pump": [
          "use\t\ta;\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(https?:)?//((\\w+).)+(\\w+)/",
    "inputs": [
      {
        "prefix": [
          "https://a{"
        ],
        "suffix": "",
        "pump": [
          "000{"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "ps:",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "scdwscdwZU26qxnP9fjbEIQ",
        "pump": [
          "scdw"
        ]
      },
      {
        "prefix": [
          "https://hu"
        ],
        "suffix": "",
        "pump": [
          "000{"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "tpa/$//",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "//"
        ],
        "suffix": "httphttpVUQZZFQSMPBDQBSW",
        "pump": [
          "http"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^!?\\[((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\]",
    "inputs": [
      {
        "prefix": [
          "!["
        ],
        "suffix": "!\\",
        "pump": [
          "\\[\\]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([A-Z](\\w|_)+::)+[A-Z](\\w|_)+$",
    "inputs": [
      {
        "prefix": [
          "A0"
        ],
        "suffix": "",
        "pump": [
          "_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "_:a",
        "pump": [
          "A_::"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}",
    "inputs": [
      {
        "prefix": [
          "/]"
        ],
        "suffix": "",
        "pump": [
          "[[[]"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "\\/\n",
        "pump": [
          "[a][a]"
        ]
      },
      {
        "prefix": [
          "/\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          ".\u0000"
        ]
      },
      {
        "prefix": [
          "/[ec\\q[h]\\/rg|[5+(]m.\\?nmo"
        ],
        "suffix": "[hz+][q[hz[z+][hz+][q[hz[z+]\\q[hz+]v]+zh]\\/[hz+",
        "pump": [
          "[hz+][q[hz[z+]"
        ]
      },
      {
        "prefix": [
          "/]"
        ],
        "suffix": "",
        "pump": [
          "[[[]"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "\\",
        "pump": [
          "[a][a]"
        ]
      },
      {
        "prefix": [
          "/\u0000."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "/]"
        ],
        "suffix": "",
        "pump": [
          "[[[]"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "a",
        "pump": [
          "[a][a]"
        ]
      },
      {
        "prefix": [
          "/\u0000+"
        ],
        "suffix": "",
        "pump": [
          ".+"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:https?://|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s`!()\\\\[\\\\]{};:'\\\".,<>?«»“”‘’])",
    "inputs": [
      {
        "prefix": [
          "www\\.a"
        ],
        "suffix": "tps",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "hj.lr/\\"
        ],
        "suffix": "j.lrj.lr/qC$M0{`C",
        "pump": [
          "j.lr"
        ]
      },
      {
        "prefix": [
          "www\\.a"
        ],
        "suffix": "sh/\\ahw.wwwa",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\\http://\\"
        ],
        "suffix": "a-z0a-z0-9.\\\\-?:htt",
        "pump": [
          "a-z0"
        ]
      },
      {
        "prefix": [
          "www\\.a"
        ],
        "suffix": "hts-.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "hhttp://\\"
        ],
        "suffix": "a-z0a-z0-9.\\\\-41166",
        "pump": [
          "a-z0"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\[((?:[\\w\\-]|\\\\.)+)\\s*=\\s*['\"]?((?:\\\\.|[^'\"]+)+)['\"]?\\]",
    "inputs": [
      {
        "prefix": [
          "[a =]"
        ],
        "suffix": "",
        "pump": [
          "\\^"
        ]
      },
      {
        "prefix": [
          "[a=\"a"
        ],
        "suffix": "\\\"\\\\\"",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "J[c=J[c=w\t\tn=y>yrw9%k",
        "pump": [
          "J[c="
        ]
      },
      {
        "prefix": [
          "[a =]"
        ],
        "suffix": "",
        "pump": [
          "\\^"
        ]
      },
      {
        "prefix": [
          "[a=\"a"
        ],
        "suffix": "\\\"\t\\",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\b"
        ],
        "suffix": "[Pu=[Pu=1~Hl>S)BdJY4l",
        "pump": [
          "[Pu="
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(( '.*')|( \".*\")|('.*')|(\".*\"))+;*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": " ",
        "pump": [
          " ''''''"
        ]
      },
      {
        "prefix": [
          "\"\"\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\"\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": " \";a",
        "pump": [
          " ''''''"
        ]
      },
      {
        "prefix": [
          "\"\" '"
        ],
        "suffix": "",
        "pump": [
          "''' '"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\"(.|\\s)*?\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\t",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "s\u0000"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\t\t\n\t\t\t\t\t\n\t\t\t\r\t\r\t\r\n\b\r\n\r\n\t\b\t\t\n\t\r\t",
        "pump": [
          "\t\t\n\t\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.*/)*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "\u0000",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "a/"
        ]
      },
      {
        "prefix": [
          "\u0000"
        ],
        "suffix": "",
        "pump": [
          "/\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.*[dyms])+(\\s*[xX]+)$",
    "inputs": [
      {
        "prefix": [
          "d"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "d",
        "pump": [
          "ad"
        ]
      },
      {
        "prefix": [
          "ds"
        ],
        "suffix": "",
        "pump": [
          "ms"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "msmPsHmsmPsHdPxsHdPx;Kz@ydmPG0sHdPx",
        "pump": [
          "msmPsH"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "s\\((\\\\\\\\|\\\\\\)|[^\\)])*\\)\\s*",
    "inputs": [
      {
        "prefix": [
          "s("
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "s("
        ],
        "suffix": "s)s",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "s\u0000"
        ],
        "suffix": "\u0000",
        "pump": [
          "\\\u0000"
        ]
      },
      {
        "prefix": [
          "s("
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "s("
        ],
        "suffix": "\ta",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "s\\"
        ],
        "suffix": "\u0000",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "s(s(s(s\\\\\\(s("
        ],
        "suffix": "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\WJUFDJULRYZDKHBIZV",
        "pump": [
          "\\\\\\\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([_a-zA-Z]\\w*)*:",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a::",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "",
        "pump": [
          "wa"
        ]
      },
      {
        "prefix": [
          "K6"
        ],
        "suffix": "lmzElmzENaXCZJnAc",
        "pump": [
          "lmzE"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/(l|t.?)+$",
    "inputs": [
      {
        "prefix": [
          "/t"
        ],
        "suffix": "l!",
        "pump": [
          "tt"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "tl/",
        "pump": [
          "ltl"
        ]
      },
      {
        "prefix": [
          "/lt"
        ],
        "suffix": "\u0000\u0000",
        "pump": [
          "tt"
        ]
      },
      {
        "prefix": [
          "/t/"
        ],
        "suffix": "tttttttttttttttttttt/t|t|t|ttt///",
        "pump": [
          "tttttt"
        ]
      },
      {
        "prefix": [
          "/t"
        ],
        "suffix": "l!",
        "pump": [
          "tt"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "a/a",
        "pump": [
          "ltl"
        ]
      },
      {
        "prefix": [
          "/lt"
        ],
        "suffix": "\u0000\u0000",
        "pump": [
          "lt"
        ]
      },
      {
        "prefix": [
          "/lt/tttt/t/"
        ],
        "suffix": "tttttttttttttltttttt)/",
        "pump": [
          "tttttt"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\/.*)*(\\/\\..*|\\.(tmproj|o|pyc)|Icon)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "/",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          "/\u0000"
        ],
        "suffix": "",
        "pump": [
          "/\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "/I.tm",
        "pump": [
          "//"
        ]
      },
      {
        "prefix": [
          "/\u0000"
        ],
        "suffix": "",
        "pump": [
          "/\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\((\\\\[\\\\\\)]|[^\\)])*\\)[egimosx]*",
    "inputs": [
      {
        "prefix": [
          "("
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "("
        ],
        "suffix": ")a\\",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "("
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "("
        ],
        "suffix": ")\\a",
        "pump": [
          "\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\s\\s*)*\\\\",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x09\\x09"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\\\t",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r",
        "pump": [
          "\n\n\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<([\\$\\&\\#])([a-zA-Z_0-9]+)(\\s*[^>]*)*>",
    "inputs": [
      {
        "prefix": [
          "<&0"
        ],
        "suffix": "",
        "pump": [
          "{"
        ]
      },
      {
        "prefix": [
          "<$a"
        ],
        "suffix": "<>>",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "<&7o<&7oNqKp'PQBa\ty",
        "pump": [
          "<&7o"
        ]
      },
      {
        "prefix": [
          "<&0"
        ],
        "suffix": "",
        "pump": [
          "{"
        ]
      },
      {
        "prefix": [
          "<$a"
        ],
        "suffix": "$a<><",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "<#eP<#eP!Us/3Q_oG)'l",
        "pump": [
          "<#eP"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(([ \\t]*)\\/\\/\\s*bower:*(\\S*))(\\n|\\r|.)*?(\\/\\/\\s*endbower)",
    "inputs": [
      {
        "prefix": [
          "//bower"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "//bower"
        ],
        "suffix": "\te//",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "// bower"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "//bower"
        ],
        "suffix": "endbo",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(<b>.+?)+(<\\/b>)",
    "inputs": [
      {
        "prefix": [
          "<b>!"
        ],
        "suffix": "",
        "pump": [
          "<b>!<b>="
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a<",
        "pump": [
          "<b>a<b>a"
        ]
      },
      {
        "prefix": [
          "<b>\u0000<b>\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "<b>\u0000\u0000"
        ]
      },
      {
        "prefix": [
          "<b"
        ],
        "suffix": "><b>b<b><b><<<b>><b>b<b><b><<<b>>><b><b>b<b><b><<b>>b>nbEbBr()HRbNkYN<h<hqU+l><pdzahC",
        "pump": [
          "><b>b<b><b><<<b>"
        ]
      },
      {
        "prefix": [
          "<b>="
        ],
        "suffix": "",
        "pump": [
          "<b>!<b>="
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a</",
        "pump": [
          "<b>a<b>a"
        ]
      },
      {
        "prefix": [
          "<b>\u0000<b>\u0000"
        ],
        "suffix": "",
        "pump": [
          "<b>\u0000<b>\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\s*\\n)*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "\t",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\w+)=\"((?:\\\\\"|.)*?)\"",
    "inputs": [
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "$",
        "pump": [
          "\\\""
        ]
      },
      {
        "prefix": [
          "w=\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": "$",
        "pump": [
          "\\\""
        ]
      },
      {
        "prefix": [
          "w=\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\s*(\"(\\\\\\\\|[^\\\"])*\"|'(\\\\\\\\|[^\\'])*'|[;}{:])\\s*",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\"\\'\\\"\\",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "'\\"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "a\"\\",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "'\\"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "'\\\\\\\\\\\\\""
        ],
        "suffix": "\\\\\\\\\\\\\\\\\\\\eb\"}\\f34d463\\",
        "pump": [
          "\\\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\s|\\\\|\\n|\\r|\\t)*\\)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n)\n",
        "pump": [
          "\t\n"
        ]
      },
      {
        "prefix": [
          "\\\\\\\\\\\\\\\\\\\\\\"
        ],
        "suffix": "\\\r\r\t \t\\\r\r\t \t\n\n   \t\n",
        "pump": [
          "\\\r\r\t \t"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n",
        "pump": [
          "\t\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n\r\t\n\n\r\t\n\n\t\t\n\t\t\r\n\t",
        "pump": [
          "\n\r\t\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w\\.-]*)*\\/?\\S",
    "inputs": [
      {
        "prefix": [
          "a.aa"
        ],
        "suffix": "s:.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "-a"
        ],
        "suffix": "",
        "pump": [
          "da"
        ]
      },
      {
        "prefix": [
          "a.aa"
        ],
        "suffix": "s:ahttps:",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "--"
        ],
        "suffix": "",
        "pump": [
          "d-"
        ]
      },
      {
        "prefix": [
          "a.a"
        ],
        "suffix": "ps://",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "--"
        ],
        "suffix": "",
        "pump": [
          "d-"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)",
    "inputs": [
      {
        "prefix": [
          "epiphany\t0._0"
        ],
        "suffix": "y",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "epiphany/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      },
      {
        "prefix": [
          "epiphany\t0._0"
        ],
        "suffix": "ph",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "epiphany/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.*?)\\|(\\S+)\\{((?:\\\\.|[^}])+)\\}",
    "inputs": [
      {
        "prefix": [
          "||{|"
        ],
        "suffix": "",
        "pump": [
          "\\~"
        ]
      },
      {
        "prefix": [
          "|a{"
        ],
        "suffix": "}{}a\t|",
        "pump": [
          "\\a\\a"
        ]
      },
      {
        "prefix": [
          "||{|"
        ],
        "suffix": "",
        "pump": [
          "\\~"
        ]
      },
      {
        "prefix": [
          "|a{"
        ],
        "suffix": "}{\\",
        "pump": [
          "\\a\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": " *([^ ]+) +\\'((:?\\\\.|[^\\'])*)\\' *",
    "inputs": [
      {
        "prefix": [
          "\\x00 '"
        ],
        "suffix": "",
        "pump": [
          ":\\]"
        ]
      },
      {
        "prefix": [
          "a '"
        ],
        "suffix": " \\''a",
        "pump": [
          ":\\a"
        ]
      },
      {
        "prefix": [
          "\u0000 '."
        ],
        "suffix": "",
        "pump": [
          ":."
        ]
      },
      {
        "prefix": [
          "\\x00 '"
        ],
        "suffix": "",
        "pump": [
          ":\\]"
        ]
      },
      {
        "prefix": [
          "a '"
        ],
        "suffix": " \\",
        "pump": [
          ":\\a"
        ]
      },
      {
        "prefix": [
          "\u0000 '."
        ],
        "suffix": "",
        "pump": [
          ":."
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": ";|\"(?:\\\\.|[^\"\\n])*\"|'(?:\\\\.|[^'\\n])*'",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\"\n",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\\n;\"\\",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "",
        "pump": [
          ".\""
        ]
      },
      {
        "prefix": [
          "'\\\\\\\":\\bF"
        ],
        "suffix": "7\\:?\\:\\\\7\\:?\\:\\\\??:\\\\4\\\\.\\\\.",
        "pump": [
          "7\\:?\\:\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+$",
    "inputs": [
      {
        "prefix": [
          "http://~\\x7f"
        ],
        "suffix": "",
        "pump": [
          "---\\x7f"
        ]
      },
      {
        "prefix": [
          "HTTP://"
        ],
        "suffix": "TP:",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "htTp://"
        ],
        "suffix": "h42816h42816609133186220\b",
        "pump": [
          "h42816"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^WEBVTT.*\\n(?:.*: .*\\n)*\\n",
    "inputs": [
      {
        "prefix": [
          "WEBVTT\\x0a"
        ],
        "suffix": "",
        "pump": [
          ": : \\x0a"
        ]
      },
      {
        "prefix": [
          "WEBVTT\n"
        ],
        "suffix": "EB",
        "pump": [
          ": \n: \n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((.|\\n)*?)B((.|\\n)*?)D",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "D\n",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "D\n",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([a-z0-9A-Z]+[-|\\\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\\\.)+[a-zA-Z]{2,}$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0A"
        ],
        "suffix": "",
        "pump": [
          "0A"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "u0Uvu0UvC6TVlYdC9U",
        "pump": [
          "u0Uv"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "\\",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0A"
        ],
        "suffix": "",
        "pump": [
          "0A"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "auX0auX0uX0uXA9-0uX",
        "pump": [
          "auX0"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\s*,)?\\s*(\\w+)=(\"(?:[^\\\\\"]+|\\\\.)*\"|[^,]+)\\s*",
    "inputs": [
      {
        "prefix": [
          ",a=\""
        ],
        "suffix": "",
        "pump": [
          "#!"
        ]
      },
      {
        "prefix": [
          "a=\"a"
        ],
        "suffix": ",",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w=\"."
        ],
        "suffix": "",
        "pump": [
          ".."
        ]
      },
      {
        "prefix": [
          "u=\""
        ],
        "suffix": "H.\tkH.\tk>d\ri/ \n3Sn",
        "pump": [
          "H.\tk"
        ]
      },
      {
        "prefix": [
          ",a=\""
        ],
        "suffix": "",
        "pump": [
          "#!"
        ]
      },
      {
        "prefix": [
          "a=\"a"
        ],
        "suffix": "=,",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "w=\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "#\u0000"
        ]
      },
      {
        "prefix": [
          "a=\""
        ],
        "suffix": ")_:n)_:nI/LDty{^Xw",
        "pump": [
          ")_:n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/",
    "inputs": [
      {
        "prefix": [
          "/*"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "*"
        ],
        "suffix": "\\\n*\\",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "\\\n*\\",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(([a-zA-Z_$][a-zA-Z\\d_$]*\\.)*[a-zA-Z_$][a-zA-Z\\d_$]*\\*([\\_A-z0-9]*)\\*(\\d*)\\*(\\d*)\\*([\\_A-z][A-z0-9])*\\*([\\_A-z][A-z0-9]*)*(\\,[\\_A-z][A-z0-9]*)*\\*(([a-zA-Z_$][a-zA-Z\\d_$]*\\.)*[a-zA-Z_$][a-zA-Z\\d_$]*)*\\*((?:[a-zA-Z]\\:){0,1}(?:[\\/]*[\\w.]+){1,})*\\*(([a-zA-Z_$][a-zA-Z\\d_$]*\\.)*[a-zA-Z_$][a-zA-Z\\d_$]*)*)$",
    "inputs": [
      {
        "prefix": [
          "a*****"
        ],
        "suffix": "",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "a*******a"
        ],
        "suffix": "00*_0*a",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "aa*\\**"
        ],
        "suffix": "**NPXEVLASNRAGTZ",
        "pump": [
          "**NP"
        ]
      },
      {
        "prefix": [
          "a*****"
        ],
        "suffix": "",
        "pump": [
          "AA"
        ]
      },
      {
        "prefix": [
          "a*******a"
        ],
        "suffix": "00*_[***a",
        "pump": [
          "/aa"
        ]
      },
      {
        "prefix": [
          "aa*\\****\\**"
        ],
        "suffix": "3F1d3F1dAeeFE",
        "pump": [
          "3F1d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^UPSTREAM: (\\d+)+:(.+)",
    "inputs": [
      {
        "prefix": [
          "UPSTREAM: 0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "UPSTREAM: 0"
        ],
        "suffix": "a",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "UPSTREAM: dd"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          "UPSTREAM: "
        ],
        "suffix": "859685969117576190",
        "pump": [
          "8596"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(-?(?:[_a-z]|\\\\[\\da-f]+ ?)(?:[\\w-]|\\\\\\\\[\\da-f]+ ?)*)\\s*:",
    "inputs": [
      {
        "prefix": [
          "_"
        ],
        "suffix": "",
        "pump": [
          "\\\\00"
        ]
      },
      {
        "prefix": [
          "-a"
        ],
        "suffix": "\\a\t::",
        "pump": [
          "\\\\aaa"
        ]
      },
      {
        "prefix": [
          "_\\a"
        ],
        "suffix": "",
        "pump": [
          "d\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "f\\s+(((-[\\d]{1,}\\/-[\\d]{1,}\\/-[\\d]{1,}[\\s]?){3,})+)",
    "inputs": [
      {
        "prefix": [
          "f\t"
        ],
        "suffix": "\t\t-0/-0/-0-0/-0/-0-0/-0/-0-0/",
        "pump": [
          "-0/-0/-0-0/-0/-0-0/-0/-0-0/-0/-0-0/-0/-0-0/-0/-0"
        ]
      },
      {
        "prefix": [
          "fs-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d"
        ],
        "suffix": "\u0000",
        "pump": [
          "-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d"
        ]
      },
      {
        "prefix": [
          "f\t"
        ],
        "suffix": "-",
        "pump": [
          "-0/-0/-0-0/-0/-0-0/-0/-0-0/-0/-0-0/-0/-0-0/-0/-0"
        ]
      },
      {
        "prefix": [
          "fs-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-dd"
        ],
        "suffix": "\u0000",
        "pump": [
          "-d/-d/-d-d/-d/-d-d/-d/-d-d/-d/-dd"
        ]
      },
      {
        "prefix": [
          "f\t-0/-0/-0"
        ],
        "suffix": "\t-0",
        "pump": [
          "-0/-0/-00"
        ]
      },
      {
        "prefix": [
          "fs-d/-d/-d-d/-d/-d-d/-d/-d"
        ],
        "suffix": "\u0000",
        "pump": [
          "-d/-d/-d-d/-d/-d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\"(?:\\\\?[\\s\\S])*?\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "a",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\]"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "a",
        "pump": [
          "\\a"
        ]
      },
      {
        "prefix": [
          "\\\""
        ],
        "suffix": "\\s\\S*eA\\S\\\\s\\S*eA\\S\\QSsmS.\\COyM?bHG9Xa\\s\\Ss\\S*?s\\S*?^DRXZATCXKNRXHCDLGWM",
        "pump": [
          "\\s\\S*eA\\S\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\\\[rn]|[\\r\\n]+)+",
    "inputs": [
      {
        "prefix": [
          "\n"
        ],
        "suffix": "\n\\nn",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "\n"
        ],
        "suffix": "\na\\",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\$XF:{[-\\w.]+\\?[-\\w.]+(?:,(?:\\|?(?:[-#.^+*~]*(?:[\\w+][^$]*)|=(?:[\\S+][^$]*)|@[-#]*(?:\\w+.)[\\w+.]+)?)*)?}:XF\\$",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "^([a-z0-9]+([_\\.\\-]{1}[a-z0-9]+)*){1}([@]){1}([a-z0-9]+([_\\-]{1}[a-z0-9]+)*)+(([\\.]{1}[a-z]{2,6}){0,3}){1}$",
    "inputs": [
      {
        "prefix": [
          "a-a@0"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a@a"
        ],
        "suffix": "a0.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0@00"
        ],
        "suffix": "\u0000",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "za@"
        ],
        "suffix": "za0aza0a0z0az0zz0-",
        "pump": [
          "za0a"
        ]
      },
      {
        "prefix": [
          "a-a@0"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a@a"
        ],
        "suffix": "a0-.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0@00-00"
        ],
        "suffix": "\u0000",
        "pump": [
          "0-00"
        ]
      },
      {
        "prefix": [
          "a9@"
        ],
        "suffix": "jazzjazz0a0jazz0-",
        "pump": [
          "jazz"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\"(\\\\\\\\|\\\\\"|[^\"])*\"",
    "inputs": [
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\\"\"\"",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "\""
        ],
        "suffix": "\\a",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "\"\\\\)\\\\\\\r\\\\?"
        ],
        "suffix": "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\(\\>{[.[?)",
        "pump": [
          "\\\\\\\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.*?)(?:,((.*?):(N|S|B|NS|SS|BS):(.*?))*)+$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": ",a:",
        "pump": [
          ",:B:B:"
        ]
      },
      {
        "prefix": [
          ",,:B:"
        ],
        "suffix": "",
        "pump": [
          ":B::B:"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "|,:N:,|,:N:,:N:N:N:,|NS|S:dLNzP8NA{p;o,:bldygxcbehfozlbethj\n\t",
        "pump": [
          "|,:N:,"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*(?:(?:%.*)|(?:\\/\\*(?:\\n|\\r|.)*?\\*\\/)|(?:\\s+))\\s*",
    "inputs": [
      {
        "prefix": [
          " /*"
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "*",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)",
    "inputs": [
      {
        "prefix": [
          "sleipnir\t0._0"
        ],
        "suffix": "i",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "sleipnir/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      },
      {
        "prefix": [
          "sleipnir\t0._0"
        ],
        "suffix": "l",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "sleipnir/ddd"
        ],
        "suffix": "\u0000",
        "pump": [
          "_d"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(:?#\\d+\\W+)(:?0x(?:(?:\\d|[abcdefABCDEF]){0,2})+)(:? +in +)(:?.+?)(:? +at +)(:?.+)$",
    "inputs": [
      {
        "prefix": [
          ":#0!0x"
        ],
        "suffix": "",
        "pump": [
          "A"
        ]
      },
      {
        "prefix": [
          ":#0$:0x"
        ],
        "suffix": "0 in ",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "#dW0xAA"
        ],
        "suffix": "",
        "pump": [
          "dA"
        ]
      },
      {
        "prefix": [
          ":#0:0x"
        ],
        "suffix": "4366494366495715401838",
        "pump": [
          "436649"
        ]
      },
      {
        "prefix": [
          ":#0!0x"
        ],
        "suffix": "",
        "pump": [
          "A"
        ]
      },
      {
        "prefix": [
          ":#0$:0x"
        ],
        "suffix": "a in  : ",
        "pump": [
          "a00"
        ]
      },
      {
        "prefix": [
          "#dW0xD"
        ],
        "suffix": "",
        "pump": [
          "dD"
        ]
      },
      {
        "prefix": [
          ":#0:?0x"
        ],
        "suffix": "abcdabcdefABCDEF",
        "pump": [
          "abcd"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": ":([^:]+)+:(.+)$",
    "inputs": [
      {
        "prefix": [
          ":!"
        ],
        "suffix": "",
        "pump": [
          ";!"
        ]
      },
      {
        "prefix": [
          ":a"
        ],
        "suffix": ":",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ":\u0000\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      },
      {
        "prefix": [
          ":"
        ],
        "suffix": "+zS,+zS,]a(\n}i6oZ^",
        "pump": [
          "+zS,"
        ]
      },
      {
        "prefix": [
          ":!"
        ],
        "suffix": "",
        "pump": [
          ";!"
        ]
      },
      {
        "prefix": [
          ":a"
        ],
        "suffix": ":",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ":\u0000\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "\u0000\u0000"
        ]
      },
      {
        "prefix": [
          ":"
        ],
        "suffix": "5EoF5EoF\nJQ1_)(}8V",
        "pump": [
          "5EoF"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\s|\\/\\*.*?\\*\\/)*[\\(\\w]",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          " /**//**/"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "/$*//",
        "pump": [
          "\t/**//**/"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(((.*)*)*Ā)foo",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "aĀ",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "bAMGbAMGbXs",
        "pump": [
          "bAMG"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "aĀ",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "IeU!IeU!<=\t",
        "pump": [
          "IeU!"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Involved parties:\\n\\n(((.+\\n){8}\\n|(.+\\n){2}\\n)*)",
    "inputs": [
      {
        "prefix": [
          "Involved parties:\n\n"
        ],
        "suffix": "p",
        "pump": [
          "a\na\na\na\na\na\na\na\n\n"
        ]
      },
      {
        "prefix": [
          "Involved parties:\n\n"
        ],
        "suffix": "nv",
        "pump": [
          "a\na\na\na\na\na\na\na\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^[a-zA-Z_]+(([-.])?[a-zA-Z0-9_]+)*$",
    "inputs": [
      {
        "prefix": [
          "A"
        ],
        "suffix": "!",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a-a"
        ],
        "suffix": "0--",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "A_"
        ],
        "suffix": "\u0000",
        "pump": [
          "0_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "AAZzAAZzAAgTwiDQOa-",
        "pump": [
          "AAZz"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(.|\\n)*?\\n(b|\\n)",
    "inputs": [
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "",
        "pump": [
          "c\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "\\x0a"
        ],
        "suffix": "",
        "pump": [
          "c\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\nb\n",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:[\\s\\pP]+|(?:&(?:[a-z]+|#[0-9]+);?))*$",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "#&0",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          "p"
        ],
        "suffix": "\u0000",
        "pump": [
          "pp"
        ]
      },
      {
        "prefix": [
          "F"
        ],
        "suffix": "\r\r\n\r\r\r\n\r \r \t \r\t\r\t~",
        "pump": [
          "\r\r\n\r"
        ]
      },
      {
        "prefix": [
          "\t"
        ],
        "suffix": "a",
        "pump": [
          "\t\t"
        ]
      },
      {
        "prefix": [
          "&a"
        ],
        "suffix": "\u0000",
        "pump": [
          "s&a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "::_%::_%\"[_[.:&']\\+",
        "pump": [
          "::_%"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([\\da-zA-Z](\\-?\\w+)*\\.)*[\\da-zA-Z](\\-?\\w+)*\\.?",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a-a"
        ],
        "suffix": "0..",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "",
        "pump": [
          "ww\u0000A"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "dzAqdzAqtNmHBOLpssV",
        "pump": [
          "dzAq"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "a-a"
        ],
        "suffix": "-",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "d"
        ],
        "suffix": "",
        "pump": [
          "ww\u0000d"
        ]
      },
      {
        "prefix": [
          "U-"
        ],
        "suffix": "IWUCIWUCZgSFO3_F9z",
        "pump": [
          "IWUC"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.*?)([0-9]*)*?$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "!",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "n"
        ],
        "suffix": "11691169972532001q",
        "pump": [
          "1169"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:([^\\S\\n\\r])+(\\r\\n|\\n|\\r)+)",
    "inputs": [
      {
        "prefix": [
          "\t"
        ],
        "suffix": "\t\n\t",
        "pump": [
          "\r\n\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>",
    "inputs": [
      {
        "prefix": [
          "<("
        ],
        "suffix": "",
        "pump": [
          "\"\"'\"'\""
        ]
      },
      {
        "prefix": [
          "<"
        ],
        "suffix": "\">'a",
        "pump": [
          "\"\"\"\""
        ]
      },
      {
        "prefix": [
          "<\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "<<<<?<\n<"
        ],
        "suffix": "\"\"\"'\"z'C'\"\"\"\"'\"z'C'\"\"'\"zBkr\"J*Ogb*f\"W|WlGHMqG[c[r[Cr\"H<[p'CV+G)i\"'\"zB2\"\"'\"zBkr*Ogb*f\"",
        "pump": [
          "\"\"\"'\"z'C'\""
        ]
      },
      {
        "prefix": [
          "<="
        ],
        "suffix": "",
        "pump": [
          "\"\"'\"'\""
        ]
      },
      {
        "prefix": [
          "<"
        ],
        "suffix": "\">a'<",
        "pump": [
          "\"\"\"\""
        ]
      },
      {
        "prefix": [
          "<\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "<*<.<''\"<"
        ],
        "suffix": "\"'\"\"''\"'\"\"'''''''\".*?*?.T[O?YSpRvBEkKO<.*?*|",
        "pump": [
          "\"'\"\"''"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(rim\\stablet\\sos)[\\/\\s-]?([\\w\\.]+)*",
    "inputs": [
      {
        "prefix": [
          "rim\ttablet\tos\ta"
        ],
        "suffix": "m\tta",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "rimstabletsosw"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      },
      {
        "prefix": [
          "rim\ttablet\tos\ta"
        ],
        "suffix": "m\tr",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "rimstabletsos.w"
        ],
        "suffix": "\u0000",
        "pump": [
          "ww"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\{.*?\\})*(\\w+)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "{}{}"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "}",
        "pump": [
          "{}{}"
        ]
      },
      {
        "prefix": [
          "{{}{}{{{"
        ],
        "suffix": "{}{}{}{}{}{}{}{}{}{}{{}{}{}",
        "pump": [
          "{}{}{}{}"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "{}{}"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "{",
        "pump": [
          "{}{}"
        ]
      },
      {
        "prefix": [
          "{{{{}{}{"
        ],
        "suffix": "{}{}{}{}{}{}{}{}}{}}{\t(*))+{*)((*+.{}{}{}",
        "pump": [
          "{}{}{}{}"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:'(\\\\\\\\|\\\\'|[^'])*')",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\'''",
        "pump": [
          "\\\\"
        ]
      },
      {
        "prefix": [
          "''"
        ],
        "suffix": "",
        "pump": [
          "\\'"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\\\\\\\\\\\\\\\\\\\\\\\\\\n\t\r\n\t\n\n\\\\\\\\.cg\b^\\\\71642895$O#t:m%pVs?@@><>@@aagrpxdj895$O#t:m%pV+",
        "pump": [
          "\\\\\\\\\\\\"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\?=.-]*)*\\/?$",
    "inputs": [
      {
        "prefix": [
          "https://a.a."
        ],
        "suffix": "\\x00",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a.aa"
        ],
        "suffix": ".:",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "-a"
        ],
        "suffix": "",
        "pump": [
          "da"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "h.pth.ptthtt.d.hhtth\t",
        "pump": [
          "h.pt"
        ]
      },
      {
        "prefix": [
          "https://a.."
        ],
        "suffix": "\\x00",
        "pump": [
          "0"
        ]
      },
      {
        "prefix": [
          "a.a"
        ],
        "suffix": "tp0.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "-a"
        ],
        "suffix": "",
        "pump": [
          "da"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "..pt..ptthhttps?rG ;",
        "pump": [
          "..pt"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\\\.|[^\\.])+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "..",
        "pump": [
          "\\a\\a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\\..",
        "pump": [
          "\\a\\a"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\s*(\\s*<br[^>]*>\\s*)+\\s*$",
    "inputs": [
      {
        "prefix": [
          "<br>"
        ],
        "suffix": "\\x00",
        "pump": [
          " <br>\\x09<br>"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "<b>>",
        "pump": [
          "\t<br>\t"
        ]
      },
      {
        "prefix": [
          "<br><br>s"
        ],
        "suffix": "\u0000",
        "pump": [
          "s<br>s"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\w|\\-|\\_|\\&|\\+|\\.)+\\@((\\w|\\-|\\_)+\\.)+[a-zA-Z]{2,}$",
    "inputs": [
      {
        "prefix": [
          "."
        ],
        "suffix": "",
        "pump": [
          "_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a&",
        "pump": [
          "a_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "__________DBWERFLTMLCJVIGIOOCFAH___DBWQXECWUEHIOCHER",
        "pump": [
          "____"
        ]
      },
      {
        "prefix": [
          "."
        ],
        "suffix": "",
        "pump": [
          "_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a&",
        "pump": [
          "a_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "___a_____a__@__a-z_Z-z_.7005973468226032",
        "pump": [
          "___a__"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\@.+(?:\\r|\\r?\\n)(?:[^\\@\\+].*(?:\\r|\\r?\\n))+",
    "inputs": [
      {
        "prefix": [
          "@a\r"
        ],
        "suffix": "\na",
        "pump": [
          "a\na\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^<!-- Start:AutoDoc((.*?(\\n))+.*?)End:AutoDoc -->$",
    "inputs": [
      {
        "prefix": [
          "<!-- Start:AutoDoc\\x0a"
        ],
        "suffix": "",
        "pump": [
          "\\x0a\\x0a"
        ]
      },
      {
        "prefix": [
          "<!-- Start:AutoDoc"
        ],
        "suffix": "t:Auto",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(<\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:\".*?\"|'.*?'|[^'\">\\s]+))?)+\\s*|\\s*)\\/?>)",
    "inputs": [
      {
        "prefix": [
          "</a 0"
        ],
        "suffix": "",
        "pump": [
          " a=''\\x090=\"\"\\x090=''"
        ]
      },
      {
        "prefix": [
          "</a"
        ],
        "suffix": "</\t",
        "pump": [
          "\ta=\"\"\ta=\"\""
        ]
      },
      {
        "prefix": [
          "<wswsw=\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "</a 0"
        ],
        "suffix": "",
        "pump": [
          " a=''\\x090=\"\"\\x090=''"
        ]
      },
      {
        "prefix": [
          "</a"
        ],
        "suffix": "\t",
        "pump": [
          "\ta=\"\"\ta=\"\""
        ]
      },
      {
        "prefix": [
          "<wswsw=\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"sw=\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(==.*?==|[^\\|])*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "|",
        "pump": [
          "===="
        ]
      },
      {
        "prefix": [
          "===="
        ],
        "suffix": "|",
        "pump": [
          "====="
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "require\\(['\"](..?\\/)+(utils|core|constants)['\"]\\)",
    "inputs": [
      {
        "prefix": [
          "require('!/"
        ],
        "suffix": "",
        "pump": [
          "v////"
        ]
      },
      {
        "prefix": [
          "require(\""
        ],
        "suffix": "c",
        "pump": [
          "a//a/"
        ]
      },
      {
        "prefix": [
          "require\"\u0000/\u0000"
        ],
        "suffix": "",
        "pump": [
          "//\u0000/\u0000"
        ]
      },
      {
        "prefix": [
          "require('\"///\"/\"//\"/r//\"/r"
        ],
        "suffix": "//\"/r//\"/o//\"/////\"/r//\"/o//\"///\"/\"//\"/r//\"/\"//\"/r//\"/o/",
        "pump": [
          "//\"/r//\"/o//\"///"
        ]
      },
      {
        "prefix": [
          "require('r/"
        ],
        "suffix": "",
        "pump": [
          "v////"
        ]
      },
      {
        "prefix": [
          "require(\""
        ],
        "suffix": "an",
        "pump": [
          "a//a/"
        ]
      },
      {
        "prefix": [
          "require\"\u0000/\u0000"
        ],
        "suffix": "",
        "pump": [
          "//\u0000/\u0000"
        ]
      },
      {
        "prefix": [
          "require('\""
        ],
        "suffix": "/////////////////s//////s/\"//\"/\"////",
        "pump": [
          "////////"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(@.+?/)*?\\Q$_[0]\\E$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "@!/@//"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Object\\.create\\(\\s+((THREE.)?(\\w+)\\.prototype[,]?\\s*)+\\)",
    "inputs": [
      {
        "prefix": [
          "Object.create( THREEaa.prototype"
        ],
        "suffix": "",
        "pump": [
          "THREE.prototypeT.prototype"
        ]
      },
      {
        "prefix": [
          "Object.create(\t"
        ],
        "suffix": "o",
        "pump": [
          "THREEaa.prototypeTHREEaa.prototype"
        ]
      },
      {
        "prefix": [
          "Object.create( THREEaaObject.prototype"
        ],
        "suffix": "",
        "pump": [
          "THREE.prototypeT.prototype"
        ]
      },
      {
        "prefix": [
          "Object.create(\t"
        ],
        "suffix": "E",
        "pump": [
          "THREEaa.prototypeTHREEaa.prototype"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(منفی\\s|مثبت\\s)*یک\\sهزار",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x09"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\{\\{verbatim\\}\\}((.|\\n)*?)\\{\\{\\/verbatim\\}\\}",
    "inputs": [
      {
        "prefix": [
          "{{verbatim}}"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "{{verbatim}}"
        ],
        "suffix": "{/ve",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "{{verbatim}}"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "{{verbatim}}"
        ],
        "suffix": "{/verbati",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\[(.*?(?:\\[.*?\\].*?)*)\\]\\((.*?)\\)",
    "inputs": [
      {
        "prefix": [
          "["
        ],
        "suffix": "",
        "pump": [
          "[]]"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "]",
        "pump": [
          "[]]"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "",
        "pump": [
          "[]]"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "]",
        "pump": [
          "[]]"
        ]
      },
      {
        "prefix": [
          "["
        ],
        "suffix": "[][[[][][[[]b?[[[]b?2e[\\*36Dd\\((CBf)*7(\\).f\\c.*f*:.1E*..6c:A(:.\\b?2e[\\(.(^?0:*.)\\c\\.)5?2C2",
        "pump": [
          "[][[[]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:(\\d+):)?(?:(\\d+)+:)?(\\d+(?:\\.\\d+)?)$",
    "inputs": [
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "0..",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "dd"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "0854085459403699486",
        "pump": [
          "0854"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "0"
        ],
        "suffix": "0.",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "dd"
        ],
        "suffix": "",
        "pump": [
          "dd"
        ]
      },
      {
        "prefix": [
          ":"
        ],
        "suffix": "352935297934099543",
        "pump": [
          "3529"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((?:[A-Z]\\w*[a-z]\\w+\\:\\:)*[A-Z]\\w*[a-z]\\w+) \\((.*)\\)(?: on line #(\\d+) of (.+))?\\:",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "Aaaa::"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "f",
        "pump": [
          "Aaaa::"
        ]
      },
      {
        "prefix": [
          "A"
        ],
        "suffix": "",
        "pump": [
          "www::A"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "Aaaa::"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "e Aa",
        "pump": [
          "Aaaa::"
        ]
      },
      {
        "prefix": [
          "Aw"
        ],
        "suffix": "",
        "pump": [
          "www::Aw"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "int3\\s*\\n(\\s*int3\\s*\\n)*",
    "inputs": [
      {
        "prefix": [
          "int3\n"
        ],
        "suffix": "\t\nn",
        "pump": [
          "int3\n\nint3\n"
        ]
      },
      {
        "prefix": [
          "int3\n"
        ],
        "suffix": "inint",
        "pump": [
          "int3\n\nint3\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "([^']*[A-Z??????????a-z??????????0-9][^']*)('[^']*[A-Z??????????a-z??????????0-9][^']*)+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "$''",
        "pump": [
          "'aa"
        ]
      },
      {
        "prefix": [
          "0'0'"
        ],
        "suffix": "",
        "pump": [
          "00'"
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "$'",
        "pump": [
          "'aa"
        ]
      },
      {
        "prefix": [
          "0'0'\u0000"
        ],
        "suffix": "",
        "pump": [
          "A0'\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\"(?:\\\\\"|[^\"]|\"[^\"\\n]*\")*\"|'\\n?(?:[^'\\n]+\\n?)*'|\\([^()]*\\))",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "(\\x00"
        ]
      },
      {
        "prefix": [
          "'\na"
        ],
        "suffix": "'\"(\\",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\"\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "Q'"
        ],
        "suffix": "Gp59Gp59Q+k \tdo~K ",
        "pump": [
          "Gp59"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "(\\x00"
        ]
      },
      {
        "prefix": [
          "'\na"
        ],
        "suffix": ")(\\'\"\n\n",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "7'"
        ],
        "suffix": "POVMPOVMj<{yA=Q;]q",
        "pump": [
          "POVM"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((?:\\w|_|-)+)\\s*=\\s*((?:\\w|\\d|_|-)+|\".*?\")",
    "inputs": [
      {
        "prefix": [
          "-"
        ],
        "suffix": "",
        "pump": [
          "_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "_$",
        "pump": [
          "a_"
        ]
      },
      {
        "prefix": [
          "-"
        ],
        "suffix": "",
        "pump": [
          "_"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "=",
        "pump": [
          "a_"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(.|\\r|\\n)*?\\r?\\n\\r?\\n",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0d"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\ra\n",
        "pump": [
          "a\r"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\?|\\*|\\{((?:\\{[^/]+?\\}|[^/{}]|\\\\[{}])+?)\\}",
    "inputs": [
      {
        "prefix": [
          "{|"
        ],
        "suffix": "",
        "pump": [
          "\\{{}{}"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "*a{",
        "pump": [
          "{a}\\{\\}"
        ]
      },
      {
        "prefix": [
          "{|"
        ],
        "suffix": "",
        "pump": [
          "\\{{}{}"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "*a\\/",
        "pump": [
          "{a}\\{\\}"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\r|\\n|\\r\\n)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\r\r\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\ra",
        "pump": [
          "\r\r\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(<li[^>]*>(.+)</li\\s*>)+",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "</a",
        "pump": [
          "<li>a</li><li>a</li>"
        ]
      },
      {
        "prefix": [
          "<li>\u0000</li><li>\u0000"
        ],
        "suffix": "",
        "pump": [
          "</li><li>\u0000</li><li>\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "l",
        "pump": [
          "<li>a</li><li>a</li>"
        ]
      },
      {
        "prefix": [
          "<li>\u0000</li><li>\u0000"
        ],
        "suffix": "",
        "pump": [
          "</li><li>\u0000</li><li>\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/\\*\\*(\\n|.)+?\\*\\/",
    "inputs": [
      {
        "prefix": [
          "/**!"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "/**"
        ],
        "suffix": "/\n",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "/**0"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "/**"
        ],
        "suffix": "/*",
        "pump": [
          "\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(crop)(-top-left|-top|-top-right|-left|-center|-right|-bottom-left|-bottom|-bottom-right|-[\\d]{1,3}-[\\d]{1,3})*$",
    "inputs": [
      {
        "prefix": [
          "crop"
        ],
        "suffix": "!",
        "pump": [
          "-bottom-right"
        ]
      },
      {
        "prefix": [
          "crop"
        ],
        "suffix": "eft-00",
        "pump": [
          "-top-left"
        ]
      },
      {
        "prefix": [
          "crop-top-right"
        ],
        "suffix": "\u0000",
        "pump": [
          "-top-left-top-right"
        ]
      },
      {
        "prefix": [
          "crop"
        ],
        "suffix": "!",
        "pump": [
          "-bottom-right"
        ]
      },
      {
        "prefix": [
          "crop"
        ],
        "suffix": "eft-",
        "pump": [
          "-top-left"
        ]
      },
      {
        "prefix": [
          "crop-left"
        ],
        "suffix": "\u0000",
        "pump": [
          "-top-left-left"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:.*/)*(.*)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "a/"
        ]
      },
      {
        "prefix": [
          "/"
        ],
        "suffix": "",
        "pump": [
          "//"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^macro\\s+([a-zA-Z0-9_]+)\\s*\\(\\s*((?:[a-zA-Z0-9_]+(?:,\\s*)?)*)\\s*\\)$",
    "inputs": [
      {
        "prefix": [
          "macro a("
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "macro\ta(a"
        ],
        "suffix": "ma",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "macros00,s"
        ],
        "suffix": "\u0000",
        "pump": [
          "s0,s"
        ]
      },
      {
        "prefix": [
          "macro\tc("
        ],
        "suffix": "macrmacrodAB9d8fb",
        "pump": [
          "macr"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((?:(?:\\[[^\\]+]\\])|(?:[^\\s\\+\\>\\~:]))+)((?::[^\\s\\+\\>\\~]+)?\\s*[\\s\\+\\>\\~]?)\\s*",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "[:a\ta",
        "pump": [
          "[a][a]"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "[\t\t:",
        "pump": [
          "[a][a]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<input(\\r|\\t|\\n|.)*?type=\\\"file\\\"(\\r|\\t|\\n|.)*?>",
    "inputs": [
      {
        "prefix": [
          "<input"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<input"
        ],
        "suffix": "e=",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<input"
        ],
        "suffix": "\t\t\t\t\t\t\t\t\r\t\r\t\t \t\r\r  \r  \r\r\t\n\t   \r\n",
        "pump": [
          "\t\t\t\t"
        ]
      },
      {
        "prefix": [
          "<input"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<input"
        ],
        "suffix": "y<",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "\t<input\t<input\t<inputQNxcyBeTUdrcyz^\"elp\t<type=\"ft>type=\"fiHCUaXrL"
        ],
        "suffix": "N\ti\t\t\tN\ti\t\t\t\r\n\t\r\r<input>1C4b6d08C",
        "pump": [
          "N\ti\t\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$",
    "inputs": [
      {
        "prefix": [
          "https://-"
        ],
        "suffix": "{",
        "pump": [
          ":---"
        ]
      },
      {
        "prefix": [
          "https://a"
        ],
        "suffix": "a",
        "pump": [
          "aaaa"
        ]
      },
      {
        "prefix": [
          "http://"
        ],
        "suffix": "a-z0a-z0362501888752401*",
        "pump": [
          "a-z0"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\\\e\\[(?:\\d+;?)+m",
    "inputs": [
      {
        "prefix": [
          "\\e[0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "\\e[0"
        ],
        "suffix": "0;;",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "\\\\e["
        ],
        "suffix": "258825880232582230",
        "pump": [
          "2588"
        ]
      },
      {
        "prefix": [
          "\\e[0"
        ],
        "suffix": "",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "\\e[0"
        ],
        "suffix": "ma\\",
        "pump": [
          "00"
        ]
      },
      {
        "prefix": [
          "\\e["
        ],
        "suffix": "015501551556255625",
        "pump": [
          "0155"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((database|dbname)(\\w)*=(\\w)+((-)*(\\w)*)*)",
    "inputs": [
      {
        "prefix": [
          "dbname=a"
        ],
        "suffix": "-=",
        "pump": [
          "--"
        ]
      },
      {
        "prefix": [
          "dbname=a"
        ],
        "suffix": "b$dbnamedb",
        "pump": [
          "--"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "/Encoding \\d+ array\\n(0 1 .*for\\n)?((dup \\d+\\s*/\\S+ put(.*)\\n)+)",
    "inputs": [
      {
        "prefix": [
          "/Encoding 0 array\n"
        ],
        "suffix": "up\t",
        "pump": [
          "dup 0/a put put\n"
        ]
      },
      {
        "prefix": [
          "/Encoding 0 array\n"
        ],
        "suffix": "y\nd/Enco",
        "pump": [
          "dup 0/a put put\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": "",
        "pump": [
          "\\\\x0c"
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\'\n",
        "pump": [
          "\\\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([`~]{3,})(\\w+)?\\s*(\\{([^{}]*?|\".*?\"|'.*?')*\\})?\\s*$",
    "inputs": [
      {
        "prefix": [
          "~~~{"
        ],
        "suffix": "",
        "pump": [
          "("
        ]
      },
      {
        "prefix": [
          "```{"
        ],
        "suffix": "`\"",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "`~`{"
        ],
        "suffix": "`OKA`OKAGPZGUCGTB",
        "pump": [
          "`OKA"
        ]
      },
      {
        "prefix": [
          "~{"
        ],
        "suffix": "",
        "pump": [
          "("
        ]
      },
      {
        "prefix": [
          "`{"
        ],
        "suffix": "`\"{",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "`~{"
        ],
        "suffix": "RYQZRYQZJRLIPGALG",
        "pump": [
          "RYQZ"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^<([\\w:]+)((?:\\s+[\\w\\-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>",
    "inputs": [
      {
        "prefix": [
          "<0"
        ],
        "suffix": "",
        "pump": [
          " a=''"
        ]
      },
      {
        "prefix": [
          "<a"
        ],
        "suffix": "\t",
        "pump": [
          "\ta=\"\""
        ]
      },
      {
        "prefix": [
          "<:s-=s"
        ],
        "suffix": "",
        "pump": [
          "\"\"s-=s"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "Name\\sservers:\\s((.+\\n)+)\\n",
    "inputs": [
      {
        "prefix": [
          "Name servers: !\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          "Name\tservers:\t"
        ],
        "suffix": "ers",
        "pump": [
          "a\n"
        ]
      },
      {
        "prefix": [
          "Name servers: N\\x0a"
        ],
        "suffix": "",
        "pump": [
          "!\\x0a!\\x0a"
        ]
      },
      {
        "prefix": [
          "Name\tservers:\t"
        ],
        "suffix": "s:\n",
        "pump": [
          "a\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "((?:[\\n\\r]|.)*)(<meta name=\\\"generator\\\" content=\\\"JSDoc 3.*)((?:[\\n\\r]|.)*)",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n<meta name=",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n<meta name=\"genera",
        "pump": [
          "\n\n"
        ]
      },
      {
        "prefix": [
          "<meta name=\"generator\" content=\"JSDoc 3\r"
        ],
        "suffix": "",
        "pump": [
          "\r\r"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(\\{)((\\[)(\\d+)..(\\d+)(\\])[,]?){1,}(\\})?",
    "inputs": [
      {
        "prefix": [
          "{"
        ],
        "suffix": "{[0",
        "pump": [
          "[00a00]"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "0{{",
        "pump": [
          "[00a00]"
        ]
      },
      {
        "prefix": [
          "{"
        ],
        "suffix": "],[0",
        "pump": [
          "[00a00]"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(?:\\s+|#.*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})",
    "inputs": [],
    "complexity": "exponential"
  },
  {
    "regex": "(.*)+\\.js$",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "/"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "sa.j",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "Ex+OEx+O.a}a5Lt;t",
        "pump": [
          "Ex+O"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "",
        "pump": [
          "/"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "sa",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "}2U,}2U,v\\JD]RuF2",
        "pump": [
          "}2U,"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*",
    "inputs": [
      {
        "prefix": [
          "-a"
        ],
        "suffix": "\\a\\",
        "pump": [
          "\\\\aaa"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([a-zA-Z0-9])+([a-zA-Z0-9_\\.\\+-])*@([a-zA-Z0-9_-])+([a-zA-Z0-9\\._-]+)+$",
    "inputs": [
      {
        "prefix": [
          "a-@a."
        ],
        "suffix": "!",
        "pump": [
          "--"
        ]
      },
      {
        "prefix": [
          "a@aa"
        ],
        "suffix": "@.",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "0@---."
        ],
        "suffix": "\u0000",
        "pump": [
          "0."
        ]
      },
      {
        "prefix": [
          "r@"
        ],
        "suffix": "-wTr-wTr6a-zA-Z0-9@",
        "pump": [
          "-wTr"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(",
    "inputs": [
      {
        "prefix": [
          ".-"
        ],
        "suffix": "",
        "pump": [
          "\\00"
        ]
      },
      {
        "prefix": [
          "#"
        ],
        "suffix": "a\t",
        "pump": [
          "a\\aa"
        ]
      },
      {
        "prefix": [
          "#"
        ],
        "suffix": "1\\e1\\eaF\\e1\\e1\\eaF\\e1\\eaFustRgIX\\eapPGDIvCdjIEsRG\\e1\\eaFustRgIXpvCmiSH",
        "pump": [
          "1\\e1\\eaF\\e"
        ]
      },
      {
        "prefix": [
          ".-"
        ],
        "suffix": "",
        "pump": [
          "\\00"
        ]
      },
      {
        "prefix": [
          "#"
        ],
        "suffix": "\\a$",
        "pump": [
          "a\\aa"
        ]
      },
      {
        "prefix": [
          "#\\"
        ],
        "suffix": "99\\99999\\999\\99999\\99A\\AA9AA9999\\9999A\\A",
        "pump": [
          "99\\99999\\9"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\/\\*(?:\\n|.)*\\*\\/",
    "inputs": [
      {
        "prefix": [
          "/*"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "/\n",
        "pump": [
          "\n"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "/*"
        ],
        "suffix": "/\n*",
        "pump": [
          "\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\\?\\?((?:.[^?]|[^?].)+)\\?\\?",
    "inputs": [
      {
        "prefix": [
          "??@?"
        ],
        "suffix": "",
        "pump": [
          "!!"
        ]
      },
      {
        "prefix": [
          "??"
        ],
        "suffix": "a????",
        "pump": [
          "aaaa"
        ]
      },
      {
        "prefix": [
          "??"
        ],
        "suffix": "uN\\[qxuN\\[qxAHME3dA(\\Tu|Y8f>\b/X,V",
        "pump": [
          "uN\\[qx"
        ]
      },
      {
        "prefix": [
          "??@?"
        ],
        "suffix": "",
        "pump": [
          "!!"
        ]
      },
      {
        "prefix": [
          "??"
        ],
        "suffix": "a?",
        "pump": [
          "aaaa"
        ]
      },
      {
        "prefix": [
          "\u0000\u0000\u0000\u0000"
        ],
        "suffix": "\u0000",
        "pump": [
          "@\u0000\u0000\u0000"
        ]
      },
      {
        "prefix": [
          "<??"
        ],
        "suffix": "P|:sM\bP|:sM\bq4PKW 7L\bs\"Y`ihUrDqv",
        "pump": [
          "P|:sM\b"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "\"(?:\\\\\"|.)*?\"|'(?:\\\\'|.)*?'|[^ ]+",
    "inputs": [
      {
        "prefix": [
          "'"
        ],
        "suffix": " ",
        "pump": [
          "\\'"
        ]
      },
      {
        "prefix": [
          "\"\""
        ],
        "suffix": "",
        "pump": [
          "\"\""
        ]
      },
      {
        "prefix": [
          "'"
        ],
        "suffix": "\\ ",
        "pump": [
          "\\'"
        ]
      },
      {
        "prefix": [
          "\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"\u0000"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:[^\\s\"]+|\"[^\"]*\")+",
    "inputs": [
      {
        "prefix": [
          "a"
        ],
        "suffix": "\"\t\"\t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "a"
        ],
        "suffix": "a\"\t",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "\u0000\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^((\\w+(\\.\\w+)?|'.*?'|\".*?\")\\s+(in|==|!=|not in)\\s+(\\w+(\\.\\w+)?|'.*?'|\".*?\")(\\s+(or|and)\\s+)?)+$",
    "inputs": [
      {
        "prefix": [
          "a.a in 0"
        ],
        "suffix": "{",
        "pump": [
          "\"\"\\x09!=\\x09\"\"\\x09!=\\x09'\"'\"\"\"\\x09in\\x090"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "nd\tand",
        "pump": [
          "a\t!=\ta''\t!=\t'\t!=\t''"
        ]
      },
      {
        "prefix": [
          "ws!=swws!=s\"\u0000"
        ],
        "suffix": "",
        "pump": [
          "\"ws!=s\"\u0000"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "Ht in\tnK6JJY3Yg5Ht in\tnK6JJY3Yg5HIDkHX0kVuKFWN80Y3x1BVHdBiZmKX2LEXPdi in\tnninnHt in\tnn\t in\tnnYg ",
        "pump": [
          "Ht in\tnK6JJY3Yg5"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<script type=\"application\\/json\">((.|\\s)*?)<\\/script>",
    "inputs": [
      {
        "prefix": [
          "<script type=\"application/json\">"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "<script type=\"application/json\">"
        ],
        "suffix": "pl",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "<script type=\"application/json\">s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "<script type=\"application/json\">"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "<script type=\"application/json\">"
        ],
        "suffix": "so",
        "pump": [
          "\t"
        ]
      },
      {
        "prefix": [
          "<script type=\"application/json\">s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "<script type=\"application/json\">< t \t\t\n \r"
        ],
        "suffix": "        \r\n \r\r\r\n \n",
        "pump": [
          "    "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?",
    "inputs": [
      {
        "prefix": [
          ""
        ],
        "suffix": "[][`][[",
        "pump": [
          "``"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "a",
        "pump": [
          "[]``"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "```(.|\\s)+```",
    "inputs": [
      {
        "prefix": [
          "```!"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "```"
        ],
        "suffix": "\t``",
        "pump": [
          "a\t"
        ]
      },
      {
        "prefix": [
          "```\u0000s"
        ],
        "suffix": "",
        "pump": [
          "ss"
        ]
      },
      {
        "prefix": [
          "```a"
        ],
        "suffix": "",
        "pump": [
          "\\x09"
        ]
      },
      {
        "prefix": [
          "```"
        ],
        "suffix": "\t`",
        "pump": [
          "a\t"
        ]
      },
      {
        "prefix": [
          "```\u0000\u0000"
        ],
        "suffix": "",
        "pump": [
          "s\u0000"
        ]
      },
      {
        "prefix": [
          "```"
        ],
        "suffix": "` \t ` \t \t  \r\t\t\n\t\n   ",
        "pump": [
          "` \t "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "^(\\s|\\n)+$",
    "inputs": [
      {
        "prefix": [
          "\\x0b"
        ],
        "suffix": "\\x00",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "#",
        "pump": [
          "\t\n"
        ]
      },
      {
        "prefix": [
          ""
        ],
        "suffix": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nj",
        "pump": [
          "\n\n\n\n"
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<textarea ((?:\"[^\"]*\"|'[^']*'|[^'\"<>]*)*)>(.*?)<\\/textarea.*?>",
    "inputs": [
      {
        "prefix": [
          "<textarea "
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          "<textarea "
        ],
        "suffix": "ar</'</\"</textare",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<textarea \""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "B<texta"
        ],
        "suffix": "rea rea c\b\tUb20}b`3$D",
        "pump": [
          "rea "
        ]
      },
      {
        "prefix": [
          "<textarea "
        ],
        "suffix": "",
        "pump": [
          "!"
        ]
      },
      {
        "prefix": [
          "<textarea "
        ],
        "suffix": "/texta",
        "pump": [
          "aa"
        ]
      },
      {
        "prefix": [
          "<textarea \"\""
        ],
        "suffix": "",
        "pump": [
          "\"\"\""
        ]
      },
      {
        "prefix": [
          "<texta"
        ],
        "suffix": "rea rea q_|+bDz\b9Acr}",
        "pump": [
          "rea "
        ]
      }
    ],
    "complexity": "exponential"
  },
  {
    "regex": "<select(\\r|\\t|\\n|.)*?<\\/select>",
    "inputs": [
      {
        "prefix": [
          "<select"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<select"
        ],
        "suffix": "<s",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<select\t\t\t\r\t\t\t\r\t\n"
        ],
        "suffix": "\t\t\t\t\t\t\t\t \t",
        "pump": [
          "\t\t\t\t"
        ]
      },
      {
        "prefix": [
          "<select"
        ],
        "suffix": "",
        "pump": [
          "\\x0a"
        ]
      },
      {
        "prefix": [
          "<select"
        ],
        "suffix": "se",
        "pump": [
          "\r"
        ]
      },
      {
        "prefix": [
          "<select\\c^{\t\t\t\n  \n  \r\n\n\r"
        ],
        "suffix": " \t\n\r\n\t\t\t \t\n\r\n\t\t\t\n\r   \n\n\t \t\n\t\r\r \n\n ",
        "pump": [
          " \t\n\r\n\t\t\t"
        ]
      }
    ],
    "complexity": "exponential"
  }
]
